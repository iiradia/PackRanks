"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var gridRowCell_1 = require("./gridRowCell");
var utils_1 = require("./utils");
var GridRow = /** @class */ (function (_super) {
    __extends(GridRow, _super);
    function GridRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GridRow.prototype.render = function () {
        var _this = this;
        var rowClass = this.props.settings.rowClass;
        var className = this.props.settings.classPrefix + "Row " + this.props.settings.classPrefix + (this.props.index % 2 ? 'Odd' : 'Even');
        if (rowClass) {
            className = rowClass(className, this.props.row);
        }
        return React.createElement("tr", { className: className, onClick: this.onClick.bind(this, this.props.row) }, this.props.columns.map(function (column, index) {
            var item;
            if (typeof column.cell === 'function') {
                item = column.cell(_this.props.row, column.key);
            }
            else if (column.cell.indexOf('.') !== -1) {
                item = utils_1.Utils.getObjectByKey(_this.props.row, column.cell);
            }
            else {
                item = _this.props.row[column.cell];
            }
            if (typeof item === 'object' && typeof column.cell !== 'function') {
                var preClassName = _this.props.settings.classPrefix + "CellPre " + _this.props.settings.classPrefix + "CellPre_" + column.key;
                if (column.objectDisplayStyle) {
                    switch (column.objectDisplayStyle) {
                        case 'string':
                            item = utils_1.Utils.flattenToString(item);
                            break;
                        case 'json':
                            item = JSON.stringify(item);
                            break;
                        case 'jsonSpaced':
                            item = React.createElement("pre", { className: preClassName }, JSON.stringify(item, null, 2));
                            break;
                        case 'flatJson':
                            item = JSON.stringify(utils_1.Utils.flatten(item));
                            break;
                        case 'flatJsonSpaced':
                            item = React.createElement("pre", { className: preClassName }, JSON.stringify(utils_1.Utils.flatten(item), null, 2));
                            break;
                        default:
                            item = utils_1.Utils.flattenToString(item);
                    }
                }
            }
            var key = "jt-body-td-" + index;
            return React.createElement(gridRowCell_1.GridRowCell, { settings: _this.props.settings, onClickCell: _this.props.onClickCell, item: item, row: _this.props.row, column: column, key: key });
        }));
    };
    GridRow.prototype.onClick = function (item, e) {
        if (this.props.onClickRow) {
            this.props.onClickRow(e, item);
        }
    };
    return GridRow;
}(React.Component));
exports.GridRow = GridRow;
//# sourceMappingURL=gridRow.js.map