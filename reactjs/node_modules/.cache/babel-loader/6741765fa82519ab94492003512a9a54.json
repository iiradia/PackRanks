{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar EventPropagators = require('./EventPropagators');\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar ReactInputSelection = require('./ReactInputSelection');\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getActiveElement = require('fbjs/lib/getActiveElement');\n\nvar isTextInputElement = require('./isTextInputElement');\n\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: 'onSelect',\n      captured: 'onSelectCapture'\n    },\n    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']\n  }\n};\nvar activeElement = null;\nvar activeElementInst = null;\nvar lastSelection = null;\nvar mouseDown = false; // Track whether a listener exists for this plugin. If none exist, we do\n// not extract events. See #3639.\n\nvar hasListener = false;\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @return {object}\n */\n\nfunction getSelection(node) {\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\n\n\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\n    return null;\n  } // Only fire when selection has actually changed.\n\n\n  var currentSelection = getSelection(activeElement);\n\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n    return syntheticEvent;\n  }\n\n  return null;\n}\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\n\n\nvar SelectEventPlugin = {\n  eventTypes: eventTypes,\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (!hasListener) {\n      return null;\n    }\n\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case 'topFocus':\n        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {\n          activeElement = targetNode;\n          activeElementInst = targetInst;\n          lastSelection = null;\n        }\n\n        break;\n\n      case 'topBlur':\n        activeElement = null;\n        activeElementInst = null;\n        lastSelection = null;\n        break;\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n\n      case 'topMouseDown':\n        mouseDown = true;\n        break;\n\n      case 'topContextMenu':\n      case 'topMouseUp':\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't). IE's event fires out of order with respect\n      // to key and input events on deletion, so we discard it.\n      //\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      // This is also our approach for IE handling, for the reason above.\n\n      case 'topSelectionChange':\n        if (skipSelectionChangeEvent) {\n          break;\n        }\n\n      // falls through\n\n      case 'topKeyDown':\n      case 'topKeyUp':\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n    }\n\n    return null;\n  },\n  didPutListener: function (inst, registrationName, listener) {\n    if (registrationName === 'onSelect') {\n      hasListener = true;\n    }\n  }\n};\nmodule.exports = SelectEventPlugin;","map":{"version":3,"sources":["/Users/mathew/EasyA/reactjs/node_modules/react-simplert/node_modules/react-dom/lib/SelectEventPlugin.js"],"names":["EventPropagators","require","ExecutionEnvironment","ReactDOMComponentTree","ReactInputSelection","SyntheticEvent","getActiveElement","isTextInputElement","shallowEqual","skipSelectionChangeEvent","canUseDOM","document","documentMode","eventTypes","select","phasedRegistrationNames","bubbled","captured","dependencies","activeElement","activeElementInst","lastSelection","mouseDown","hasListener","getSelection","node","hasSelectionCapabilities","start","selectionStart","end","selectionEnd","window","selection","anchorNode","anchorOffset","focusNode","focusOffset","range","createRange","parentElement","text","top","boundingTop","left","boundingLeft","constructSelectEvent","nativeEvent","nativeEventTarget","currentSelection","syntheticEvent","getPooled","type","target","accumulateTwoPhaseDispatches","SelectEventPlugin","extractEvents","topLevelType","targetInst","targetNode","getNodeFromInstance","contentEditable","didPutListener","inst","registrationName","listener","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getActiveElement = require('fbjs/lib/getActiveElement');\nvar isTextInputElement = require('./isTextInputElement');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: 'onSelect',\n      captured: 'onSelectCapture'\n    },\n    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']\n  }\n};\n\nvar activeElement = null;\nvar activeElementInst = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n// Track whether a listener exists for this plugin. If none exist, we do\n// not extract events. See #3639.\nvar hasListener = false;\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n\n  return null;\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n  eventTypes: eventTypes,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (!hasListener) {\n      return null;\n    }\n\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case 'topFocus':\n        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {\n          activeElement = targetNode;\n          activeElementInst = targetInst;\n          lastSelection = null;\n        }\n        break;\n      case 'topBlur':\n        activeElement = null;\n        activeElementInst = null;\n        lastSelection = null;\n        break;\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case 'topMouseDown':\n        mouseDown = true;\n        break;\n      case 'topContextMenu':\n      case 'topMouseUp':\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't). IE's event fires out of order with respect\n      // to key and input events on deletion, so we discard it.\n      //\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      // This is also our approach for IE handling, for the reason above.\n      case 'topSelectionChange':\n        if (skipSelectionChangeEvent) {\n          break;\n        }\n      // falls through\n      case 'topKeyDown':\n      case 'topKeyUp':\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n    }\n\n    return null;\n  },\n\n  didPutListener: function (inst, registrationName, listener) {\n    if (registrationName === 'onSelect') {\n      hasListener = true;\n    }\n  }\n};\n\nmodule.exports = SelectEventPlugin;"]},"metadata":{},"sourceType":"script"}