{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n/**\n * Given a `prevElement` and `nextElement`, determines if the existing\n * instance should be updated as opposed to being destroyed or replaced by a new\n * instance. Both arguments are elements. This ensures that this logic can\n * operate on stateless trees without any backing instance.\n *\n * @param {?object} prevElement\n * @param {?object} nextElement\n * @return {boolean} True if the existing instance should be updated.\n * @protected\n */\n\nfunction shouldUpdateReactComponent(prevElement, nextElement) {\n  var prevEmpty = prevElement === null || prevElement === false;\n  var nextEmpty = nextElement === null || nextElement === false;\n\n  if (prevEmpty || nextEmpty) {\n    return prevEmpty === nextEmpty;\n  }\n\n  var prevType = typeof prevElement;\n  var nextType = typeof nextElement;\n\n  if (prevType === 'string' || prevType === 'number') {\n    return nextType === 'string' || nextType === 'number';\n  } else {\n    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;\n  }\n}\n\nmodule.exports = shouldUpdateReactComponent;","map":{"version":3,"sources":["/Users/mathew/EasyA/reactjs/node_modules/react-simplert/node_modules/react-dom/lib/shouldUpdateReactComponent.js"],"names":["shouldUpdateReactComponent","prevElement","nextElement","prevEmpty","nextEmpty","prevType","nextType","type","key","module","exports"],"mappings":"AAAA;;;;;;;AAQA;AAEA;;;;;;;;;;;;AAYA,SAASA,0BAAT,CAAoCC,WAApC,EAAiDC,WAAjD,EAA8D;AAC5D,MAAIC,SAAS,GAAGF,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAxD;AACA,MAAIG,SAAS,GAAGF,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAxD;;AACA,MAAIC,SAAS,IAAIC,SAAjB,EAA4B;AAC1B,WAAOD,SAAS,KAAKC,SAArB;AACD;;AAED,MAAIC,QAAQ,GAAG,OAAOJ,WAAtB;AACA,MAAIK,QAAQ,GAAG,OAAOJ,WAAtB;;AACA,MAAIG,QAAQ,KAAK,QAAb,IAAyBA,QAAQ,KAAK,QAA1C,EAAoD;AAClD,WAAOC,QAAQ,KAAK,QAAb,IAAyBA,QAAQ,KAAK,QAA7C;AACD,GAFD,MAEO;AACL,WAAOA,QAAQ,KAAK,QAAb,IAAyBL,WAAW,CAACM,IAAZ,KAAqBL,WAAW,CAACK,IAA1D,IAAkEN,WAAW,CAACO,GAAZ,KAAoBN,WAAW,CAACM,GAAzG;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBV,0BAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Given a `prevElement` and `nextElement`, determines if the existing\n * instance should be updated as opposed to being destroyed or replaced by a new\n * instance. Both arguments are elements. This ensures that this logic can\n * operate on stateless trees without any backing instance.\n *\n * @param {?object} prevElement\n * @param {?object} nextElement\n * @return {boolean} True if the existing instance should be updated.\n * @protected\n */\n\nfunction shouldUpdateReactComponent(prevElement, nextElement) {\n  var prevEmpty = prevElement === null || prevElement === false;\n  var nextEmpty = nextElement === null || nextElement === false;\n  if (prevEmpty || nextEmpty) {\n    return prevEmpty === nextEmpty;\n  }\n\n  var prevType = typeof prevElement;\n  var nextType = typeof nextElement;\n  if (prevType === 'string' || prevType === 'number') {\n    return nextType === 'string' || nextType === 'number';\n  } else {\n    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;\n  }\n}\n\nmodule.exports = shouldUpdateReactComponent;"]},"metadata":{},"sourceType":"script"}