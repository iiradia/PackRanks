{"ast":null,"code":"/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar genericComponentClass = null;\nvar textComponentClass = null;\nvar ReactHostComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function (componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function (componentClass) {\n    textComponentClass = componentClass;\n  }\n};\n/**\n * Get a host internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\n\nfunction createInternalComponent(element) {\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;\n  return new genericComponentClass(element);\n}\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\n\n\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\n\n\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactHostComponent = {\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactHostComponentInjection\n};\nmodule.exports = ReactHostComponent;","map":{"version":3,"sources":["/Users/mathew/EasyA/reactjs/node_modules/react-simplert/node_modules/react-dom/lib/ReactHostComponent.js"],"names":["_prodInvariant","require","invariant","genericComponentClass","textComponentClass","ReactHostComponentInjection","injectGenericComponentClass","componentClass","injectTextComponentClass","createInternalComponent","element","process","env","NODE_ENV","type","createInstanceForText","text","isTextComponent","component","ReactHostComponent","injection","module","exports"],"mappings":"AAAA;;;;;;;AAQA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,sBAAD,CAA5B;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIE,qBAAqB,GAAG,IAA5B;AACA,IAAIC,kBAAkB,GAAG,IAAzB;AAEA,IAAIC,2BAA2B,GAAG;AAChC;AACA;AACAC,EAAAA,2BAA2B,EAAE,UAAUC,cAAV,EAA0B;AACrDJ,IAAAA,qBAAqB,GAAGI,cAAxB;AACD,GAL+B;AAMhC;AACA;AACAC,EAAAA,wBAAwB,EAAE,UAAUD,cAAV,EAA0B;AAClDH,IAAAA,kBAAkB,GAAGG,cAArB;AACD;AAV+B,CAAlC;AAaA;;;;;;;AAMA,SAASE,uBAAT,CAAiCC,OAAjC,EAA0C;AACxC,GAACP,qBAAD,GAAyBQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,SAAS,CAAC,KAAD,EAAQ,iDAAR,EAA2DQ,OAAO,CAACI,IAAnE,CAAjD,GAA4Hd,cAAc,CAAC,KAAD,EAAQU,OAAO,CAACI,IAAhB,CAAnK,GAA2L,KAAK,CAAhM;AACA,SAAO,IAAIX,qBAAJ,CAA0BO,OAA1B,CAAP;AACD;AAED;;;;;;AAIA,SAASK,qBAAT,CAA+BC,IAA/B,EAAqC;AACnC,SAAO,IAAIZ,kBAAJ,CAAuBY,IAAvB,CAAP;AACD;AAED;;;;;;AAIA,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;AAClC,SAAOA,SAAS,YAAYd,kBAA5B;AACD;;AAED,IAAIe,kBAAkB,GAAG;AACvBV,EAAAA,uBAAuB,EAAEA,uBADF;AAEvBM,EAAAA,qBAAqB,EAAEA,qBAFA;AAGvBE,EAAAA,eAAe,EAAEA,eAHM;AAIvBG,EAAAA,SAAS,EAAEf;AAJY,CAAzB;AAOAgB,MAAM,CAACC,OAAP,GAAiBH,kBAAjB","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar genericComponentClass = null;\nvar textComponentClass = null;\n\nvar ReactHostComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function (componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function (componentClass) {\n    textComponentClass = componentClass;\n  }\n};\n\n/**\n * Get a host internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\nfunction createInternalComponent(element) {\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;\n  return new genericComponentClass(element);\n}\n\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactHostComponent = {\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactHostComponentInjection\n};\n\nmodule.exports = ReactHostComponent;"]},"metadata":{},"sourceType":"script"}