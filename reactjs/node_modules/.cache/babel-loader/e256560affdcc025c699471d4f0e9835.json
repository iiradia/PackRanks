{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMLazyTree = require('./DOMLazyTree');\n\nvar DOMProperty = require('./DOMProperty');\n\nvar React = require('react/lib/React');\n\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\n\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar ReactDOMContainerInfo = require('./ReactDOMContainerInfo');\n\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');\n\nvar ReactFeatureFlags = require('./ReactFeatureFlags');\n\nvar ReactInstanceMap = require('./ReactInstanceMap');\n\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');\n\nvar ReactReconciler = require('./ReactReconciler');\n\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\n\nvar ReactUpdates = require('./ReactUpdates');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\n\nvar instantiateReactComponent = require('./instantiateReactComponent');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar setInnerHTML = require('./setInnerHTML');\n\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\n\nvar warning = require('fbjs/lib/warning');\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;\nvar instancesByReactRootID = {};\n/**\n * Finds the index of the first character\n * that's not common between the two given strings.\n *\n * @return {number} the index of the character where the strings diverge\n */\n\nfunction firstDifferenceIndex(string1, string2) {\n  var minLen = Math.min(string1.length, string2.length);\n\n  for (var i = 0; i < minLen; i++) {\n    if (string1.charAt(i) !== string2.charAt(i)) {\n      return i;\n    }\n  }\n\n  return string1.length === string2.length ? -1 : minLen;\n}\n/**\n * @param {DOMElement|DOMDocument} container DOM element that may contain\n * a React component\n * @return {?*} DOM element that may have the reactRoot ID, or null.\n */\n\n\nfunction getReactRootElementInContainer(container) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType === DOC_NODE_TYPE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\nfunction internalGetID(node) {\n  // If node is something like a window, document, or text node, none of\n  // which support attributes or a .getAttribute method, gracefully return\n  // the empty string, as if the attribute were missing.\n  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';\n}\n/**\n * Mounts this component and inserts it into the DOM.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {DOMElement} container DOM element to mount into.\n * @param {ReactReconcileTransaction} transaction\n * @param {boolean} shouldReuseMarkup If true, do not insert markup\n */\n\n\nfunction mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {\n  var markerName;\n\n  if (ReactFeatureFlags.logTopLevelRenders) {\n    var wrappedElement = wrapperInstance._currentElement.props.child;\n    var type = wrappedElement.type;\n    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);\n    console.time(markerName);\n  }\n\n  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0\n  /* parentDebugID */\n  );\n\n  if (markerName) {\n    console.timeEnd(markerName);\n  }\n\n  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;\n\n  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);\n}\n/**\n * Batched mount.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {DOMElement} container DOM element to mount into.\n * @param {boolean} shouldReuseMarkup If true, do not insert markup\n */\n\n\nfunction batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(\n  /* useCreateElement */\n  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);\n  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);\n  ReactUpdates.ReactReconcileTransaction.release(transaction);\n}\n/**\n * Unmounts a component and removes it from the DOM.\n *\n * @param {ReactComponent} instance React component instance.\n * @param {DOMElement} container DOM element to unmount from.\n * @final\n * @internal\n * @see {ReactMount.unmountComponentAtNode}\n */\n\n\nfunction unmountComponentFromNode(instance, container, safely) {\n  if (process.env.NODE_ENV !== 'production') {\n    ReactInstrumentation.debugTool.onBeginFlush();\n  }\n\n  ReactReconciler.unmountComponent(instance, safely);\n\n  if (process.env.NODE_ENV !== 'production') {\n    ReactInstrumentation.debugTool.onEndFlush();\n  }\n\n  if (container.nodeType === DOC_NODE_TYPE) {\n    container = container.documentElement;\n  } // http://jsperf.com/emptying-a-node\n\n\n  while (container.lastChild) {\n    container.removeChild(container.lastChild);\n  }\n}\n/**\n * True if the supplied DOM node has a direct React-rendered child that is\n * not a React root element. Useful for warning in `render`,\n * `unmountComponentAtNode`, etc.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM element contains a direct child that was\n * rendered by React but is not a root element.\n * @internal\n */\n\n\nfunction hasNonRootReactChild(container) {\n  var rootEl = getReactRootElementInContainer(container);\n\n  if (rootEl) {\n    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);\n    return !!(inst && inst._hostParent);\n  }\n}\n/**\n * True if the supplied DOM node is a React DOM element and\n * it has been rendered by another copy of React.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM has been rendered by another copy of React\n * @internal\n */\n\n\nfunction nodeIsRenderedByOtherInstance(container) {\n  var rootEl = getReactRootElementInContainer(container);\n  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));\n}\n/**\n * True if the supplied DOM node is a valid node element.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM is a valid DOM node.\n * @internal\n */\n\n\nfunction isValidContainer(node) {\n  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));\n}\n/**\n * True if the supplied DOM node is a valid React node element.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM is a valid React DOM node.\n * @internal\n */\n\n\nfunction isReactNode(node) {\n  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));\n}\n\nfunction getHostRootInstanceInContainer(container) {\n  var rootEl = getReactRootElementInContainer(container);\n  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);\n  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;\n}\n\nfunction getTopLevelWrapperInContainer(container) {\n  var root = getHostRootInstanceInContainer(container);\n  return root ? root._hostContainerInfo._topLevelWrapper : null;\n}\n/**\n * Temporary (?) hack so that we can store all top-level pending updates on\n * composites instead of having to worry about different types of components\n * here.\n */\n\n\nvar topLevelRootCounter = 1;\n\nvar TopLevelWrapper = function () {\n  this.rootID = topLevelRootCounter++;\n};\n\nTopLevelWrapper.prototype.isReactComponent = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  TopLevelWrapper.displayName = 'TopLevelWrapper';\n}\n\nTopLevelWrapper.prototype.render = function () {\n  return this.props.child;\n};\n\nTopLevelWrapper.isReactTopLevelWrapper = true;\n/**\n * Mounting is the process of initializing a React component by creating its\n * representative DOM elements and inserting them into a supplied `container`.\n * Any prior content inside `container` is destroyed in the process.\n *\n *   ReactMount.render(\n *     component,\n *     document.getElementById('container')\n *   );\n *\n *   <div id=\"container\">                   <-- Supplied `container`.\n *     <div data-reactid=\".3\">              <-- Rendered reactRoot of React\n *       // ...                                 component.\n *     </div>\n *   </div>\n *\n * Inside of `container`, the first element rendered is the \"reactRoot\".\n */\n\nvar ReactMount = {\n  TopLevelWrapper: TopLevelWrapper,\n\n  /**\n   * Used by devtools. The keys are not important.\n   */\n  _instancesByReactRootID: instancesByReactRootID,\n\n  /**\n   * This is a hook provided to support rendering React components while\n   * ensuring that the apparent scroll position of its `container` does not\n   * change.\n   *\n   * @param {DOMElement} container The `container` being rendered into.\n   * @param {function} renderCallback This must be called once to do the render.\n   */\n  scrollMonitor: function (container, renderCallback) {\n    renderCallback();\n  },\n\n  /**\n   * Take a component that's already mounted into the DOM and replace its props\n   * @param {ReactComponent} prevComponent component instance already in the DOM\n   * @param {ReactElement} nextElement component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {?function} callback function triggered on completion\n   */\n  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {\n    ReactMount.scrollMonitor(container, function () {\n      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);\n\n      if (callback) {\n        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);\n      }\n    });\n    return prevComponent;\n  },\n\n  /**\n   * Render a new component into the DOM. Hooked by hooks!\n   *\n   * @param {ReactElement} nextElement element to render\n   * @param {DOMElement} container container to render into\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion\n   * @return {ReactComponent} nextComponent\n   */\n  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {\n    // Various parts of our code (such as ReactCompositeComponent's\n    // _renderValidatedComponent) assume that calls to render aren't nested;\n    // verify that that's the case.\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;\n    ReactBrowserEventEmitter.ensureScrollValueMonitoring();\n    var componentInstance = instantiateReactComponent(nextElement, false); // The initial render is synchronous but any updates that happen during\n    // rendering, in componentWillMount or componentDidMount, will be batched\n    // according to the current batching strategy.\n\n    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);\n    var wrapperID = componentInstance._instance.rootID;\n    instancesByReactRootID[wrapperID] = componentInstance;\n    return componentInstance;\n  },\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.\n   * @param {ReactElement} nextElement Component element to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {\n    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;\n    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);\n  },\n  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {\n    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');\n    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? \" Instead of passing a string like 'div', pass \" + \"React.createElement('div') or <div />.\" : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element\n    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? \" Instead of passing a string like 'div', pass \" + \"React.createElement('div') or <div />.\" : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;\n    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;\n    var nextWrappedElement = React.createElement(TopLevelWrapper, {\n      child: nextElement\n    });\n    var nextContext;\n\n    if (parentComponent) {\n      var parentInst = ReactInstanceMap.get(parentComponent);\n      nextContext = parentInst._processChildContext(parentInst._context);\n    } else {\n      nextContext = emptyObject;\n    }\n\n    var prevComponent = getTopLevelWrapperInContainer(container);\n\n    if (prevComponent) {\n      var prevWrappedElement = prevComponent._currentElement;\n      var prevElement = prevWrappedElement.props.child;\n\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {\n        var publicInst = prevComponent._renderedComponent.getPublicInstance();\n\n        var updatedCallback = callback && function () {\n          callback.call(publicInst);\n        };\n\n        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);\n\n        return publicInst;\n      } else {\n        ReactMount.unmountComponentAtNode(container);\n      }\n    }\n\n    var reactRootElement = getReactRootElementInContainer(container);\n    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);\n    var containerHasNonRootReactChild = hasNonRootReactChild(container);\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;\n\n      if (!containerHasReactMarkup || reactRootElement.nextSibling) {\n        var rootElementSibling = reactRootElement;\n\n        while (rootElementSibling) {\n          if (internalGetID(rootElementSibling)) {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;\n            break;\n          }\n\n          rootElementSibling = rootElementSibling.nextSibling;\n        }\n      }\n    }\n\n    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;\n\n    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();\n\n    if (callback) {\n      callback.call(component);\n    }\n\n    return component;\n  },\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactElement} nextElement Component element to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  render: function (nextElement, container, callback) {\n    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);\n  },\n\n  /**\n   * Unmounts and destroys the React component rendered in the `container`.\n   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode\n   *\n   * @param {DOMElement} container DOM element containing a React component.\n   * @return {boolean} True if a component was found in and unmounted from\n   *                   `container`\n   */\n  unmountComponentAtNode: function (container) {\n    // Various parts of our code (such as ReactCompositeComponent's\n    // _renderValidatedComponent) assume that calls to render aren't nested;\n    // verify that that's the case. (Strictly speaking, unmounting won't cause a\n    // render but we still don't expect to be in a render call here.)\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), \"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by another copy of React.') : void 0;\n    }\n\n    var prevComponent = getTopLevelWrapperInContainer(container);\n\n    if (!prevComponent) {\n      // Check if the node being unmounted was rendered by React, but isn't a\n      // root node.\n      var containerHasNonRootReactChild = hasNonRootReactChild(container); // Check if the container itself is a React root node.\n\n      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);\n\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, \"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;\n      }\n\n      return false;\n    }\n\n    delete instancesByReactRootID[prevComponent._instance.rootID];\n    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);\n    return true;\n  },\n  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;\n\n    if (shouldReuseMarkup) {\n      var rootElement = getReactRootElementInContainer(container);\n\n      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {\n        ReactDOMComponentTree.precacheNode(instance, rootElement);\n        return;\n      } else {\n        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n        var rootMarkup = rootElement.outerHTML;\n        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);\n        var normalizedMarkup = markup;\n\n        if (process.env.NODE_ENV !== 'production') {\n          // because rootMarkup is retrieved from the DOM, various normalizations\n          // will have occurred which will not be present in `markup`. Here,\n          // insert markup into a <div> or <iframe> depending on the container\n          // type to perform the same normalizations before comparing.\n          var normalizer;\n\n          if (container.nodeType === ELEMENT_NODE_TYPE) {\n            normalizer = document.createElement('div');\n            normalizer.innerHTML = markup;\n            normalizedMarkup = normalizer.innerHTML;\n          } else {\n            normalizer = document.createElement('iframe');\n            document.body.appendChild(normalizer);\n            normalizer.contentDocument.write(markup);\n            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;\n            document.body.removeChild(normalizer);\n          }\n        }\n\n        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);\n        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);\n        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\\n%s', difference) : _prodInvariant('42', difference) : void 0;\n\n        if (process.env.NODE_ENV !== 'production') {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\\n%s', difference) : void 0;\n        }\n      }\n    }\n\n    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document but you didn\\'t use server rendering. We can\\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;\n\n    if (transaction.useCreateElement) {\n      while (container.lastChild) {\n        container.removeChild(container.lastChild);\n      }\n\n      DOMLazyTree.insertTreeBefore(container, markup, null);\n    } else {\n      setInnerHTML(container, markup);\n      ReactDOMComponentTree.precacheNode(instance, container.firstChild);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);\n\n      if (hostNode._debugID !== 0) {\n        ReactInstrumentation.debugTool.onHostOperation({\n          instanceID: hostNode._debugID,\n          type: 'mount',\n          payload: markup.toString()\n        });\n      }\n    }\n  }\n};\nmodule.exports = ReactMount;","map":{"version":3,"sources":["/Users/mathew/EasyA/reactjs/node_modules/react-simplert/node_modules/react-dom/lib/ReactMount.js"],"names":["_prodInvariant","require","DOMLazyTree","DOMProperty","React","ReactBrowserEventEmitter","ReactCurrentOwner","ReactDOMComponentTree","ReactDOMContainerInfo","ReactDOMFeatureFlags","ReactFeatureFlags","ReactInstanceMap","ReactInstrumentation","ReactMarkupChecksum","ReactReconciler","ReactUpdateQueue","ReactUpdates","emptyObject","instantiateReactComponent","invariant","setInnerHTML","shouldUpdateReactComponent","warning","ATTR_NAME","ID_ATTRIBUTE_NAME","ROOT_ATTR_NAME","ROOT_ATTRIBUTE_NAME","ELEMENT_NODE_TYPE","DOC_NODE_TYPE","DOCUMENT_FRAGMENT_NODE_TYPE","instancesByReactRootID","firstDifferenceIndex","string1","string2","minLen","Math","min","length","i","charAt","getReactRootElementInContainer","container","nodeType","documentElement","firstChild","internalGetID","node","getAttribute","mountComponentIntoNode","wrapperInstance","transaction","shouldReuseMarkup","context","markerName","logTopLevelRenders","wrappedElement","_currentElement","props","child","type","displayName","name","console","time","markup","mountComponent","timeEnd","_renderedComponent","_topLevelWrapper","ReactMount","_mountImageIntoNode","batchedMountComponentIntoNode","componentInstance","ReactReconcileTransaction","getPooled","useCreateElement","perform","release","unmountComponentFromNode","instance","safely","process","env","NODE_ENV","debugTool","onBeginFlush","unmountComponent","onEndFlush","lastChild","removeChild","hasNonRootReactChild","rootEl","inst","getInstanceFromNode","_hostParent","nodeIsRenderedByOtherInstance","isReactNode","isValidContainer","hasAttribute","getHostRootInstanceInContainer","prevHostInstance","getTopLevelWrapperInContainer","root","_hostContainerInfo","topLevelRootCounter","TopLevelWrapper","rootID","prototype","isReactComponent","render","isReactTopLevelWrapper","_instancesByReactRootID","scrollMonitor","renderCallback","_updateRootComponent","prevComponent","nextElement","nextContext","callback","enqueueElementInternal","enqueueCallbackInternal","_renderNewRootComponent","current","getName","ensureScrollValueMonitoring","batchedUpdates","wrapperID","_instance","renderSubtreeIntoContainer","parentComponent","has","_renderSubtreeIntoContainer","validateCallback","isValidElement","undefined","tagName","toUpperCase","nextWrappedElement","createElement","parentInst","get","_processChildContext","_context","prevWrappedElement","prevElement","publicInst","getPublicInstance","updatedCallback","call","unmountComponentAtNode","reactRootElement","containerHasReactMarkup","containerHasNonRootReactChild","nextSibling","rootElementSibling","component","isContainerReactRoot","rootElement","canReuseMarkup","precacheNode","checksum","CHECKSUM_ATTR_NAME","removeAttribute","rootMarkup","outerHTML","setAttribute","normalizedMarkup","normalizer","document","innerHTML","body","appendChild","contentDocument","write","diffIndex","difference","substring","insertTreeBefore","hostNode","_debugID","onHostOperation","instanceID","payload","toString","module","exports"],"mappings":"AAAA;;;;;;;AAQA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,sBAAD,CAA5B;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,iBAAD,CAAnB;;AACA,IAAII,wBAAwB,GAAGJ,OAAO,CAAC,4BAAD,CAAtC;;AACA,IAAIK,iBAAiB,GAAGL,OAAO,CAAC,6BAAD,CAA/B;;AACA,IAAIM,qBAAqB,GAAGN,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIO,qBAAqB,GAAGP,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIQ,oBAAoB,GAAGR,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIS,iBAAiB,GAAGT,OAAO,CAAC,qBAAD,CAA/B;;AACA,IAAIU,gBAAgB,GAAGV,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIW,oBAAoB,GAAGX,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIY,mBAAmB,GAAGZ,OAAO,CAAC,uBAAD,CAAjC;;AACA,IAAIa,eAAe,GAAGb,OAAO,CAAC,mBAAD,CAA7B;;AACA,IAAIc,gBAAgB,GAAGd,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIe,YAAY,GAAGf,OAAO,CAAC,gBAAD,CAA1B;;AAEA,IAAIgB,WAAW,GAAGhB,OAAO,CAAC,sBAAD,CAAzB;;AACA,IAAIiB,yBAAyB,GAAGjB,OAAO,CAAC,6BAAD,CAAvC;;AACA,IAAIkB,SAAS,GAAGlB,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAImB,YAAY,GAAGnB,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIoB,0BAA0B,GAAGpB,OAAO,CAAC,8BAAD,CAAxC;;AACA,IAAIqB,OAAO,GAAGrB,OAAO,CAAC,kBAAD,CAArB;;AAEA,IAAIsB,SAAS,GAAGpB,WAAW,CAACqB,iBAA5B;AACA,IAAIC,cAAc,GAAGtB,WAAW,CAACuB,mBAAjC;AAEA,IAAIC,iBAAiB,GAAG,CAAxB;AACA,IAAIC,aAAa,GAAG,CAApB;AACA,IAAIC,2BAA2B,GAAG,EAAlC;AAEA,IAAIC,sBAAsB,GAAG,EAA7B;AAEA;;;;;;;AAMA,SAASC,oBAAT,CAA8BC,OAA9B,EAAuCC,OAAvC,EAAgD;AAC9C,MAAIC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASJ,OAAO,CAACK,MAAjB,EAAyBJ,OAAO,CAACI,MAAjC,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAApB,EAA4BI,CAAC,EAA7B,EAAiC;AAC/B,QAAIN,OAAO,CAACO,MAAR,CAAeD,CAAf,MAAsBL,OAAO,CAACM,MAAR,CAAeD,CAAf,CAA1B,EAA6C;AAC3C,aAAOA,CAAP;AACD;AACF;;AACD,SAAON,OAAO,CAACK,MAAR,KAAmBJ,OAAO,CAACI,MAA3B,GAAoC,CAAC,CAArC,GAAyCH,MAAhD;AACD;AAED;;;;;;;AAKA,SAASM,8BAAT,CAAwCC,SAAxC,EAAmD;AACjD,MAAI,CAACA,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AAED,MAAIA,SAAS,CAACC,QAAV,KAAuBd,aAA3B,EAA0C;AACxC,WAAOa,SAAS,CAACE,eAAjB;AACD,GAFD,MAEO;AACL,WAAOF,SAAS,CAACG,UAAjB;AACD;AACF;;AAED,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B;AACA;AACA;AACA,SAAOA,IAAI,CAACC,YAAL,IAAqBD,IAAI,CAACC,YAAL,CAAkBxB,SAAlB,CAArB,IAAqD,EAA5D;AACD;AAED;;;;;;;;;;AAQA,SAASyB,sBAAT,CAAgCC,eAAhC,EAAiDR,SAAjD,EAA4DS,WAA5D,EAAyEC,iBAAzE,EAA4FC,OAA5F,EAAqG;AACnG,MAAIC,UAAJ;;AACA,MAAI3C,iBAAiB,CAAC4C,kBAAtB,EAA0C;AACxC,QAAIC,cAAc,GAAGN,eAAe,CAACO,eAAhB,CAAgCC,KAAhC,CAAsCC,KAA3D;AACA,QAAIC,IAAI,GAAGJ,cAAc,CAACI,IAA1B;AACAN,IAAAA,UAAU,GAAG,mBAAmB,OAAOM,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCA,IAAI,CAACC,WAAL,IAAoBD,IAAI,CAACE,IAA9E,CAAb;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAaV,UAAb;AACD;;AAED,MAAIW,MAAM,GAAGlD,eAAe,CAACmD,cAAhB,CAA+BhB,eAA/B,EAAgDC,WAAhD,EAA6D,IAA7D,EAAmE1C,qBAAqB,CAACyC,eAAD,EAAkBR,SAAlB,CAAxF,EAAsHW,OAAtH,EAA+H;AAAE;AAAjI,GAAb;;AAGA,MAAIC,UAAJ,EAAgB;AACdS,IAAAA,OAAO,CAACI,OAAR,CAAgBb,UAAhB;AACD;;AAEDJ,EAAAA,eAAe,CAACkB,kBAAhB,CAAmCC,gBAAnC,GAAsDnB,eAAtD;;AACAoB,EAAAA,UAAU,CAACC,mBAAX,CAA+BN,MAA/B,EAAuCvB,SAAvC,EAAkDQ,eAAlD,EAAmEE,iBAAnE,EAAsFD,WAAtF;AACD;AAED;;;;;;;;;AAOA,SAASqB,6BAAT,CAAuCC,iBAAvC,EAA0D/B,SAA1D,EAAqEU,iBAArE,EAAwFC,OAAxF,EAAiG;AAC/F,MAAIF,WAAW,GAAGlC,YAAY,CAACyD,yBAAb,CAAuCC,SAAvC;AAClB;AACA,GAACvB,iBAAD,IAAsB1C,oBAAoB,CAACkE,gBAFzB,CAAlB;AAGAzB,EAAAA,WAAW,CAAC0B,OAAZ,CAAoB5B,sBAApB,EAA4C,IAA5C,EAAkDwB,iBAAlD,EAAqE/B,SAArE,EAAgFS,WAAhF,EAA6FC,iBAA7F,EAAgHC,OAAhH;AACApC,EAAAA,YAAY,CAACyD,yBAAb,CAAuCI,OAAvC,CAA+C3B,WAA/C;AACD;AAED;;;;;;;;;;;AASA,SAAS4B,wBAAT,CAAkCC,QAAlC,EAA4CtC,SAA5C,EAAuDuC,MAAvD,EAA+D;AAC7D,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCvE,IAAAA,oBAAoB,CAACwE,SAArB,CAA+BC,YAA/B;AACD;;AACDvE,EAAAA,eAAe,CAACwE,gBAAhB,CAAiCP,QAAjC,EAA2CC,MAA3C;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCvE,IAAAA,oBAAoB,CAACwE,SAArB,CAA+BG,UAA/B;AACD;;AAED,MAAI9C,SAAS,CAACC,QAAV,KAAuBd,aAA3B,EAA0C;AACxCa,IAAAA,SAAS,GAAGA,SAAS,CAACE,eAAtB;AACD,GAX4D,CAa7D;;;AACA,SAAOF,SAAS,CAAC+C,SAAjB,EAA4B;AAC1B/C,IAAAA,SAAS,CAACgD,WAAV,CAAsBhD,SAAS,CAAC+C,SAAhC;AACD;AACF;AAED;;;;;;;;;;;;AAUA,SAASE,oBAAT,CAA8BjD,SAA9B,EAAyC;AACvC,MAAIkD,MAAM,GAAGnD,8BAA8B,CAACC,SAAD,CAA3C;;AACA,MAAIkD,MAAJ,EAAY;AACV,QAAIC,IAAI,GAAGrF,qBAAqB,CAACsF,mBAAtB,CAA0CF,MAA1C,CAAX;AACA,WAAO,CAAC,EAAEC,IAAI,IAAIA,IAAI,CAACE,WAAf,CAAR;AACD;AACF;AAED;;;;;;;;;;AAQA,SAASC,6BAAT,CAAuCtD,SAAvC,EAAkD;AAChD,MAAIkD,MAAM,GAAGnD,8BAA8B,CAACC,SAAD,CAA3C;AACA,SAAO,CAAC,EAAEkD,MAAM,IAAIK,WAAW,CAACL,MAAD,CAArB,IAAiC,CAACpF,qBAAqB,CAACsF,mBAAtB,CAA0CF,MAA1C,CAApC,CAAR;AACD;AAED;;;;;;;;;AAOA,SAASM,gBAAT,CAA0BnD,IAA1B,EAAgC;AAC9B,SAAO,CAAC,EAAEA,IAAI,KAAKA,IAAI,CAACJ,QAAL,KAAkBf,iBAAlB,IAAuCmB,IAAI,CAACJ,QAAL,KAAkBd,aAAzD,IAA0EkB,IAAI,CAACJ,QAAL,KAAkBb,2BAAjG,CAAN,CAAR;AACD;AAED;;;;;;;;;AAOA,SAASmE,WAAT,CAAqBlD,IAArB,EAA2B;AACzB,SAAOmD,gBAAgB,CAACnD,IAAD,CAAhB,KAA2BA,IAAI,CAACoD,YAAL,CAAkBzE,cAAlB,KAAqCqB,IAAI,CAACoD,YAAL,CAAkB3E,SAAlB,CAAhE,CAAP;AACD;;AAED,SAAS4E,8BAAT,CAAwC1D,SAAxC,EAAmD;AACjD,MAAIkD,MAAM,GAAGnD,8BAA8B,CAACC,SAAD,CAA3C;AACA,MAAI2D,gBAAgB,GAAGT,MAAM,IAAIpF,qBAAqB,CAACsF,mBAAtB,CAA0CF,MAA1C,CAAjC;AACA,SAAOS,gBAAgB,IAAI,CAACA,gBAAgB,CAACN,WAAtC,GAAoDM,gBAApD,GAAuE,IAA9E;AACD;;AAED,SAASC,6BAAT,CAAuC5D,SAAvC,EAAkD;AAChD,MAAI6D,IAAI,GAAGH,8BAA8B,CAAC1D,SAAD,CAAzC;AACA,SAAO6D,IAAI,GAAGA,IAAI,CAACC,kBAAL,CAAwBnC,gBAA3B,GAA8C,IAAzD;AACD;AAED;;;;;;;AAKA,IAAIoC,mBAAmB,GAAG,CAA1B;;AACA,IAAIC,eAAe,GAAG,YAAY;AAChC,OAAKC,MAAL,GAAcF,mBAAmB,EAAjC;AACD,CAFD;;AAGAC,eAAe,CAACE,SAAhB,CAA0BC,gBAA1B,GAA6C,EAA7C;;AACA,IAAI3B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCsB,EAAAA,eAAe,CAAC7C,WAAhB,GAA8B,iBAA9B;AACD;;AACD6C,eAAe,CAACE,SAAhB,CAA0BE,MAA1B,GAAmC,YAAY;AAC7C,SAAO,KAAKpD,KAAL,CAAWC,KAAlB;AACD,CAFD;;AAGA+C,eAAe,CAACK,sBAAhB,GAAyC,IAAzC;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,IAAIzC,UAAU,GAAG;AACfoC,EAAAA,eAAe,EAAEA,eADF;;AAGf;;;AAGAM,EAAAA,uBAAuB,EAAEjF,sBANV;;AAQf;;;;;;;;AAQAkF,EAAAA,aAAa,EAAE,UAAUvE,SAAV,EAAqBwE,cAArB,EAAqC;AAClDA,IAAAA,cAAc;AACf,GAlBc;;AAoBf;;;;;;;AAOAC,EAAAA,oBAAoB,EAAE,UAAUC,aAAV,EAAyBC,WAAzB,EAAsCC,WAAtC,EAAmD5E,SAAnD,EAA8D6E,QAA9D,EAAwE;AAC5FjD,IAAAA,UAAU,CAAC2C,aAAX,CAAyBvE,SAAzB,EAAoC,YAAY;AAC9C1B,MAAAA,gBAAgB,CAACwG,sBAAjB,CAAwCJ,aAAxC,EAAuDC,WAAvD,EAAoEC,WAApE;;AACA,UAAIC,QAAJ,EAAc;AACZvG,QAAAA,gBAAgB,CAACyG,uBAAjB,CAAyCL,aAAzC,EAAwDG,QAAxD;AACD;AACF,KALD;AAOA,WAAOH,aAAP;AACD,GApCc;;AAsCf;;;;;;;;AAQAM,EAAAA,uBAAuB,EAAE,UAAUL,WAAV,EAAuB3E,SAAvB,EAAkCU,iBAAlC,EAAqDC,OAArD,EAA8D;AACrF;AACA;AACA;AACA6B,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC7D,OAAO,CAAChB,iBAAiB,CAACoH,OAAlB,IAA6B,IAA9B,EAAoC,yEAAyE,+DAAzE,GAA2I,iEAA3I,GAA+M,oDAAnP,EAAySpH,iBAAiB,CAACoH,OAAlB,IAA6BpH,iBAAiB,CAACoH,OAAlB,CAA0BC,OAA1B,EAA7B,IAAoE,yBAA7W,CAA/C,GAAyb,KAAK,CAA9b;AAEA,KAAC1B,gBAAgB,CAACxD,SAAD,CAAjB,GAA+BwC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChE,SAAS,CAAC,KAAD,EAAQ,iEAAR,CAAjD,GAA8HnB,cAAc,CAAC,IAAD,CAA3K,GAAoL,KAAK,CAAzL;AAEAK,IAAAA,wBAAwB,CAACuH,2BAAzB;AACA,QAAIpD,iBAAiB,GAAGtD,yBAAyB,CAACkG,WAAD,EAAc,KAAd,CAAjD,CATqF,CAWrF;AACA;AACA;;AAEApG,IAAAA,YAAY,CAAC6G,cAAb,CAA4BtD,6BAA5B,EAA2DC,iBAA3D,EAA8E/B,SAA9E,EAAyFU,iBAAzF,EAA4GC,OAA5G;AAEA,QAAI0E,SAAS,GAAGtD,iBAAiB,CAACuD,SAAlB,CAA4BrB,MAA5C;AACA5E,IAAAA,sBAAsB,CAACgG,SAAD,CAAtB,GAAoCtD,iBAApC;AAEA,WAAOA,iBAAP;AACD,GAnEc;;AAqEf;;;;;;;;;;;;;AAaAwD,EAAAA,0BAA0B,EAAE,UAAUC,eAAV,EAA2Bb,WAA3B,EAAwC3E,SAAxC,EAAmD6E,QAAnD,EAA6D;AACvF,MAAEW,eAAe,IAAI,IAAnB,IAA2BtH,gBAAgB,CAACuH,GAAjB,CAAqBD,eAArB,CAA7B,IAAsEhD,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChE,SAAS,CAAC,KAAD,EAAQ,iDAAR,CAAjD,GAA8GnB,cAAc,CAAC,IAAD,CAAlM,GAA2M,KAAK,CAAhN;AACA,WAAOqE,UAAU,CAAC8D,2BAAX,CAAuCF,eAAvC,EAAwDb,WAAxD,EAAqE3E,SAArE,EAAgF6E,QAAhF,CAAP;AACD,GArFc;AAuFfa,EAAAA,2BAA2B,EAAE,UAAUF,eAAV,EAA2Bb,WAA3B,EAAwC3E,SAAxC,EAAmD6E,QAAnD,EAA6D;AACxFvG,IAAAA,gBAAgB,CAACqH,gBAAjB,CAAkCd,QAAlC,EAA4C,iBAA5C;AACA,KAAClH,KAAK,CAACiI,cAAN,CAAqBjB,WAArB,CAAD,GAAqCnC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChE,SAAS,CAAC,KAAD,EAAQ,iDAAR,EAA2D,OAAOiG,WAAP,KAAuB,QAAvB,GAAkC,mDAAmD,wCAArF,GAAgI,OAAOA,WAAP,KAAuB,UAAvB,GAAoC,gDAAgD,sCAApF,GAA6H;AAC9YA,IAAAA,WAAW,IAAI,IAAf,IAAuBA,WAAW,CAAC3D,KAAZ,KAAsB6E,SAA7C,GAAyD,oEAAoE,kBAA7H,GAAkJ,EAD5D,CAAjD,GACmHtI,cAAc,CAAC,IAAD,EAAO,OAAOoH,WAAP,KAAuB,QAAvB,GAAkC,mDAAmD,wCAArF,GAAgI,OAAOA,WAAP,KAAuB,UAAvB,GAAoC,gDAAgD,sCAApF,GAA6HA,WAAW,IAAI,IAAf,IAAuBA,WAAW,CAAC3D,KAAZ,KAAsB6E,SAA7C,GAAyD,oEAAoE,kBAA7H,GAAkJ,EAAtZ,CADtK,GACkkB,KAAK,CADvkB;AAGArD,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC7D,OAAO,CAAC,CAACmB,SAAD,IAAc,CAACA,SAAS,CAAC8F,OAAzB,IAAoC9F,SAAS,CAAC8F,OAAV,CAAkBC,WAAlB,OAAoC,MAAzE,EAAiF,mEAAmE,uEAAnE,GAA6I,0DAA7I,GAA0M,wEAA1M,GAAqR,eAAtW,CAA/C,GAAwa,KAAK,CAA7a;AAEA,QAAIC,kBAAkB,GAAGrI,KAAK,CAACsI,aAAN,CAAoBjC,eAApB,EAAqC;AAC5D/C,MAAAA,KAAK,EAAE0D;AADqD,KAArC,CAAzB;AAIA,QAAIC,WAAJ;;AACA,QAAIY,eAAJ,EAAqB;AACnB,UAAIU,UAAU,GAAGhI,gBAAgB,CAACiI,GAAjB,CAAqBX,eAArB,CAAjB;AACAZ,MAAAA,WAAW,GAAGsB,UAAU,CAACE,oBAAX,CAAgCF,UAAU,CAACG,QAA3C,CAAd;AACD,KAHD,MAGO;AACLzB,MAAAA,WAAW,GAAGpG,WAAd;AACD;;AAED,QAAIkG,aAAa,GAAGd,6BAA6B,CAAC5D,SAAD,CAAjD;;AAEA,QAAI0E,aAAJ,EAAmB;AACjB,UAAI4B,kBAAkB,GAAG5B,aAAa,CAAC3D,eAAvC;AACA,UAAIwF,WAAW,GAAGD,kBAAkB,CAACtF,KAAnB,CAAyBC,KAA3C;;AACA,UAAIrC,0BAA0B,CAAC2H,WAAD,EAAc5B,WAAd,CAA9B,EAA0D;AACxD,YAAI6B,UAAU,GAAG9B,aAAa,CAAChD,kBAAd,CAAiC+E,iBAAjC,EAAjB;;AACA,YAAIC,eAAe,GAAG7B,QAAQ,IAAI,YAAY;AAC5CA,UAAAA,QAAQ,CAAC8B,IAAT,CAAcH,UAAd;AACD,SAFD;;AAGA5E,QAAAA,UAAU,CAAC6C,oBAAX,CAAgCC,aAAhC,EAA+CsB,kBAA/C,EAAmEpB,WAAnE,EAAgF5E,SAAhF,EAA2F0G,eAA3F;;AACA,eAAOF,UAAP;AACD,OAPD,MAOO;AACL5E,QAAAA,UAAU,CAACgF,sBAAX,CAAkC5G,SAAlC;AACD;AACF;;AAED,QAAI6G,gBAAgB,GAAG9G,8BAA8B,CAACC,SAAD,CAArD;AACA,QAAI8G,uBAAuB,GAAGD,gBAAgB,IAAI,CAAC,CAACzG,aAAa,CAACyG,gBAAD,CAAjE;AACA,QAAIE,6BAA6B,GAAG9D,oBAAoB,CAACjD,SAAD,CAAxD;;AAEA,QAAIwC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCF,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC7D,OAAO,CAAC,CAACkI,6BAAF,EAAiC,oEAAoE,kEAApE,GAAyI,mEAAzI,GAA+M,mEAAhP,CAA/C,GAAsW,KAAK,CAA3W;;AAEA,UAAI,CAACD,uBAAD,IAA4BD,gBAAgB,CAACG,WAAjD,EAA8D;AAC5D,YAAIC,kBAAkB,GAAGJ,gBAAzB;;AACA,eAAOI,kBAAP,EAA2B;AACzB,cAAI7G,aAAa,CAAC6G,kBAAD,CAAjB,EAAuC;AACrCzE,YAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC7D,OAAO,CAAC,KAAD,EAAQ,mEAAmE,+DAAnE,GAAqI,qDAA7I,CAA/C,GAAqP,KAAK,CAA1P;AACA;AACD;;AACDoI,UAAAA,kBAAkB,GAAGA,kBAAkB,CAACD,WAAxC;AACD;AACF;AACF;;AAED,QAAItG,iBAAiB,GAAGoG,uBAAuB,IAAI,CAACpC,aAA5B,IAA6C,CAACqC,6BAAtE;;AACA,QAAIG,SAAS,GAAGtF,UAAU,CAACoD,uBAAX,CAAmCgB,kBAAnC,EAAuDhG,SAAvD,EAAkEU,iBAAlE,EAAqFkE,WAArF,EAAkGlD,kBAAlG,CAAqH+E,iBAArH,EAAhB;;AACA,QAAI5B,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC8B,IAAT,CAAcO,SAAd;AACD;;AACD,WAAOA,SAAP;AACD,GApJc;;AAsJf;;;;;;;;;;;;;AAaA9C,EAAAA,MAAM,EAAE,UAAUO,WAAV,EAAuB3E,SAAvB,EAAkC6E,QAAlC,EAA4C;AAClD,WAAOjD,UAAU,CAAC8D,2BAAX,CAAuC,IAAvC,EAA6Cf,WAA7C,EAA0D3E,SAA1D,EAAqE6E,QAArE,CAAP;AACD,GArKc;;AAuKf;;;;;;;;AAQA+B,EAAAA,sBAAsB,EAAE,UAAU5G,SAAV,EAAqB;AAC3C;AACA;AACA;AACA;AACAwC,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC7D,OAAO,CAAChB,iBAAiB,CAACoH,OAAlB,IAA6B,IAA9B,EAAoC,wEAAwE,sEAAxE,GAAiJ,0DAAjJ,GAA8M,oDAAlP,EAAwSpH,iBAAiB,CAACoH,OAAlB,IAA6BpH,iBAAiB,CAACoH,OAAlB,CAA0BC,OAA1B,EAA7B,IAAoE,yBAA5W,CAA/C,GAAwb,KAAK,CAA7b;AAEA,KAAC1B,gBAAgB,CAACxD,SAAD,CAAjB,GAA+BwC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChE,SAAS,CAAC,KAAD,EAAQ,qEAAR,CAAjD,GAAkInB,cAAc,CAAC,IAAD,CAA/K,GAAwL,KAAK,CAA7L;;AAEA,QAAIiF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCF,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC7D,OAAO,CAAC,CAACyE,6BAA6B,CAACtD,SAAD,CAA/B,EAA4C,qEAAqE,wCAAjH,CAA/C,GAA4M,KAAK,CAAjN;AACD;;AAED,QAAI0E,aAAa,GAAGd,6BAA6B,CAAC5D,SAAD,CAAjD;;AACA,QAAI,CAAC0E,aAAL,EAAoB;AAClB;AACA;AACA,UAAIqC,6BAA6B,GAAG9D,oBAAoB,CAACjD,SAAD,CAAxD,CAHkB,CAKlB;;AACA,UAAImH,oBAAoB,GAAGnH,SAAS,CAACC,QAAV,KAAuB,CAAvB,IAA4BD,SAAS,CAACyD,YAAV,CAAuBzE,cAAvB,CAAvD;;AAEA,UAAIwD,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCF,QAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC7D,OAAO,CAAC,CAACkI,6BAAF,EAAiC,qEAAqE,4DAAtG,EAAoKI,oBAAoB,GAAG,mEAAmE,mBAAtE,GAA4F,6DAA6D,6CAAjV,CAA/C,GAAib,KAAK,CAAtb;AACD;;AAED,aAAO,KAAP;AACD;;AACD,WAAO9H,sBAAsB,CAACqF,aAAa,CAACY,SAAd,CAAwBrB,MAAzB,CAA7B;AACA1F,IAAAA,YAAY,CAAC6G,cAAb,CAA4B/C,wBAA5B,EAAsDqC,aAAtD,EAAqE1E,SAArE,EAAgF,KAAhF;AACA,WAAO,IAAP;AACD,GA9Mc;AAgNf6B,EAAAA,mBAAmB,EAAE,UAAUN,MAAV,EAAkBvB,SAAlB,EAA6BsC,QAA7B,EAAuC5B,iBAAvC,EAA0DD,WAA1D,EAAuE;AAC1F,KAAC+C,gBAAgB,CAACxD,SAAD,CAAjB,GAA+BwC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChE,SAAS,CAAC,KAAD,EAAQ,6DAAR,CAAjD,GAA0HnB,cAAc,CAAC,IAAD,CAAvK,GAAgL,KAAK,CAArL;;AAEA,QAAImD,iBAAJ,EAAuB;AACrB,UAAI0G,WAAW,GAAGrH,8BAA8B,CAACC,SAAD,CAAhD;;AACA,UAAI5B,mBAAmB,CAACiJ,cAApB,CAAmC9F,MAAnC,EAA2C6F,WAA3C,CAAJ,EAA6D;AAC3DtJ,QAAAA,qBAAqB,CAACwJ,YAAtB,CAAmChF,QAAnC,EAA6C8E,WAA7C;AACA;AACD,OAHD,MAGO;AACL,YAAIG,QAAQ,GAAGH,WAAW,CAAC9G,YAAZ,CAAyBlC,mBAAmB,CAACoJ,kBAA7C,CAAf;AACAJ,QAAAA,WAAW,CAACK,eAAZ,CAA4BrJ,mBAAmB,CAACoJ,kBAAhD;AAEA,YAAIE,UAAU,GAAGN,WAAW,CAACO,SAA7B;AACAP,QAAAA,WAAW,CAACQ,YAAZ,CAAyBxJ,mBAAmB,CAACoJ,kBAA7C,EAAiED,QAAjE;AAEA,YAAIM,gBAAgB,GAAGtG,MAAvB;;AACA,YAAIiB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACA;AACA;AACA;AACA,cAAIoF,UAAJ;;AACA,cAAI9H,SAAS,CAACC,QAAV,KAAuBf,iBAA3B,EAA8C;AAC5C4I,YAAAA,UAAU,GAAGC,QAAQ,CAAC9B,aAAT,CAAuB,KAAvB,CAAb;AACA6B,YAAAA,UAAU,CAACE,SAAX,GAAuBzG,MAAvB;AACAsG,YAAAA,gBAAgB,GAAGC,UAAU,CAACE,SAA9B;AACD,WAJD,MAIO;AACLF,YAAAA,UAAU,GAAGC,QAAQ,CAAC9B,aAAT,CAAuB,QAAvB,CAAb;AACA8B,YAAAA,QAAQ,CAACE,IAAT,CAAcC,WAAd,CAA0BJ,UAA1B;AACAA,YAAAA,UAAU,CAACK,eAAX,CAA2BC,KAA3B,CAAiC7G,MAAjC;AACAsG,YAAAA,gBAAgB,GAAGC,UAAU,CAACK,eAAX,CAA2BjI,eAA3B,CAA2CyH,SAA9D;AACAI,YAAAA,QAAQ,CAACE,IAAT,CAAcjF,WAAd,CAA0B8E,UAA1B;AACD;AACF;;AAED,YAAIO,SAAS,GAAG/I,oBAAoB,CAACuI,gBAAD,EAAmBH,UAAnB,CAApC;AACA,YAAIY,UAAU,GAAG,eAAeT,gBAAgB,CAACU,SAAjB,CAA2BF,SAAS,GAAG,EAAvC,EAA2CA,SAAS,GAAG,EAAvD,CAAf,GAA4E,cAA5E,GAA6FX,UAAU,CAACa,SAAX,CAAqBF,SAAS,GAAG,EAAjC,EAAqCA,SAAS,GAAG,EAAjD,CAA9G;AAEA,UAAErI,SAAS,CAACC,QAAV,KAAuBd,aAAzB,IAA0CqD,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChE,SAAS,CAAC,KAAD,EAAQ,2dAAR,EAAqe4J,UAAre,CAAjD,GAAoiB/K,cAAc,CAAC,IAAD,EAAO+K,UAAP,CAA5lB,GAAinB,KAAK,CAAtnB;;AAEA,YAAI9F,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCF,UAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC7D,OAAO,CAAC,KAAD,EAAQ,4DAA4D,0DAA5D,GAAyH,yDAAzH,GAAqL,+DAArL,GAAuP,8DAAvP,GAAwT,2DAAxT,GAAsX,4DAAtX,GAAqb,gBAA7b,EAA+cyJ,UAA/c,CAA/C,GAA4gB,KAAK,CAAjhB;AACD;AACF;AACF;;AAED,MAAEtI,SAAS,CAACC,QAAV,KAAuBd,aAAzB,IAA0CqD,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChE,SAAS,CAAC,KAAD,EAAQ,oOAAR,CAAjD,GAAiSnB,cAAc,CAAC,IAAD,CAAzV,GAAkW,KAAK,CAAvW;;AAEA,QAAIkD,WAAW,CAACyB,gBAAhB,EAAkC;AAChC,aAAOlC,SAAS,CAAC+C,SAAjB,EAA4B;AAC1B/C,QAAAA,SAAS,CAACgD,WAAV,CAAsBhD,SAAS,CAAC+C,SAAhC;AACD;;AACDtF,MAAAA,WAAW,CAAC+K,gBAAZ,CAA6BxI,SAA7B,EAAwCuB,MAAxC,EAAgD,IAAhD;AACD,KALD,MAKO;AACL5C,MAAAA,YAAY,CAACqB,SAAD,EAAYuB,MAAZ,CAAZ;AACAzD,MAAAA,qBAAqB,CAACwJ,YAAtB,CAAmChF,QAAnC,EAA6CtC,SAAS,CAACG,UAAvD;AACD;;AAED,QAAIqC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAI+F,QAAQ,GAAG3K,qBAAqB,CAACsF,mBAAtB,CAA0CpD,SAAS,CAACG,UAApD,CAAf;;AACA,UAAIsI,QAAQ,CAACC,QAAT,KAAsB,CAA1B,EAA6B;AAC3BvK,QAAAA,oBAAoB,CAACwE,SAArB,CAA+BgG,eAA/B,CAA+C;AAC7CC,UAAAA,UAAU,EAAEH,QAAQ,CAACC,QADwB;AAE7CxH,UAAAA,IAAI,EAAE,OAFuC;AAG7C2H,UAAAA,OAAO,EAAEtH,MAAM,CAACuH,QAAP;AAHoC,SAA/C;AAKD;AACF;AACF;AApRc,CAAjB;AAuRAC,MAAM,CAACC,OAAP,GAAiBpH,UAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMLazyTree = require('./DOMLazyTree');\nvar DOMProperty = require('./DOMProperty');\nvar React = require('react/lib/React');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactDOMContainerInfo = require('./ReactDOMContainerInfo');\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');\nvar ReactFeatureFlags = require('./ReactFeatureFlags');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactInstrumentation = require('./ReactInstrumentation');\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar instantiateReactComponent = require('./instantiateReactComponent');\nvar invariant = require('fbjs/lib/invariant');\nvar setInnerHTML = require('./setInnerHTML');\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\nvar warning = require('fbjs/lib/warning');\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;\n\nvar instancesByReactRootID = {};\n\n/**\n * Finds the index of the first character\n * that's not common between the two given strings.\n *\n * @return {number} the index of the character where the strings diverge\n */\nfunction firstDifferenceIndex(string1, string2) {\n  var minLen = Math.min(string1.length, string2.length);\n  for (var i = 0; i < minLen; i++) {\n    if (string1.charAt(i) !== string2.charAt(i)) {\n      return i;\n    }\n  }\n  return string1.length === string2.length ? -1 : minLen;\n}\n\n/**\n * @param {DOMElement|DOMDocument} container DOM element that may contain\n * a React component\n * @return {?*} DOM element that may have the reactRoot ID, or null.\n */\nfunction getReactRootElementInContainer(container) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType === DOC_NODE_TYPE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\nfunction internalGetID(node) {\n  // If node is something like a window, document, or text node, none of\n  // which support attributes or a .getAttribute method, gracefully return\n  // the empty string, as if the attribute were missing.\n  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';\n}\n\n/**\n * Mounts this component and inserts it into the DOM.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {DOMElement} container DOM element to mount into.\n * @param {ReactReconcileTransaction} transaction\n * @param {boolean} shouldReuseMarkup If true, do not insert markup\n */\nfunction mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {\n  var markerName;\n  if (ReactFeatureFlags.logTopLevelRenders) {\n    var wrappedElement = wrapperInstance._currentElement.props.child;\n    var type = wrappedElement.type;\n    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);\n    console.time(markerName);\n  }\n\n  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */\n  );\n\n  if (markerName) {\n    console.timeEnd(markerName);\n  }\n\n  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;\n  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);\n}\n\n/**\n * Batched mount.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {DOMElement} container DOM element to mount into.\n * @param {boolean} shouldReuseMarkup If true, do not insert markup\n */\nfunction batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(\n  /* useCreateElement */\n  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);\n  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);\n  ReactUpdates.ReactReconcileTransaction.release(transaction);\n}\n\n/**\n * Unmounts a component and removes it from the DOM.\n *\n * @param {ReactComponent} instance React component instance.\n * @param {DOMElement} container DOM element to unmount from.\n * @final\n * @internal\n * @see {ReactMount.unmountComponentAtNode}\n */\nfunction unmountComponentFromNode(instance, container, safely) {\n  if (process.env.NODE_ENV !== 'production') {\n    ReactInstrumentation.debugTool.onBeginFlush();\n  }\n  ReactReconciler.unmountComponent(instance, safely);\n  if (process.env.NODE_ENV !== 'production') {\n    ReactInstrumentation.debugTool.onEndFlush();\n  }\n\n  if (container.nodeType === DOC_NODE_TYPE) {\n    container = container.documentElement;\n  }\n\n  // http://jsperf.com/emptying-a-node\n  while (container.lastChild) {\n    container.removeChild(container.lastChild);\n  }\n}\n\n/**\n * True if the supplied DOM node has a direct React-rendered child that is\n * not a React root element. Useful for warning in `render`,\n * `unmountComponentAtNode`, etc.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM element contains a direct child that was\n * rendered by React but is not a root element.\n * @internal\n */\nfunction hasNonRootReactChild(container) {\n  var rootEl = getReactRootElementInContainer(container);\n  if (rootEl) {\n    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);\n    return !!(inst && inst._hostParent);\n  }\n}\n\n/**\n * True if the supplied DOM node is a React DOM element and\n * it has been rendered by another copy of React.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM has been rendered by another copy of React\n * @internal\n */\nfunction nodeIsRenderedByOtherInstance(container) {\n  var rootEl = getReactRootElementInContainer(container);\n  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));\n}\n\n/**\n * True if the supplied DOM node is a valid node element.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM is a valid DOM node.\n * @internal\n */\nfunction isValidContainer(node) {\n  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));\n}\n\n/**\n * True if the supplied DOM node is a valid React node element.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM is a valid React DOM node.\n * @internal\n */\nfunction isReactNode(node) {\n  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));\n}\n\nfunction getHostRootInstanceInContainer(container) {\n  var rootEl = getReactRootElementInContainer(container);\n  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);\n  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;\n}\n\nfunction getTopLevelWrapperInContainer(container) {\n  var root = getHostRootInstanceInContainer(container);\n  return root ? root._hostContainerInfo._topLevelWrapper : null;\n}\n\n/**\n * Temporary (?) hack so that we can store all top-level pending updates on\n * composites instead of having to worry about different types of components\n * here.\n */\nvar topLevelRootCounter = 1;\nvar TopLevelWrapper = function () {\n  this.rootID = topLevelRootCounter++;\n};\nTopLevelWrapper.prototype.isReactComponent = {};\nif (process.env.NODE_ENV !== 'production') {\n  TopLevelWrapper.displayName = 'TopLevelWrapper';\n}\nTopLevelWrapper.prototype.render = function () {\n  return this.props.child;\n};\nTopLevelWrapper.isReactTopLevelWrapper = true;\n\n/**\n * Mounting is the process of initializing a React component by creating its\n * representative DOM elements and inserting them into a supplied `container`.\n * Any prior content inside `container` is destroyed in the process.\n *\n *   ReactMount.render(\n *     component,\n *     document.getElementById('container')\n *   );\n *\n *   <div id=\"container\">                   <-- Supplied `container`.\n *     <div data-reactid=\".3\">              <-- Rendered reactRoot of React\n *       // ...                                 component.\n *     </div>\n *   </div>\n *\n * Inside of `container`, the first element rendered is the \"reactRoot\".\n */\nvar ReactMount = {\n  TopLevelWrapper: TopLevelWrapper,\n\n  /**\n   * Used by devtools. The keys are not important.\n   */\n  _instancesByReactRootID: instancesByReactRootID,\n\n  /**\n   * This is a hook provided to support rendering React components while\n   * ensuring that the apparent scroll position of its `container` does not\n   * change.\n   *\n   * @param {DOMElement} container The `container` being rendered into.\n   * @param {function} renderCallback This must be called once to do the render.\n   */\n  scrollMonitor: function (container, renderCallback) {\n    renderCallback();\n  },\n\n  /**\n   * Take a component that's already mounted into the DOM and replace its props\n   * @param {ReactComponent} prevComponent component instance already in the DOM\n   * @param {ReactElement} nextElement component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {?function} callback function triggered on completion\n   */\n  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {\n    ReactMount.scrollMonitor(container, function () {\n      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);\n      if (callback) {\n        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);\n      }\n    });\n\n    return prevComponent;\n  },\n\n  /**\n   * Render a new component into the DOM. Hooked by hooks!\n   *\n   * @param {ReactElement} nextElement element to render\n   * @param {DOMElement} container container to render into\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion\n   * @return {ReactComponent} nextComponent\n   */\n  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {\n    // Various parts of our code (such as ReactCompositeComponent's\n    // _renderValidatedComponent) assume that calls to render aren't nested;\n    // verify that that's the case.\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;\n\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;\n\n    ReactBrowserEventEmitter.ensureScrollValueMonitoring();\n    var componentInstance = instantiateReactComponent(nextElement, false);\n\n    // The initial render is synchronous but any updates that happen during\n    // rendering, in componentWillMount or componentDidMount, will be batched\n    // according to the current batching strategy.\n\n    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);\n\n    var wrapperID = componentInstance._instance.rootID;\n    instancesByReactRootID[wrapperID] = componentInstance;\n\n    return componentInstance;\n  },\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.\n   * @param {ReactElement} nextElement Component element to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {\n    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;\n    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);\n  },\n\n  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {\n    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');\n    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? \" Instead of passing a string like 'div', pass \" + \"React.createElement('div') or <div />.\" : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element\n    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? \" Instead of passing a string like 'div', pass \" + \"React.createElement('div') or <div />.\" : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;\n\n    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;\n\n    var nextWrappedElement = React.createElement(TopLevelWrapper, {\n      child: nextElement\n    });\n\n    var nextContext;\n    if (parentComponent) {\n      var parentInst = ReactInstanceMap.get(parentComponent);\n      nextContext = parentInst._processChildContext(parentInst._context);\n    } else {\n      nextContext = emptyObject;\n    }\n\n    var prevComponent = getTopLevelWrapperInContainer(container);\n\n    if (prevComponent) {\n      var prevWrappedElement = prevComponent._currentElement;\n      var prevElement = prevWrappedElement.props.child;\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {\n        var publicInst = prevComponent._renderedComponent.getPublicInstance();\n        var updatedCallback = callback && function () {\n          callback.call(publicInst);\n        };\n        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);\n        return publicInst;\n      } else {\n        ReactMount.unmountComponentAtNode(container);\n      }\n    }\n\n    var reactRootElement = getReactRootElementInContainer(container);\n    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);\n    var containerHasNonRootReactChild = hasNonRootReactChild(container);\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;\n\n      if (!containerHasReactMarkup || reactRootElement.nextSibling) {\n        var rootElementSibling = reactRootElement;\n        while (rootElementSibling) {\n          if (internalGetID(rootElementSibling)) {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;\n            break;\n          }\n          rootElementSibling = rootElementSibling.nextSibling;\n        }\n      }\n    }\n\n    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;\n    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();\n    if (callback) {\n      callback.call(component);\n    }\n    return component;\n  },\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactElement} nextElement Component element to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  render: function (nextElement, container, callback) {\n    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);\n  },\n\n  /**\n   * Unmounts and destroys the React component rendered in the `container`.\n   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode\n   *\n   * @param {DOMElement} container DOM element containing a React component.\n   * @return {boolean} True if a component was found in and unmounted from\n   *                   `container`\n   */\n  unmountComponentAtNode: function (container) {\n    // Various parts of our code (such as ReactCompositeComponent's\n    // _renderValidatedComponent) assume that calls to render aren't nested;\n    // verify that that's the case. (Strictly speaking, unmounting won't cause a\n    // render but we still don't expect to be in a render call here.)\n    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;\n\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), \"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by another copy of React.') : void 0;\n    }\n\n    var prevComponent = getTopLevelWrapperInContainer(container);\n    if (!prevComponent) {\n      // Check if the node being unmounted was rendered by React, but isn't a\n      // root node.\n      var containerHasNonRootReactChild = hasNonRootReactChild(container);\n\n      // Check if the container itself is a React root node.\n      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);\n\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, \"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;\n      }\n\n      return false;\n    }\n    delete instancesByReactRootID[prevComponent._instance.rootID];\n    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);\n    return true;\n  },\n\n  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {\n    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;\n\n    if (shouldReuseMarkup) {\n      var rootElement = getReactRootElementInContainer(container);\n      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {\n        ReactDOMComponentTree.precacheNode(instance, rootElement);\n        return;\n      } else {\n        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n\n        var rootMarkup = rootElement.outerHTML;\n        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);\n\n        var normalizedMarkup = markup;\n        if (process.env.NODE_ENV !== 'production') {\n          // because rootMarkup is retrieved from the DOM, various normalizations\n          // will have occurred which will not be present in `markup`. Here,\n          // insert markup into a <div> or <iframe> depending on the container\n          // type to perform the same normalizations before comparing.\n          var normalizer;\n          if (container.nodeType === ELEMENT_NODE_TYPE) {\n            normalizer = document.createElement('div');\n            normalizer.innerHTML = markup;\n            normalizedMarkup = normalizer.innerHTML;\n          } else {\n            normalizer = document.createElement('iframe');\n            document.body.appendChild(normalizer);\n            normalizer.contentDocument.write(markup);\n            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;\n            document.body.removeChild(normalizer);\n          }\n        }\n\n        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);\n        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);\n\n        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\\n%s', difference) : _prodInvariant('42', difference) : void 0;\n\n        if (process.env.NODE_ENV !== 'production') {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\\n%s', difference) : void 0;\n        }\n      }\n    }\n\n    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\\'re trying to render a component to the document but you didn\\'t use server rendering. We can\\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;\n\n    if (transaction.useCreateElement) {\n      while (container.lastChild) {\n        container.removeChild(container.lastChild);\n      }\n      DOMLazyTree.insertTreeBefore(container, markup, null);\n    } else {\n      setInnerHTML(container, markup);\n      ReactDOMComponentTree.precacheNode(instance, container.firstChild);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);\n      if (hostNode._debugID !== 0) {\n        ReactInstrumentation.debugTool.onHostOperation({\n          instanceID: hostNode._debugID,\n          type: 'mount',\n          payload: markup.toString()\n        });\n      }\n    }\n  }\n};\n\nmodule.exports = ReactMount;"]},"metadata":{},"sourceType":"script"}