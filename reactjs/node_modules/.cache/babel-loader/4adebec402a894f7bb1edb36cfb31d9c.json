{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction polyfills() {\n  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n  if (!Array.prototype.findIndex) {\n    Object.defineProperty(Array.prototype, 'findIndex', {\n      value: function (predicate) {\n        // 1. Let O be ? ToObject(this value).\n        if (this == null) {\n          throw new TypeError('\"this\" is null or not defined');\n        }\n\n        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n        var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n\n        if (typeof predicate !== 'function') {\n          throw new TypeError('predicate must be a function');\n        } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n        var thisArg = arguments[1]; // 5. Let k be 0.\n\n        var k = 0; // 6. Repeat, while k < len\n\n        while (k < len) {\n          // a. Let Pk be ! ToString(k).\n          // b. Let kValue be ? Get(O, Pk).\n          // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n          // d. If testResult is true, return k.\n          var kValue = o[k];\n\n          if (predicate.call(thisArg, kValue, k, o)) {\n            return k;\n          } // e. Increase k by 1.\n\n\n          k++;\n        } // 7. Return -1.\n\n\n        return -1;\n      }\n    });\n  } // Production steps of ECMA-262, Edition 6, 22.1.2.1\n\n\n  if (!Array.from) {\n    Array.from = function () {\n      var toStr = Object.prototype.toString;\n\n      var isCallable = function (fn) {\n        return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n      };\n\n      var toInteger = function (value) {\n        var number = Number(value);\n\n        if (isNaN(number)) {\n          return 0;\n        }\n\n        if (number === 0 || !isFinite(number)) {\n          return number;\n        }\n\n        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n      };\n\n      var maxSafeInteger = Math.pow(2, 53) - 1;\n\n      var toLength = function (value) {\n        var len = toInteger(value);\n        return Math.min(Math.max(len, 0), maxSafeInteger);\n      }; // The length property of the from method is 1.\n\n\n      return function from(arrayLike\n      /*, mapFn, thisArg */\n      ) {\n        // 1. Let C be the this value.\n        var C = this; // 2. Let items be ToObject(arrayLike).\n\n        var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).\n\n        if (arrayLike == null) {\n          throw new TypeError('Array.from requires an array-like object - not null or undefined');\n        } // 4. If mapfn is undefined, then let mapping be false.\n\n\n        var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n        var T;\n\n        if (typeof mapFn !== 'undefined') {\n          // 5. else\n          // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n          if (!isCallable(mapFn)) {\n            throw new TypeError('Array.from: when provided, the second argument must be a function');\n          } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n          if (arguments.length > 2) {\n            T = arguments[2];\n          }\n        } // 10. Let lenValue be Get(items, \"length\").\n        // 11. Let len be ToLength(lenValue).\n\n\n        var len = toLength(items.length); // 13. If IsConstructor(C) is true, then\n        // 13. a. Let A be the result of calling the [[Construct]] internal method\n        // of C with an argument list containing the single item len.\n        // 14. a. Else, Let A be ArrayCreate(len).\n\n        var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.\n\n        var k = 0; // 17. Repeat, while k < len… (also steps a - h)\n\n        var kValue;\n\n        while (k < len) {\n          kValue = items[k];\n\n          if (mapFn) {\n            A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n          } else {\n            A[k] = kValue;\n          }\n\n          k += 1;\n        } // 18. Let putStatus be Put(A, \"length\", len, true).\n\n\n        A.length = len; // 20. Return A.\n\n        return A;\n      };\n    }();\n  }\n}\n\nexports.polyfills = polyfills;","map":{"version":3,"sources":["../src/polyfills.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction polyfills() {\r\n    // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\r\n    if (!Array.prototype.findIndex) {\r\n        Object.defineProperty(Array.prototype, 'findIndex', {\r\n            value: function (predicate) {\r\n                // 1. Let O be ? ToObject(this value).\r\n                if (this == null) {\r\n                    throw new TypeError('\"this\" is null or not defined');\r\n                }\r\n                var o = Object(this);\r\n                // 2. Let len be ? ToLength(? Get(O, \"length\")).\r\n                var len = o.length >>> 0;\r\n                // 3. If IsCallable(predicate) is false, throw a TypeError exception.\r\n                if (typeof predicate !== 'function') {\r\n                    throw new TypeError('predicate must be a function');\r\n                }\r\n                // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n                var thisArg = arguments[1];\r\n                // 5. Let k be 0.\r\n                var k = 0;\r\n                // 6. Repeat, while k < len\r\n                while (k < len) {\r\n                    // a. Let Pk be ! ToString(k).\r\n                    // b. Let kValue be ? Get(O, Pk).\r\n                    // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\r\n                    // d. If testResult is true, return k.\r\n                    var kValue = o[k];\r\n                    if (predicate.call(thisArg, kValue, k, o)) {\r\n                        return k;\r\n                    }\r\n                    // e. Increase k by 1.\r\n                    k++;\r\n                }\r\n                // 7. Return -1.\r\n                return -1;\r\n            }\r\n        });\r\n    }\r\n    // Production steps of ECMA-262, Edition 6, 22.1.2.1\r\n    if (!Array.from) {\r\n        Array.from = (function () {\r\n            var toStr = Object.prototype.toString;\r\n            var isCallable = function (fn) {\r\n                return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\r\n            };\r\n            var toInteger = function (value) {\r\n                var number = Number(value);\r\n                if (isNaN(number)) {\r\n                    return 0;\r\n                }\r\n                if (number === 0 || !isFinite(number)) {\r\n                    return number;\r\n                }\r\n                return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\r\n            };\r\n            var maxSafeInteger = Math.pow(2, 53) - 1;\r\n            var toLength = function (value) {\r\n                var len = toInteger(value);\r\n                return Math.min(Math.max(len, 0), maxSafeInteger);\r\n            };\r\n            // The length property of the from method is 1.\r\n            return function from(arrayLike /*, mapFn, thisArg */) {\r\n                // 1. Let C be the this value.\r\n                var C = this;\r\n                // 2. Let items be ToObject(arrayLike).\r\n                var items = Object(arrayLike);\r\n                // 3. ReturnIfAbrupt(items).\r\n                if (arrayLike == null) {\r\n                    throw new TypeError('Array.from requires an array-like object - not null or undefined');\r\n                }\r\n                // 4. If mapfn is undefined, then let mapping be false.\r\n                var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\r\n                var T;\r\n                if (typeof mapFn !== 'undefined') {\r\n                    // 5. else\r\n                    // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\r\n                    if (!isCallable(mapFn)) {\r\n                        throw new TypeError('Array.from: when provided, the second argument must be a function');\r\n                    }\r\n                    // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n                    if (arguments.length > 2) {\r\n                        T = arguments[2];\r\n                    }\r\n                }\r\n                // 10. Let lenValue be Get(items, \"length\").\r\n                // 11. Let len be ToLength(lenValue).\r\n                var len = toLength(items.length);\r\n                // 13. If IsConstructor(C) is true, then\r\n                // 13. a. Let A be the result of calling the [[Construct]] internal method\r\n                // of C with an argument list containing the single item len.\r\n                // 14. a. Else, Let A be ArrayCreate(len).\r\n                var A = isCallable(C) ? Object(new C(len)) : new Array(len);\r\n                // 16. Let k be 0.\r\n                var k = 0;\r\n                // 17. Repeat, while k < len… (also steps a - h)\r\n                var kValue;\r\n                while (k < len) {\r\n                    kValue = items[k];\r\n                    if (mapFn) {\r\n                        A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\r\n                    }\r\n                    else {\r\n                        A[k] = kValue;\r\n                    }\r\n                    k += 1;\r\n                }\r\n                // 18. Let putStatus be Put(A, \"length\", len, true).\r\n                A.length = len;\r\n                // 20. Return A.\r\n                return A;\r\n            };\r\n        }());\r\n    }\r\n}\r\nexports.polyfills = polyfills;\r\n//# sourceMappingURL=polyfills.js.map"]},"metadata":{},"sourceType":"script"}