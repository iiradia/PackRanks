{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');\n\nvar warning = require('fbjs/lib/warning');\n\nvar VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');\nvar illegalAttributeNameCache = {};\nvar validatedAttributeNameCache = {};\n\nfunction isAttributeNameSafe(attributeName) {\n  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {\n    return true;\n  }\n\n  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {\n    return false;\n  }\n\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n\n  illegalAttributeNameCache[attributeName] = true;\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;\n  return false;\n}\n\nfunction shouldIgnoreValue(propertyInfo, value) {\n  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;\n}\n/**\n * Operations for dealing with DOM properties.\n */\n\n\nvar DOMPropertyOperations = {\n  /**\n   * Creates markup for the ID property.\n   *\n   * @param {string} id Unescaped ID.\n   * @return {string} Markup string.\n   */\n  createMarkupForID: function (id) {\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);\n  },\n  setAttributeForID: function (node, id) {\n    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);\n  },\n  createMarkupForRoot: function () {\n    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=\"\"';\n  },\n  setAttributeForRoot: function (node) {\n    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');\n  },\n\n  /**\n   * Creates markup for a property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {?string} Markup string, or null if the property was invalid.\n   */\n  createMarkupForProperty: function (name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n\n    if (propertyInfo) {\n      if (shouldIgnoreValue(propertyInfo, value)) {\n        return '';\n      }\n\n      var attributeName = propertyInfo.attributeName;\n\n      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n        return attributeName + '=\"\"';\n      }\n\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        return '';\n      }\n\n      return name + '=' + quoteAttributeValueForBrowser(value);\n    }\n\n    return null;\n  },\n\n  /**\n   * Creates markup for a custom property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {string} Markup string, or empty string if the property was invalid.\n   */\n  createMarkupForCustomAttribute: function (name, value) {\n    if (!isAttributeNameSafe(name) || value == null) {\n      return '';\n    }\n\n    return name + '=' + quoteAttributeValueForBrowser(value);\n  },\n\n  /**\n   * Sets the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   * @param {*} value\n   */\n  setValueForProperty: function (node, name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n\n      if (mutationMethod) {\n        mutationMethod(node, value);\n      } else if (shouldIgnoreValue(propertyInfo, value)) {\n        this.deleteValueForProperty(node, name);\n        return;\n      } else if (propertyInfo.mustUseProperty) {\n        // Contrary to `setAttribute`, object properties are properly\n        // `toString`ed by IE8/9.\n        node[propertyInfo.propertyName] = value;\n      } else {\n        var attributeName = propertyInfo.attributeName;\n        var namespace = propertyInfo.attributeNamespace; // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n\n        if (namespace) {\n          node.setAttributeNS(namespace, attributeName, '' + value);\n        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n          node.setAttribute(attributeName, '');\n        } else {\n          node.setAttribute(attributeName, '' + value);\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      DOMPropertyOperations.setValueForAttribute(node, name, value);\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var payload = {};\n      payload[name] = value;\n      ReactInstrumentation.debugTool.onHostOperation({\n        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,\n        type: 'update attribute',\n        payload: payload\n      });\n    }\n  },\n  setValueForAttribute: function (node, name, value) {\n    if (!isAttributeNameSafe(name)) {\n      return;\n    }\n\n    if (value == null) {\n      node.removeAttribute(name);\n    } else {\n      node.setAttribute(name, '' + value);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var payload = {};\n      payload[name] = value;\n      ReactInstrumentation.debugTool.onHostOperation({\n        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,\n        type: 'update attribute',\n        payload: payload\n      });\n    }\n  },\n\n  /**\n   * Deletes an attributes from a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForAttribute: function (node, name) {\n    node.removeAttribute(name);\n\n    if (process.env.NODE_ENV !== 'production') {\n      ReactInstrumentation.debugTool.onHostOperation({\n        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,\n        type: 'remove attribute',\n        payload: name\n      });\n    }\n  },\n\n  /**\n   * Deletes the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForProperty: function (node, name) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n\n      if (mutationMethod) {\n        mutationMethod(node, undefined);\n      } else if (propertyInfo.mustUseProperty) {\n        var propName = propertyInfo.propertyName;\n\n        if (propertyInfo.hasBooleanValue) {\n          node[propName] = false;\n        } else {\n          node[propName] = '';\n        }\n      } else {\n        node.removeAttribute(propertyInfo.attributeName);\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      node.removeAttribute(name);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      ReactInstrumentation.debugTool.onHostOperation({\n        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,\n        type: 'remove attribute',\n        payload: name\n      });\n    }\n  }\n};\nmodule.exports = DOMPropertyOperations;","map":{"version":3,"sources":["/home/iiradia/EasyA/reactjs/node_modules/react-simplert/node_modules/react-dom/lib/DOMPropertyOperations.js"],"names":["DOMProperty","require","ReactDOMComponentTree","ReactInstrumentation","quoteAttributeValueForBrowser","warning","VALID_ATTRIBUTE_NAME_REGEX","RegExp","ATTRIBUTE_NAME_START_CHAR","ATTRIBUTE_NAME_CHAR","illegalAttributeNameCache","validatedAttributeNameCache","isAttributeNameSafe","attributeName","hasOwnProperty","test","process","env","NODE_ENV","shouldIgnoreValue","propertyInfo","value","hasBooleanValue","hasNumericValue","isNaN","hasPositiveNumericValue","hasOverloadedBooleanValue","DOMPropertyOperations","createMarkupForID","id","ID_ATTRIBUTE_NAME","setAttributeForID","node","setAttribute","createMarkupForRoot","ROOT_ATTRIBUTE_NAME","setAttributeForRoot","createMarkupForProperty","name","properties","isCustomAttribute","createMarkupForCustomAttribute","setValueForProperty","mutationMethod","deleteValueForProperty","mustUseProperty","propertyName","namespace","attributeNamespace","setAttributeNS","setValueForAttribute","payload","debugTool","onHostOperation","instanceID","getInstanceFromNode","_debugID","type","removeAttribute","deleteValueForAttribute","undefined","propName","module","exports"],"mappings":"AAAA;;;;;;;AAQA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIC,qBAAqB,GAAGD,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIG,6BAA6B,GAAGH,OAAO,CAAC,iCAAD,CAA3C;;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,kBAAD,CAArB;;AAEA,IAAIK,0BAA0B,GAAG,IAAIC,MAAJ,CAAW,OAAOP,WAAW,CAACQ,yBAAnB,GAA+C,IAA/C,GAAsDR,WAAW,CAACS,mBAAlE,GAAwF,KAAnG,CAAjC;AACA,IAAIC,yBAAyB,GAAG,EAAhC;AACA,IAAIC,2BAA2B,GAAG,EAAlC;;AAEA,SAASC,mBAAT,CAA6BC,aAA7B,EAA4C;AAC1C,MAAIF,2BAA2B,CAACG,cAA5B,CAA2CD,aAA3C,CAAJ,EAA+D;AAC7D,WAAO,IAAP;AACD;;AACD,MAAIH,yBAAyB,CAACI,cAA1B,CAAyCD,aAAzC,CAAJ,EAA6D;AAC3D,WAAO,KAAP;AACD;;AACD,MAAIP,0BAA0B,CAACS,IAA3B,CAAgCF,aAAhC,CAAJ,EAAoD;AAClDF,IAAAA,2BAA2B,CAACE,aAAD,CAA3B,GAA6C,IAA7C;AACA,WAAO,IAAP;AACD;;AACDH,EAAAA,yBAAyB,CAACG,aAAD,CAAzB,GAA2C,IAA3C;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCb,OAAO,CAAC,KAAD,EAAQ,8BAAR,EAAwCQ,aAAxC,CAA/C,GAAwG,KAAK,CAA7G;AACA,SAAO,KAAP;AACD;;AAED,SAASM,iBAAT,CAA2BC,YAA3B,EAAyCC,KAAzC,EAAgD;AAC9C,SAAOA,KAAK,IAAI,IAAT,IAAiBD,YAAY,CAACE,eAAb,IAAgC,CAACD,KAAlD,IAA2DD,YAAY,CAACG,eAAb,IAAgCC,KAAK,CAACH,KAAD,CAAhG,IAA2GD,YAAY,CAACK,uBAAb,IAAwCJ,KAAK,GAAG,CAA3J,IAAgKD,YAAY,CAACM,yBAAb,IAA0CL,KAAK,KAAK,KAA3N;AACD;AAED;;;;;AAGA,IAAIM,qBAAqB,GAAG;AAC1B;;;;;;AAMAC,EAAAA,iBAAiB,EAAE,UAAUC,EAAV,EAAc;AAC/B,WAAO7B,WAAW,CAAC8B,iBAAZ,GAAgC,GAAhC,GAAsC1B,6BAA6B,CAACyB,EAAD,CAA1E;AACD,GATyB;AAW1BE,EAAAA,iBAAiB,EAAE,UAAUC,IAAV,EAAgBH,EAAhB,EAAoB;AACrCG,IAAAA,IAAI,CAACC,YAAL,CAAkBjC,WAAW,CAAC8B,iBAA9B,EAAiDD,EAAjD;AACD,GAbyB;AAe1BK,EAAAA,mBAAmB,EAAE,YAAY;AAC/B,WAAOlC,WAAW,CAACmC,mBAAZ,GAAkC,KAAzC;AACD,GAjByB;AAmB1BC,EAAAA,mBAAmB,EAAE,UAAUJ,IAAV,EAAgB;AACnCA,IAAAA,IAAI,CAACC,YAAL,CAAkBjC,WAAW,CAACmC,mBAA9B,EAAmD,EAAnD;AACD,GArByB;;AAuB1B;;;;;;;AAOAE,EAAAA,uBAAuB,EAAE,UAAUC,IAAV,EAAgBjB,KAAhB,EAAuB;AAC9C,QAAID,YAAY,GAAGpB,WAAW,CAACuC,UAAZ,CAAuBzB,cAAvB,CAAsCwB,IAAtC,IAA8CtC,WAAW,CAACuC,UAAZ,CAAuBD,IAAvB,CAA9C,GAA6E,IAAhG;;AACA,QAAIlB,YAAJ,EAAkB;AAChB,UAAID,iBAAiB,CAACC,YAAD,EAAeC,KAAf,CAArB,EAA4C;AAC1C,eAAO,EAAP;AACD;;AACD,UAAIR,aAAa,GAAGO,YAAY,CAACP,aAAjC;;AACA,UAAIO,YAAY,CAACE,eAAb,IAAgCF,YAAY,CAACM,yBAAb,IAA0CL,KAAK,KAAK,IAAxF,EAA8F;AAC5F,eAAOR,aAAa,GAAG,KAAvB;AACD;;AACD,aAAOA,aAAa,GAAG,GAAhB,GAAsBT,6BAA6B,CAACiB,KAAD,CAA1D;AACD,KATD,MASO,IAAIrB,WAAW,CAACwC,iBAAZ,CAA8BF,IAA9B,CAAJ,EAAyC;AAC9C,UAAIjB,KAAK,IAAI,IAAb,EAAmB;AACjB,eAAO,EAAP;AACD;;AACD,aAAOiB,IAAI,GAAG,GAAP,GAAalC,6BAA6B,CAACiB,KAAD,CAAjD;AACD;;AACD,WAAO,IAAP;AACD,GAhDyB;;AAkD1B;;;;;;;AAOAoB,EAAAA,8BAA8B,EAAE,UAAUH,IAAV,EAAgBjB,KAAhB,EAAuB;AACrD,QAAI,CAACT,mBAAmB,CAAC0B,IAAD,CAApB,IAA8BjB,KAAK,IAAI,IAA3C,EAAiD;AAC/C,aAAO,EAAP;AACD;;AACD,WAAOiB,IAAI,GAAG,GAAP,GAAalC,6BAA6B,CAACiB,KAAD,CAAjD;AACD,GA9DyB;;AAgE1B;;;;;;;AAOAqB,EAAAA,mBAAmB,EAAE,UAAUV,IAAV,EAAgBM,IAAhB,EAAsBjB,KAAtB,EAA6B;AAChD,QAAID,YAAY,GAAGpB,WAAW,CAACuC,UAAZ,CAAuBzB,cAAvB,CAAsCwB,IAAtC,IAA8CtC,WAAW,CAACuC,UAAZ,CAAuBD,IAAvB,CAA9C,GAA6E,IAAhG;;AACA,QAAIlB,YAAJ,EAAkB;AAChB,UAAIuB,cAAc,GAAGvB,YAAY,CAACuB,cAAlC;;AACA,UAAIA,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,CAACX,IAAD,EAAOX,KAAP,CAAd;AACD,OAFD,MAEO,IAAIF,iBAAiB,CAACC,YAAD,EAAeC,KAAf,CAArB,EAA4C;AACjD,aAAKuB,sBAAL,CAA4BZ,IAA5B,EAAkCM,IAAlC;AACA;AACD,OAHM,MAGA,IAAIlB,YAAY,CAACyB,eAAjB,EAAkC;AACvC;AACA;AACAb,QAAAA,IAAI,CAACZ,YAAY,CAAC0B,YAAd,CAAJ,GAAkCzB,KAAlC;AACD,OAJM,MAIA;AACL,YAAIR,aAAa,GAAGO,YAAY,CAACP,aAAjC;AACA,YAAIkC,SAAS,GAAG3B,YAAY,CAAC4B,kBAA7B,CAFK,CAGL;AACA;;AACA,YAAID,SAAJ,EAAe;AACbf,UAAAA,IAAI,CAACiB,cAAL,CAAoBF,SAApB,EAA+BlC,aAA/B,EAA8C,KAAKQ,KAAnD;AACD,SAFD,MAEO,IAAID,YAAY,CAACE,eAAb,IAAgCF,YAAY,CAACM,yBAAb,IAA0CL,KAAK,KAAK,IAAxF,EAA8F;AACnGW,UAAAA,IAAI,CAACC,YAAL,CAAkBpB,aAAlB,EAAiC,EAAjC;AACD,SAFM,MAEA;AACLmB,UAAAA,IAAI,CAACC,YAAL,CAAkBpB,aAAlB,EAAiC,KAAKQ,KAAtC;AACD;AACF;AACF,KAxBD,MAwBO,IAAIrB,WAAW,CAACwC,iBAAZ,CAA8BF,IAA9B,CAAJ,EAAyC;AAC9CX,MAAAA,qBAAqB,CAACuB,oBAAtB,CAA2ClB,IAA3C,EAAiDM,IAAjD,EAAuDjB,KAAvD;AACA;AACD;;AAED,QAAIL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIiC,OAAO,GAAG,EAAd;AACAA,MAAAA,OAAO,CAACb,IAAD,CAAP,GAAgBjB,KAAhB;AACAlB,MAAAA,oBAAoB,CAACiD,SAArB,CAA+BC,eAA/B,CAA+C;AAC7CC,QAAAA,UAAU,EAAEpD,qBAAqB,CAACqD,mBAAtB,CAA0CvB,IAA1C,EAAgDwB,QADf;AAE7CC,QAAAA,IAAI,EAAE,kBAFuC;AAG7CN,QAAAA,OAAO,EAAEA;AAHoC,OAA/C;AAKD;AACF,GA/GyB;AAiH1BD,EAAAA,oBAAoB,EAAE,UAAUlB,IAAV,EAAgBM,IAAhB,EAAsBjB,KAAtB,EAA6B;AACjD,QAAI,CAACT,mBAAmB,CAAC0B,IAAD,CAAxB,EAAgC;AAC9B;AACD;;AACD,QAAIjB,KAAK,IAAI,IAAb,EAAmB;AACjBW,MAAAA,IAAI,CAAC0B,eAAL,CAAqBpB,IAArB;AACD,KAFD,MAEO;AACLN,MAAAA,IAAI,CAACC,YAAL,CAAkBK,IAAlB,EAAwB,KAAKjB,KAA7B;AACD;;AAED,QAAIL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIiC,OAAO,GAAG,EAAd;AACAA,MAAAA,OAAO,CAACb,IAAD,CAAP,GAAgBjB,KAAhB;AACAlB,MAAAA,oBAAoB,CAACiD,SAArB,CAA+BC,eAA/B,CAA+C;AAC7CC,QAAAA,UAAU,EAAEpD,qBAAqB,CAACqD,mBAAtB,CAA0CvB,IAA1C,EAAgDwB,QADf;AAE7CC,QAAAA,IAAI,EAAE,kBAFuC;AAG7CN,QAAAA,OAAO,EAAEA;AAHoC,OAA/C;AAKD;AACF,GApIyB;;AAsI1B;;;;;;AAMAQ,EAAAA,uBAAuB,EAAE,UAAU3B,IAAV,EAAgBM,IAAhB,EAAsB;AAC7CN,IAAAA,IAAI,CAAC0B,eAAL,CAAqBpB,IAArB;;AACA,QAAItB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCf,MAAAA,oBAAoB,CAACiD,SAArB,CAA+BC,eAA/B,CAA+C;AAC7CC,QAAAA,UAAU,EAAEpD,qBAAqB,CAACqD,mBAAtB,CAA0CvB,IAA1C,EAAgDwB,QADf;AAE7CC,QAAAA,IAAI,EAAE,kBAFuC;AAG7CN,QAAAA,OAAO,EAAEb;AAHoC,OAA/C;AAKD;AACF,GArJyB;;AAuJ1B;;;;;;AAMAM,EAAAA,sBAAsB,EAAE,UAAUZ,IAAV,EAAgBM,IAAhB,EAAsB;AAC5C,QAAIlB,YAAY,GAAGpB,WAAW,CAACuC,UAAZ,CAAuBzB,cAAvB,CAAsCwB,IAAtC,IAA8CtC,WAAW,CAACuC,UAAZ,CAAuBD,IAAvB,CAA9C,GAA6E,IAAhG;;AACA,QAAIlB,YAAJ,EAAkB;AAChB,UAAIuB,cAAc,GAAGvB,YAAY,CAACuB,cAAlC;;AACA,UAAIA,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,CAACX,IAAD,EAAO4B,SAAP,CAAd;AACD,OAFD,MAEO,IAAIxC,YAAY,CAACyB,eAAjB,EAAkC;AACvC,YAAIgB,QAAQ,GAAGzC,YAAY,CAAC0B,YAA5B;;AACA,YAAI1B,YAAY,CAACE,eAAjB,EAAkC;AAChCU,UAAAA,IAAI,CAAC6B,QAAD,CAAJ,GAAiB,KAAjB;AACD,SAFD,MAEO;AACL7B,UAAAA,IAAI,CAAC6B,QAAD,CAAJ,GAAiB,EAAjB;AACD;AACF,OAPM,MAOA;AACL7B,QAAAA,IAAI,CAAC0B,eAAL,CAAqBtC,YAAY,CAACP,aAAlC;AACD;AACF,KAdD,MAcO,IAAIb,WAAW,CAACwC,iBAAZ,CAA8BF,IAA9B,CAAJ,EAAyC;AAC9CN,MAAAA,IAAI,CAAC0B,eAAL,CAAqBpB,IAArB;AACD;;AAED,QAAItB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCf,MAAAA,oBAAoB,CAACiD,SAArB,CAA+BC,eAA/B,CAA+C;AAC7CC,QAAAA,UAAU,EAAEpD,qBAAqB,CAACqD,mBAAtB,CAA0CvB,IAA1C,EAAgDwB,QADf;AAE7CC,QAAAA,IAAI,EAAE,kBAFuC;AAG7CN,QAAAA,OAAO,EAAEb;AAHoC,OAA/C;AAKD;AACF;AAxLyB,CAA5B;AA2LAwB,MAAM,CAACC,OAAP,GAAiBpC,qBAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');\nvar warning = require('fbjs/lib/warning');\n\nvar VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');\nvar illegalAttributeNameCache = {};\nvar validatedAttributeNameCache = {};\n\nfunction isAttributeNameSafe(attributeName) {\n  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {\n    return true;\n  }\n  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {\n    return false;\n  }\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n  illegalAttributeNameCache[attributeName] = true;\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;\n  return false;\n}\n\nfunction shouldIgnoreValue(propertyInfo, value) {\n  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;\n}\n\n/**\n * Operations for dealing with DOM properties.\n */\nvar DOMPropertyOperations = {\n  /**\n   * Creates markup for the ID property.\n   *\n   * @param {string} id Unescaped ID.\n   * @return {string} Markup string.\n   */\n  createMarkupForID: function (id) {\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);\n  },\n\n  setAttributeForID: function (node, id) {\n    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);\n  },\n\n  createMarkupForRoot: function () {\n    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=\"\"';\n  },\n\n  setAttributeForRoot: function (node) {\n    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');\n  },\n\n  /**\n   * Creates markup for a property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {?string} Markup string, or null if the property was invalid.\n   */\n  createMarkupForProperty: function (name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      if (shouldIgnoreValue(propertyInfo, value)) {\n        return '';\n      }\n      var attributeName = propertyInfo.attributeName;\n      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n        return attributeName + '=\"\"';\n      }\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        return '';\n      }\n      return name + '=' + quoteAttributeValueForBrowser(value);\n    }\n    return null;\n  },\n\n  /**\n   * Creates markup for a custom property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {string} Markup string, or empty string if the property was invalid.\n   */\n  createMarkupForCustomAttribute: function (name, value) {\n    if (!isAttributeNameSafe(name) || value == null) {\n      return '';\n    }\n    return name + '=' + quoteAttributeValueForBrowser(value);\n  },\n\n  /**\n   * Sets the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   * @param {*} value\n   */\n  setValueForProperty: function (node, name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n      if (mutationMethod) {\n        mutationMethod(node, value);\n      } else if (shouldIgnoreValue(propertyInfo, value)) {\n        this.deleteValueForProperty(node, name);\n        return;\n      } else if (propertyInfo.mustUseProperty) {\n        // Contrary to `setAttribute`, object properties are properly\n        // `toString`ed by IE8/9.\n        node[propertyInfo.propertyName] = value;\n      } else {\n        var attributeName = propertyInfo.attributeName;\n        var namespace = propertyInfo.attributeNamespace;\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n        if (namespace) {\n          node.setAttributeNS(namespace, attributeName, '' + value);\n        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n          node.setAttribute(attributeName, '');\n        } else {\n          node.setAttribute(attributeName, '' + value);\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      DOMPropertyOperations.setValueForAttribute(node, name, value);\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var payload = {};\n      payload[name] = value;\n      ReactInstrumentation.debugTool.onHostOperation({\n        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,\n        type: 'update attribute',\n        payload: payload\n      });\n    }\n  },\n\n  setValueForAttribute: function (node, name, value) {\n    if (!isAttributeNameSafe(name)) {\n      return;\n    }\n    if (value == null) {\n      node.removeAttribute(name);\n    } else {\n      node.setAttribute(name, '' + value);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var payload = {};\n      payload[name] = value;\n      ReactInstrumentation.debugTool.onHostOperation({\n        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,\n        type: 'update attribute',\n        payload: payload\n      });\n    }\n  },\n\n  /**\n   * Deletes an attributes from a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForAttribute: function (node, name) {\n    node.removeAttribute(name);\n    if (process.env.NODE_ENV !== 'production') {\n      ReactInstrumentation.debugTool.onHostOperation({\n        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,\n        type: 'remove attribute',\n        payload: name\n      });\n    }\n  },\n\n  /**\n   * Deletes the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForProperty: function (node, name) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n      if (mutationMethod) {\n        mutationMethod(node, undefined);\n      } else if (propertyInfo.mustUseProperty) {\n        var propName = propertyInfo.propertyName;\n        if (propertyInfo.hasBooleanValue) {\n          node[propName] = false;\n        } else {\n          node[propName] = '';\n        }\n      } else {\n        node.removeAttribute(propertyInfo.attributeName);\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      node.removeAttribute(name);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      ReactInstrumentation.debugTool.onHostOperation({\n        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,\n        type: 'remove attribute',\n        payload: name\n      });\n    }\n  }\n};\n\nmodule.exports = DOMPropertyOperations;"]},"metadata":{},"sourceType":"script"}