{"version":3,"file":"react-sticky-box.umd.min.js","sources":["../node_modules/@babel/runtime/helpers/inheritsLoose.js","../node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js","../src/index.js"],"sourcesContent":["function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nmodule.exports = _inheritsLoose;","/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\r\n/* eslint-disable require-jsdoc, valid-jsdoc */\r\nvar MapShim = (function () {\r\n    if (typeof Map !== 'undefined') {\r\n        return Map;\r\n    }\r\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\r\n    function getIndex(arr, key) {\r\n        var result = -1;\r\n        arr.some(function (entry, index) {\r\n            if (entry[0] === key) {\r\n                result = index;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return result;\r\n    }\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            this.__entries__ = [];\r\n        }\r\n        Object.defineProperty(class_1.prototype, \"size\", {\r\n            /**\r\n             * @returns {boolean}\r\n             */\r\n            get: function () {\r\n                return this.__entries__.length;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\r\n        class_1.prototype.get = function (key) {\r\n            var index = getIndex(this.__entries__, key);\r\n            var entry = this.__entries__[index];\r\n            return entry && entry[1];\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.set = function (key, value) {\r\n            var index = getIndex(this.__entries__, key);\r\n            if (~index) {\r\n                this.__entries__[index][1] = value;\r\n            }\r\n            else {\r\n                this.__entries__.push([key, value]);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.delete = function (key) {\r\n            var entries = this.__entries__;\r\n            var index = getIndex(entries, key);\r\n            if (~index) {\r\n                entries.splice(index, 1);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.has = function (key) {\r\n            return !!~getIndex(this.__entries__, key);\r\n        };\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.clear = function () {\r\n            this.__entries__.splice(0);\r\n        };\r\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.forEach = function (callback, ctx) {\r\n            if (ctx === void 0) { ctx = null; }\r\n            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\r\n                var entry = _a[_i];\r\n                callback.call(ctx, entry[1], entry[0]);\r\n            }\r\n        };\r\n        return class_1;\r\n    }());\r\n})();\n\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\r\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\r\nvar global$1 = (function () {\r\n    if (typeof global !== 'undefined' && global.Math === Math) {\r\n        return global;\r\n    }\r\n    if (typeof self !== 'undefined' && self.Math === Math) {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined' && window.Math === Math) {\r\n        return window;\r\n    }\r\n    // eslint-disable-next-line no-new-func\r\n    return Function('return this')();\r\n})();\n\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\r\nvar requestAnimationFrame$1 = (function () {\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        // It's required to use a bounded function because IE sometimes throws\r\n        // an \"Invalid calling object\" error if rAF is invoked without the global\r\n        // object on the left hand side.\r\n        return requestAnimationFrame.bind(global$1);\r\n    }\r\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n})();\n\n// Defines minimum timeout before adding a trailing call.\r\nvar trailingTimeout = 2;\r\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\r\nfunction throttle (callback, delay) {\r\n    var leadingCall = false, trailingCall = false, lastCallTime = 0;\r\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function resolvePending() {\r\n        if (leadingCall) {\r\n            leadingCall = false;\r\n            callback();\r\n        }\r\n        if (trailingCall) {\r\n            proxy();\r\n        }\r\n    }\r\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function timeoutCallback() {\r\n        requestAnimationFrame$1(resolvePending);\r\n    }\r\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function proxy() {\r\n        var timeStamp = Date.now();\r\n        if (leadingCall) {\r\n            // Reject immediately following calls.\r\n            if (timeStamp - lastCallTime < trailingTimeout) {\r\n                return;\r\n            }\r\n            // Schedule new call to be in invoked when the pending one is resolved.\r\n            // This is important for \"transitions\" which never actually start\r\n            // immediately so there is a chance that we might miss one if change\r\n            // happens amids the pending invocation.\r\n            trailingCall = true;\r\n        }\r\n        else {\r\n            leadingCall = true;\r\n            trailingCall = false;\r\n            setTimeout(timeoutCallback, delay);\r\n        }\r\n        lastCallTime = timeStamp;\r\n    }\r\n    return proxy;\r\n}\n\n// Minimum delay before invoking the update of observers.\r\nvar REFRESH_DELAY = 20;\r\n// A list of substrings of CSS properties used to find transition events that\r\n// might affect dimensions of observed elements.\r\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n// Check if MutationObserver is available.\r\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\r\nvar ResizeObserverController = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserverController.\r\n     *\r\n     * @private\r\n     */\r\n    function ResizeObserverController() {\r\n        /**\r\n         * Indicates whether DOM listeners have been added.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.connected_ = false;\r\n        /**\r\n         * Tells that controller has subscribed for Mutation Events.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.mutationEventsAdded_ = false;\r\n        /**\r\n         * Keeps reference to the instance of MutationObserver.\r\n         *\r\n         * @private {MutationObserver}\r\n         */\r\n        this.mutationsObserver_ = null;\r\n        /**\r\n         * A list of connected observers.\r\n         *\r\n         * @private {Array<ResizeObserverSPI>}\r\n         */\r\n        this.observers_ = [];\r\n        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n    }\r\n    /**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.addObserver = function (observer) {\r\n        if (!~this.observers_.indexOf(observer)) {\r\n            this.observers_.push(observer);\r\n        }\r\n        // Add listeners if they haven't been added yet.\r\n        if (!this.connected_) {\r\n            this.connect_();\r\n        }\r\n    };\r\n    /**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.removeObserver = function (observer) {\r\n        var observers = this.observers_;\r\n        var index = observers.indexOf(observer);\r\n        // Remove observer if it's present in registry.\r\n        if (~index) {\r\n            observers.splice(index, 1);\r\n        }\r\n        // Remove listeners if controller has no connected observers.\r\n        if (!observers.length && this.connected_) {\r\n            this.disconnect_();\r\n        }\r\n    };\r\n    /**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.refresh = function () {\r\n        var changesDetected = this.updateObservers_();\r\n        // Continue running updates if changes have been detected as there might\r\n        // be future ones caused by CSS transitions.\r\n        if (changesDetected) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */\r\n    ResizeObserverController.prototype.updateObservers_ = function () {\r\n        // Collect observers that have active observations.\r\n        var activeObservers = this.observers_.filter(function (observer) {\r\n            return observer.gatherActive(), observer.hasActive();\r\n        });\r\n        // Deliver notifications in a separate cycle in order to avoid any\r\n        // collisions between observers, e.g. when multiple instances of\r\n        // ResizeObserver are tracking the same element and the callback of one\r\n        // of them changes content dimensions of the observed target. Sometimes\r\n        // this may result in notifications being blocked for the rest of observers.\r\n        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n        return activeObservers.length > 0;\r\n    };\r\n    /**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.connect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already added.\r\n        if (!isBrowser || this.connected_) {\r\n            return;\r\n        }\r\n        // Subscription to the \"Transitionend\" event is used as a workaround for\r\n        // delayed transitions. This way it's possible to capture at least the\r\n        // final state of an element.\r\n        document.addEventListener('transitionend', this.onTransitionEnd_);\r\n        window.addEventListener('resize', this.refresh);\r\n        if (mutationObserverSupported) {\r\n            this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n            this.mutationsObserver_.observe(document, {\r\n                attributes: true,\r\n                childList: true,\r\n                characterData: true,\r\n                subtree: true\r\n            });\r\n        }\r\n        else {\r\n            document.addEventListener('DOMSubtreeModified', this.refresh);\r\n            this.mutationEventsAdded_ = true;\r\n        }\r\n        this.connected_ = true;\r\n    };\r\n    /**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.disconnect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already removed.\r\n        if (!isBrowser || !this.connected_) {\r\n            return;\r\n        }\r\n        document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n        window.removeEventListener('resize', this.refresh);\r\n        if (this.mutationsObserver_) {\r\n            this.mutationsObserver_.disconnect();\r\n        }\r\n        if (this.mutationEventsAdded_) {\r\n            document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n        }\r\n        this.mutationsObserver_ = null;\r\n        this.mutationEventsAdded_ = false;\r\n        this.connected_ = false;\r\n    };\r\n    /**\r\n     * \"Transitionend\" event handler.\r\n     *\r\n     * @private\r\n     * @param {TransitionEvent} event\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\r\n        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\r\n        // Detect whether transition may affect dimensions of an element.\r\n        var isReflowProperty = transitionKeys.some(function (key) {\r\n            return !!~propertyName.indexOf(key);\r\n        });\r\n        if (isReflowProperty) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Returns instance of the ResizeObserverController.\r\n     *\r\n     * @returns {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.getInstance = function () {\r\n        if (!this.instance_) {\r\n            this.instance_ = new ResizeObserverController();\r\n        }\r\n        return this.instance_;\r\n    };\r\n    /**\r\n     * Holds reference to the controller's instance.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.instance_ = null;\r\n    return ResizeObserverController;\r\n}());\n\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\r\nvar defineConfigurable = (function (target, props) {\r\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        Object.defineProperty(target, key, {\r\n            value: props[key],\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: true\r\n        });\r\n    }\r\n    return target;\r\n});\n\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\r\nvar getWindowOf = (function (target) {\r\n    // Assume that the element is an instance of Node, which means that it\r\n    // has the \"ownerDocument\" property from which we can retrieve a\r\n    // corresponding global object.\r\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n    // Return the local global object if it's not possible extract one from\r\n    // provided element.\r\n    return ownerGlobal || global$1;\r\n});\n\n// Placeholder of an empty content rectangle.\r\nvar emptyRect = createRectInit(0, 0, 0, 0);\r\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\r\nfunction toFloat(value) {\r\n    return parseFloat(value) || 0;\r\n}\r\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\r\nfunction getBordersSize(styles) {\r\n    var positions = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        positions[_i - 1] = arguments[_i];\r\n    }\r\n    return positions.reduce(function (size, position) {\r\n        var value = styles['border-' + position + '-width'];\r\n        return size + toFloat(value);\r\n    }, 0);\r\n}\r\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\r\nfunction getPaddings(styles) {\r\n    var positions = ['top', 'right', 'bottom', 'left'];\r\n    var paddings = {};\r\n    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n        var position = positions_1[_i];\r\n        var value = styles['padding-' + position];\r\n        paddings[position] = toFloat(value);\r\n    }\r\n    return paddings;\r\n}\r\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getSVGContentRect(target) {\r\n    var bbox = target.getBBox();\r\n    return createRectInit(0, 0, bbox.width, bbox.height);\r\n}\r\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getHTMLElementContentRect(target) {\r\n    // Client width & height properties can't be\r\n    // used exclusively as they provide rounded values.\r\n    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\r\n    // By this condition we can catch all non-replaced inline, hidden and\r\n    // detached elements. Though elements with width & height properties less\r\n    // than 0.5 will be discarded as well.\r\n    //\r\n    // Without it we would need to implement separate methods for each of\r\n    // those cases and it's not possible to perform a precise and performance\r\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n    // gives wrong results for elements with width & height less than 0.5.\r\n    if (!clientWidth && !clientHeight) {\r\n        return emptyRect;\r\n    }\r\n    var styles = getWindowOf(target).getComputedStyle(target);\r\n    var paddings = getPaddings(styles);\r\n    var horizPad = paddings.left + paddings.right;\r\n    var vertPad = paddings.top + paddings.bottom;\r\n    // Computed styles of width & height are being used because they are the\r\n    // only dimensions available to JS that contain non-rounded values. It could\r\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n    var width = toFloat(styles.width), height = toFloat(styles.height);\r\n    // Width & height include paddings and borders when the 'border-box' box\r\n    // model is applied (except for IE).\r\n    if (styles.boxSizing === 'border-box') {\r\n        // Following conditions are required to handle Internet Explorer which\r\n        // doesn't include paddings and borders to computed CSS dimensions.\r\n        //\r\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n        // properties then it's either IE, and thus we don't need to subtract\r\n        // anything, or an element merely doesn't have paddings/borders styles.\r\n        if (Math.round(width + horizPad) !== clientWidth) {\r\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n        }\r\n        if (Math.round(height + vertPad) !== clientHeight) {\r\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n        }\r\n    }\r\n    // Following steps can't be applied to the document's root element as its\r\n    // client[Width/Height] properties represent viewport area of the window.\r\n    // Besides, it's as well not necessary as the <html> itself neither has\r\n    // rendered scroll bars nor it can be clipped.\r\n    if (!isDocumentElement(target)) {\r\n        // In some browsers (only in Firefox, actually) CSS width & height\r\n        // include scroll bars size which can be removed at this step as scroll\r\n        // bars are the only difference between rounded dimensions + paddings\r\n        // and \"client\" properties, though that is not always true in Chrome.\r\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n        // Chrome has a rather weird rounding of \"client\" properties.\r\n        // E.g. for an element with content width of 314.2px it sometimes gives\r\n        // the client width of 315px and for the width of 314.7px it may give\r\n        // 314px. And it doesn't happen all the time. So just ignore this delta\r\n        // as a non-relevant.\r\n        if (Math.abs(vertScrollbar) !== 1) {\r\n            width -= vertScrollbar;\r\n        }\r\n        if (Math.abs(horizScrollbar) !== 1) {\r\n            height -= horizScrollbar;\r\n        }\r\n    }\r\n    return createRectInit(paddings.left, paddings.top, width, height);\r\n}\r\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nvar isSVGGraphicsElement = (function () {\r\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n    // interface.\r\n    if (typeof SVGGraphicsElement !== 'undefined') {\r\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n    }\r\n    // If it's so, then check that element is at least an instance of the\r\n    // SVGElement and that it has the \"getBBox\" method.\r\n    // eslint-disable-next-line no-extra-parens\r\n    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\r\n        typeof target.getBBox === 'function'); };\r\n})();\r\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nfunction isDocumentElement(target) {\r\n    return target === getWindowOf(target).document.documentElement;\r\n}\r\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getContentRect(target) {\r\n    if (!isBrowser) {\r\n        return emptyRect;\r\n    }\r\n    if (isSVGGraphicsElement(target)) {\r\n        return getSVGContentRect(target);\r\n    }\r\n    return getHTMLElementContentRect(target);\r\n}\r\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\r\nfunction createReadOnlyRect(_a) {\r\n    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n    var rect = Object.create(Constr.prototype);\r\n    // Rectangle's properties are not writable and non-enumerable.\r\n    defineConfigurable(rect, {\r\n        x: x, y: y, width: width, height: height,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: height + y,\r\n        left: x\r\n    });\r\n    return rect;\r\n}\r\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction createRectInit(x, y, width, height) {\r\n    return { x: x, y: y, width: width, height: height };\r\n}\n\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\r\nvar ResizeObservation = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */\r\n    function ResizeObservation(target) {\r\n        /**\r\n         * Broadcasted width of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastWidth = 0;\r\n        /**\r\n         * Broadcasted height of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastHeight = 0;\r\n        /**\r\n         * Reference to the last observed content rectangle.\r\n         *\r\n         * @private {DOMRectInit}\r\n         */\r\n        this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n        this.target = target;\r\n    }\r\n    /**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObservation.prototype.isActive = function () {\r\n        var rect = getContentRect(this.target);\r\n        this.contentRect_ = rect;\r\n        return (rect.width !== this.broadcastWidth ||\r\n            rect.height !== this.broadcastHeight);\r\n    };\r\n    /**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */\r\n    ResizeObservation.prototype.broadcastRect = function () {\r\n        var rect = this.contentRect_;\r\n        this.broadcastWidth = rect.width;\r\n        this.broadcastHeight = rect.height;\r\n        return rect;\r\n    };\r\n    return ResizeObservation;\r\n}());\n\nvar ResizeObserverEntry = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */\r\n    function ResizeObserverEntry(target, rectInit) {\r\n        var contentRect = createReadOnlyRect(rectInit);\r\n        // According to the specification following properties are not writable\r\n        // and are also not enumerable in the native implementation.\r\n        //\r\n        // Property accessors are not being used as they'd require to define a\r\n        // private WeakMap storage which may cause memory leaks in browsers that\r\n        // don't support this type of collections.\r\n        defineConfigurable(this, { target: target, contentRect: contentRect });\r\n    }\r\n    return ResizeObserverEntry;\r\n}());\n\nvar ResizeObserverSPI = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */\r\n    function ResizeObserverSPI(callback, controller, callbackCtx) {\r\n        /**\r\n         * Collection of resize observations that have detected changes in dimensions\r\n         * of elements.\r\n         *\r\n         * @private {Array<ResizeObservation>}\r\n         */\r\n        this.activeObservations_ = [];\r\n        /**\r\n         * Registry of the ResizeObservation instances.\r\n         *\r\n         * @private {Map<Element, ResizeObservation>}\r\n         */\r\n        this.observations_ = new MapShim();\r\n        if (typeof callback !== 'function') {\r\n            throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n        }\r\n        this.callback_ = callback;\r\n        this.controller_ = controller;\r\n        this.callbackCtx_ = callbackCtx;\r\n    }\r\n    /**\r\n     * Starts observing provided element.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.observe = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is already being observed.\r\n        if (observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.set(target, new ResizeObservation(target));\r\n        this.controller_.addObserver(this);\r\n        // Force the update of observations.\r\n        this.controller_.refresh();\r\n    };\r\n    /**\r\n     * Stops observing provided element.\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.unobserve = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is not being observed.\r\n        if (!observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.delete(target);\r\n        if (!observations.size) {\r\n            this.controller_.removeObserver(this);\r\n        }\r\n    };\r\n    /**\r\n     * Stops observing all elements.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.disconnect = function () {\r\n        this.clearActive();\r\n        this.observations_.clear();\r\n        this.controller_.removeObserver(this);\r\n    };\r\n    /**\r\n     * Collects observation instances the associated element of which has changed\r\n     * it's content rectangle.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.gatherActive = function () {\r\n        var _this = this;\r\n        this.clearActive();\r\n        this.observations_.forEach(function (observation) {\r\n            if (observation.isActive()) {\r\n                _this.activeObservations_.push(observation);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.broadcastActive = function () {\r\n        // Do nothing if observer doesn't have active observations.\r\n        if (!this.hasActive()) {\r\n            return;\r\n        }\r\n        var ctx = this.callbackCtx_;\r\n        // Create ResizeObserverEntry instance for every active observation.\r\n        var entries = this.activeObservations_.map(function (observation) {\r\n            return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n        });\r\n        this.callback_.call(ctx, entries, ctx);\r\n        this.clearActive();\r\n    };\r\n    /**\r\n     * Clears the collection of active observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.clearActive = function () {\r\n        this.activeObservations_.splice(0);\r\n    };\r\n    /**\r\n     * Tells whether observer has active observations.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObserverSPI.prototype.hasActive = function () {\r\n        return this.activeObservations_.length > 0;\r\n    };\r\n    return ResizeObserverSPI;\r\n}());\n\n// Registry of internal observers. If WeakMap is not available use current shim\r\n// for the Map collection as it has all required methods and because WeakMap\r\n// can't be fully polyfilled anyway.\r\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\r\nvar ResizeObserver = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n     *      dimensions of the observed elements change.\r\n     */\r\n    function ResizeObserver(callback) {\r\n        if (!(this instanceof ResizeObserver)) {\r\n            throw new TypeError('Cannot call a class as a function.');\r\n        }\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        var controller = ResizeObserverController.getInstance();\r\n        var observer = new ResizeObserverSPI(callback, controller, this);\r\n        observers.set(this, observer);\r\n    }\r\n    return ResizeObserver;\r\n}());\r\n// Expose public methods of ResizeObserver.\r\n[\r\n    'observe',\r\n    'unobserve',\r\n    'disconnect'\r\n].forEach(function (method) {\r\n    ResizeObserver.prototype[method] = function () {\r\n        var _a;\r\n        return (_a = observers.get(this))[method].apply(_a, arguments);\r\n    };\r\n});\n\nvar index = (function () {\r\n    // Export existing implementation if available.\r\n    if (typeof global$1.ResizeObserver !== 'undefined') {\r\n        return global$1.ResizeObserver;\r\n    }\r\n    return ResizeObserver;\r\n})();\n\nexport default index;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nconst getScrollParent = node => {\n  let parent = node;\n  while ((parent = parent.parentElement)) {\n    const overflowYVal = getComputedStyle(parent, null).getPropertyValue(\"overflow-y\");\n    if (parent === document.body) return window;\n    if (overflowYVal === \"auto\" || overflowYVal === \"scroll\") return parent;\n  }\n  return window;\n};\n\nconst offsetTill = (node, target) => {\n  let current = node;\n  let offset = 0;\n  // If target is not an offsetParent itself, subtract its offsetTop and set correct target\n  if (target.firstChild && target.firstChild.offsetParent !== target) {\n    offset += node.offsetTop - target.offsetTop;\n    target = node.offsetParent;\n    offset += -node.offsetTop;\n  }\n  do {\n    offset += current.offsetTop;\n    current = current.offsetParent;\n  } while (current && current !== target);\n  return offset;\n};\n\nlet stickyProp = null;\nif (typeof CSS !== \"undefined\" && CSS.supports) {\n  if (CSS.supports(\"position\", \"sticky\")) stickyProp = \"sticky\";\n  else if (CSS.supports(\"position\", \"-webkit-sticky\")) stickyProp = \"-webkit-sticky\";\n}\n\n// Inspired by https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\nlet passiveArg = false;\ntry {\n  var opts = Object.defineProperty({}, \"passive\", {\n    // eslint-disable-next-line getter-return\n    get() {\n      passiveArg = {passive: true};\n    },\n  });\n  window.addEventListener(\"testPassive\", null, opts);\n  window.removeEventListener(\"testPassive\", null, opts);\n} catch (e) {}\n\nexport default class StickyBox extends React.Component {\n  constructor(props) {\n    super(props);\n    if (props.offset && process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        `react-sticky-box's \"offset\" prop is deprecated. Please use \"offsetTop\" instead. It'll be removed in v0.8.`\n      );\n    }\n    this.unsubscribes = [];\n  }\n\n  addListener = (element, event, handler, passive) => {\n    element.addEventListener(event, handler, passive);\n    this.unsubscribes.push(() => element.removeEventListener(event, handler));\n  };\n\n  addResizeObserver = (node, handler) => {\n    const ro = new ResizeObserver(handler);\n    ro.observe(node);\n    this.unsubscribes.push(() => ro.disconnect());\n  };\n\n  registerContainerRef = n => {\n    if (!stickyProp) return;\n    this.node = n;\n    if (n) {\n      this.scrollPane = getScrollParent(this.node);\n      this.latestScrollY = this.scrollPane === window ? window.scrollY : this.scrollPane.scrollTop;\n\n      this.addListener(this.scrollPane, \"scroll\", this.handleScroll, passiveArg);\n      this.addListener(this.scrollPane, \"mousewheel\", this.handleScroll, passiveArg);\n      if (this.scrollPane === window) {\n        this.addListener(window, \"resize\", this.handleWindowResize);\n        this.handleWindowResize();\n      } else {\n        this.addResizeObserver(this.scrollPane, this.handleScrollPaneResize);\n        this.handleScrollPaneResize();\n      }\n      this.addResizeObserver(this.node.parentNode, this.handleParentNodeResize);\n      this.handleParentNodeResize();\n\n      this.addResizeObserver(this.node, this.handleNodeResize);\n      this.handleNodeResize({initial: true});\n\n      this.initial();\n    } else {\n      this.unsubscribes.forEach(fn => fn());\n      this.unsubscribes = [];\n      this.scrollPane = null;\n    }\n  };\n\n  changeMode(newMode) {\n    const {onChangeMode, offsetTop, offsetBottom, bottom} = this.props;\n    if (this.mode !== newMode) onChangeMode(this.mode, newMode);\n    this.mode = newMode;\n    if (newMode === \"relative\") {\n      this.node.style.position = \"relative\";\n      if (bottom) {\n        const nextBottom = Math.max(0, this.parentHeight - this.nodeHeight - this.offset);\n        this.node.style.bottom = `${nextBottom}px`;\n      } else {\n        this.node.style.top = `${this.offset}px`;\n      }\n    } else {\n      this.node.style.position = stickyProp;\n      if (newMode === \"stickyBottom\") {\n        if (bottom) {\n          this.node.style.bottom = `${offsetBottom}px`;\n        } else {\n          this.node.style.top = `${this.viewPortHeight - this.nodeHeight - offsetBottom}px`;\n        }\n      } else {\n        // stickyTop\n        if (bottom) {\n          this.node.style.bottom = `${this.viewPortHeight - this.nodeHeight - offsetBottom}px`;\n        } else {\n          this.node.style.top = `${offsetTop}px`;\n        }\n      }\n    }\n    this.offset = this.getCurrentOffset();\n  }\n\n  initial() {\n    const {bottom} = this.props;\n    if (bottom) {\n      if (this.mode !== \"stickyBottom\") this.changeMode(\"stickyBottom\");\n    } else {\n      if (this.mode !== \"stickyTop\") this.changeMode(\"stickyTop\");\n    }\n  }\n\n  getCurrentOffset = () => {\n    if (this.mode === \"relative\") return this.offset;\n    const {offsetTop, offsetBottom} = this.props;\n    if (this.mode === \"stickyTop\") {\n      return Math.max(0, this.scrollPaneOffset + this.latestScrollY - this.naturalTop + offsetTop);\n    }\n    if (this.mode === \"stickyBottom\") {\n      return Math.max(\n        0,\n        this.scrollPaneOffset +\n          this.latestScrollY +\n          this.viewPortHeight -\n          (this.naturalTop + this.nodeHeight + offsetBottom)\n      );\n    }\n  };\n\n  changeToStickyBottomIfBoxTooLow(scrollY) {\n    const {offsetBottom} = this.props;\n    if (\n      scrollY + this.scrollPaneOffset + this.viewPortHeight >=\n      this.naturalTop + this.nodeHeight + this.offset + offsetBottom\n    ) {\n      this.changeMode(\"stickyBottom\");\n    }\n  }\n\n  handleWindowResize = () => {\n    this.viewPortHeight = window.innerHeight;\n    this.scrollPaneOffset = 0;\n    this.handleScroll();\n  };\n\n  handleScrollPaneResize = () => {\n    this.viewPortHeight = this.scrollPane.offsetHeight;\n    if (process.env.NODE_ENV !== \"production\" && this.viewPortHeight === 0) {\n      console.warn(\n        `react-sticky-box's scroll pane has a height of 0. This seems odd. Please check this node:`,\n        this.scrollPane\n      );\n    }\n    // Only applicable if scrollPane is an offsetParent\n    if (this.scrollPane.firstChild.offsetParent === this.scrollPane) {\n      this.scrollPaneOffset = this.scrollPane.getBoundingClientRect().top;\n    } else {\n      this.scrollPaneOffset = 0;\n    }\n    this.handleScroll();\n  };\n\n  handleParentNodeResize = () => {\n    const parentNode = this.node.parentNode;\n    const computedParentStyle = getComputedStyle(parentNode, null);\n    const parentPaddingTop = parseInt(computedParentStyle.getPropertyValue(\"padding-top\"), 10);\n    const parentPaddingBottom = parseInt(\n      computedParentStyle.getPropertyValue(\"padding-bottom\"),\n      10\n    );\n    const verticalParentPadding = parentPaddingTop + parentPaddingBottom;\n    this.naturalTop =\n      offsetTill(parentNode, this.scrollPane) + parentPaddingTop + this.scrollPaneOffset;\n    const oldParentHeight = this.parentHeight;\n    this.parentHeight = parentNode.getBoundingClientRect().height - verticalParentPadding;\n\n    if (this.mode === \"relative\") {\n      if (this.props.bottom) {\n        this.changeMode(\"relative\");\n      } else {\n        // If parent height decreased...\n        if (oldParentHeight > this.parentHeight) {\n          this.changeToStickyBottomIfBoxTooLow(this.latestScrollY);\n        }\n      }\n    }\n    if (oldParentHeight !== this.parentHeight && this.mode === \"relative\") {\n      this.latestScrollY = Number.POSITIVE_INFINITY;\n      this.handleScroll();\n    }\n  };\n\n  handleNodeResize = ({initial} = {}) => {\n    const prevHeight = this.nodeHeight;\n    this.nodeHeight = this.node.getBoundingClientRect().height;\n    if (!initial && prevHeight !== this.nodeHeight) {\n      const {offsetTop, offsetBottom, bottom} = this.props;\n      if (this.nodeHeight + offsetTop + offsetBottom <= this.viewPortHeight) {\n        // Just make it sticky if node smaller than viewport\n        this.mode = undefined;\n        this.initial();\n        return;\n      } else {\n        const diff = prevHeight - this.nodeHeight;\n        const lowestPossible = this.parentHeight - this.nodeHeight;\n        const nextOffset = Math.min(lowestPossible, this.getCurrentOffset() + (bottom ? diff : 0));\n        this.offset = Math.max(0, nextOffset);\n        if (!bottom || this.mode !== \"stickyBottom\") this.changeMode(\"relative\");\n      }\n    }\n  };\n\n  handleScroll = () => {\n    const {offsetTop, offsetBottom} = this.props;\n    const scrollY = this.scrollPane === window ? window.scrollY : this.scrollPane.scrollTop;\n    if (scrollY === this.latestScrollY) return;\n    if (this.nodeHeight + offsetTop + offsetBottom <= this.viewPortHeight) {\n      // Just make it sticky if node smaller than viewport\n      this.initial();\n      this.latestScrollY = scrollY;\n      return;\n    }\n    const scrollDelta = scrollY - this.latestScrollY;\n    this.offset = this.getCurrentOffset();\n    if (scrollDelta > 0) {\n      // scroll down\n      if (this.mode === \"stickyTop\") {\n        if (scrollY + this.scrollPaneOffset + offsetTop > this.naturalTop) {\n          if (\n            scrollY + this.scrollPaneOffset + this.viewPortHeight <=\n            this.naturalTop + this.nodeHeight + this.offset + offsetBottom\n          ) {\n            this.changeMode(\"relative\");\n          } else {\n            this.changeMode(\"stickyBottom\");\n          }\n        }\n      } else if (this.mode === \"relative\") {\n        this.changeToStickyBottomIfBoxTooLow(scrollY);\n      }\n    } else {\n      // scroll up\n      if (this.mode === \"stickyBottom\") {\n        if (\n          this.scrollPaneOffset + scrollY + this.viewPortHeight <\n          this.naturalTop + this.parentHeight + offsetBottom\n        ) {\n          if (this.scrollPaneOffset + scrollY + offsetTop >= this.naturalTop + this.offset) {\n            this.changeMode(\"relative\");\n          } else {\n            this.changeMode(\"stickyTop\");\n          }\n        }\n      } else if (this.mode === \"relative\") {\n        if (this.scrollPaneOffset + scrollY + offsetTop < this.naturalTop + this.offset) {\n          this.changeMode(\"stickyTop\");\n        }\n      }\n    }\n\n    this.latestScrollY = scrollY;\n  };\n\n  render() {\n    const {children, className, style} = this.props;\n    return (\n      <div className={className} style={style} ref={this.registerContainerRef}>\n        {children}\n      </div>\n    );\n  }\n}\n\nStickyBox.defaultProps = {\n  onChangeMode: () => {},\n  offsetTop: 0,\n  offsetBottom: 0,\n};\n\nStickyBox.propTypes = {\n  onChangeMode: PropTypes.func,\n  offsetTop: PropTypes.number,\n  offsetBottom: PropTypes.number,\n  bottom: PropTypes.bool,\n};\n"],"names":["subClass","superClass","prototype","Object","create","constructor","__proto__","MapShim","Map","getIndex","arr","key","result","some","entry","index","class_1","this","__entries__","defineProperty","get","length","enumerable","configurable","set","value","push","delete","entries","splice","has","clear","forEach","callback","ctx","_i","_a","call","isBrowser","window","document","global$1","global","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","trailingTimeout","REFRESH_DELAY","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","throttle","addObserver","observer","indexOf","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","observe","attributes","childList","characterData","subtree","removeEventListener","disconnect","_b","propertyName","getInstance","instance_","defineConfigurable","target","props","keys","writable","getWindowOf","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","arguments","reduce","size","position","getHTMLElementContentRect","clientWidth","clientHeight","getComputedStyle","paddings","positions_1","getPaddings","horizPad","left","right","vertPad","top","bottom","width","height","boxSizing","round","documentElement","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","getContentRect","bbox","getSVGContentRect","x","y","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","rect","broadcastRect","ResizeObserverEntry","rectInit","Constr","contentRect","DOMRectReadOnly","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","_this","observation","map","WeakMap","ResizeObserver","method","apply","getScrollParent","node","parent","parentElement","overflowYVal","getPropertyValue","body","offsetTill","current","offset","firstChild","offsetParent","offsetTop","stickyProp","CSS","supports","passiveArg","opts","passive","e","StickyBox","_React$Component","addListener","element","event","handler","unsubscribes","addResizeObserver","ro","registerContainerRef","n","scrollPane","latestScrollY","scrollY","scrollTop","handleScroll","handleWindowResize","handleScrollPaneResize","parentNode","handleParentNodeResize","handleNodeResize","initial","fn","getCurrentOffset","mode","offsetBottom","max","scrollPaneOffset","naturalTop","viewPortHeight","nodeHeight","innerHeight","offsetHeight","getBoundingClientRect","computedParentStyle","parentPaddingTop","parseInt","parentPaddingBottom","oldParentHeight","parentHeight","changeMode","changeToStickyBottomIfBoxTooLow","Number","POSITIVE_INFINITY","prevHeight","undefined","diff","lowestPossible","nextOffset","min","scrollDelta","newMode","onChangeMode","style","nextBottom","render","children","className","React","ref","Component","defaultProps"],"mappings":"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"}