{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMProperty = require('./DOMProperty');\n\nvar ReactDOMComponentFlags = require('./ReactDOMComponentFlags');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar Flags = ReactDOMComponentFlags;\nvar internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);\n/**\n * Check if a given node should be cached.\n */\n\nfunction shouldPrecacheNode(node, nodeID) {\n  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';\n}\n/**\n * Drill down (through composites and empty components) until we get a host or\n * host text component.\n *\n * This is pretty polymorphic but unavoidable with the current structure we have\n * for `_renderedChildren`.\n */\n\n\nfunction getRenderedHostOrTextFromComponent(component) {\n  var rendered;\n\n  while (rendered = component._renderedComponent) {\n    component = rendered;\n  }\n\n  return component;\n}\n/**\n * Populate `_hostNode` on the rendered host/text component with the given\n * DOM node. The passed `inst` can be a composite.\n */\n\n\nfunction precacheNode(inst, node) {\n  var hostInst = getRenderedHostOrTextFromComponent(inst);\n  hostInst._hostNode = node;\n  node[internalInstanceKey] = hostInst;\n}\n\nfunction uncacheNode(inst) {\n  var node = inst._hostNode;\n\n  if (node) {\n    delete node[internalInstanceKey];\n    inst._hostNode = null;\n  }\n}\n/**\n * Populate `_hostNode` on each child of `inst`, assuming that the children\n * match up with the DOM (element) children of `node`.\n *\n * We cache entire levels at once to avoid an n^2 problem where we access the\n * children of a node sequentially and have to walk from the start to our target\n * node every time.\n *\n * Since we update `_renderedChildren` and the actual DOM at (slightly)\n * different times, we could race here and see a newer `_renderedChildren` than\n * the DOM nodes we see. To avoid this, ReactMultiChild calls\n * `prepareToManageChildren` before we change `_renderedChildren`, at which\n * time the container's child nodes are always cached (until it unmounts).\n */\n\n\nfunction precacheChildNodes(inst, node) {\n  if (inst._flags & Flags.hasCachedChildNodes) {\n    return;\n  }\n\n  var children = inst._renderedChildren;\n  var childNode = node.firstChild;\n\n  outer: for (var name in children) {\n    if (!children.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var childInst = children[name];\n\n    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;\n\n    if (childID === 0) {\n      // We're currently unmounting this child in ReactMultiChild; skip it.\n      continue;\n    } // We assume the child nodes are in the same order as the child instances.\n\n\n    for (; childNode !== null; childNode = childNode.nextSibling) {\n      if (shouldPrecacheNode(childNode, childID)) {\n        precacheNode(childInst, childNode);\n        continue outer;\n      }\n    } // We reached the end of the DOM children without finding an ID match.\n\n\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;\n  }\n\n  inst._flags |= Flags.hasCachedChildNodes;\n}\n/**\n * Given a DOM node, return the closest ReactDOMComponent or\n * ReactDOMTextComponent instance ancestor.\n */\n\n\nfunction getClosestInstanceFromNode(node) {\n  if (node[internalInstanceKey]) {\n    return node[internalInstanceKey];\n  } // Walk up the tree until we find an ancestor whose instance we have cached.\n\n\n  var parents = [];\n\n  while (!node[internalInstanceKey]) {\n    parents.push(node);\n\n    if (node.parentNode) {\n      node = node.parentNode;\n    } else {\n      // Top of the tree. This node must not be part of a React tree (or is\n      // unmounted, potentially).\n      return null;\n    }\n  }\n\n  var closest;\n  var inst;\n\n  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {\n    closest = inst;\n\n    if (parents.length) {\n      precacheChildNodes(inst, node);\n    }\n  }\n\n  return closest;\n}\n/**\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\n * instance, or null if the node was not rendered by this React.\n */\n\n\nfunction getInstanceFromNode(node) {\n  var inst = getClosestInstanceFromNode(node);\n\n  if (inst != null && inst._hostNode === node) {\n    return inst;\n  } else {\n    return null;\n  }\n}\n/**\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\n * DOM node.\n */\n\n\nfunction getNodeFromInstance(inst) {\n  // Without this first invariant, passing a non-DOM-component triggers the next\n  // invariant for a missing parent, which is super confusing.\n  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n\n  if (inst._hostNode) {\n    return inst._hostNode;\n  } // Walk up the tree until we find an ancestor whose DOM node we have cached.\n\n\n  var parents = [];\n\n  while (!inst._hostNode) {\n    parents.push(inst);\n    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;\n    inst = inst._hostParent;\n  } // Now parents contains each ancestor that does *not* have a cached native\n  // node, and `inst` is the deepest ancestor that does.\n\n\n  for (; parents.length; inst = parents.pop()) {\n    precacheChildNodes(inst, inst._hostNode);\n  }\n\n  return inst._hostNode;\n}\n\nvar ReactDOMComponentTree = {\n  getClosestInstanceFromNode: getClosestInstanceFromNode,\n  getInstanceFromNode: getInstanceFromNode,\n  getNodeFromInstance: getNodeFromInstance,\n  precacheChildNodes: precacheChildNodes,\n  precacheNode: precacheNode,\n  uncacheNode: uncacheNode\n};\nmodule.exports = ReactDOMComponentTree;","map":{"version":3,"sources":["/home/iiradia/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/ReactDOMComponentTree.js"],"names":["_prodInvariant","require","DOMProperty","ReactDOMComponentFlags","invariant","ATTR_NAME","ID_ATTRIBUTE_NAME","Flags","internalInstanceKey","Math","random","toString","slice","shouldPrecacheNode","node","nodeID","nodeType","getAttribute","String","nodeValue","getRenderedHostOrTextFromComponent","component","rendered","_renderedComponent","precacheNode","inst","hostInst","_hostNode","uncacheNode","precacheChildNodes","_flags","hasCachedChildNodes","children","_renderedChildren","childNode","firstChild","outer","name","hasOwnProperty","childInst","childID","_domID","nextSibling","process","env","NODE_ENV","getClosestInstanceFromNode","parents","push","parentNode","closest","pop","length","getInstanceFromNode","getNodeFromInstance","undefined","_hostParent","ReactDOMComponentTree","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactDOMComponentFlags = require('./ReactDOMComponentFlags');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar Flags = ReactDOMComponentFlags;\n\nvar internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);\n\n/**\n * Check if a given node should be cached.\n */\nfunction shouldPrecacheNode(node, nodeID) {\n  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';\n}\n\n/**\n * Drill down (through composites and empty components) until we get a host or\n * host text component.\n *\n * This is pretty polymorphic but unavoidable with the current structure we have\n * for `_renderedChildren`.\n */\nfunction getRenderedHostOrTextFromComponent(component) {\n  var rendered;\n  while (rendered = component._renderedComponent) {\n    component = rendered;\n  }\n  return component;\n}\n\n/**\n * Populate `_hostNode` on the rendered host/text component with the given\n * DOM node. The passed `inst` can be a composite.\n */\nfunction precacheNode(inst, node) {\n  var hostInst = getRenderedHostOrTextFromComponent(inst);\n  hostInst._hostNode = node;\n  node[internalInstanceKey] = hostInst;\n}\n\nfunction uncacheNode(inst) {\n  var node = inst._hostNode;\n  if (node) {\n    delete node[internalInstanceKey];\n    inst._hostNode = null;\n  }\n}\n\n/**\n * Populate `_hostNode` on each child of `inst`, assuming that the children\n * match up with the DOM (element) children of `node`.\n *\n * We cache entire levels at once to avoid an n^2 problem where we access the\n * children of a node sequentially and have to walk from the start to our target\n * node every time.\n *\n * Since we update `_renderedChildren` and the actual DOM at (slightly)\n * different times, we could race here and see a newer `_renderedChildren` than\n * the DOM nodes we see. To avoid this, ReactMultiChild calls\n * `prepareToManageChildren` before we change `_renderedChildren`, at which\n * time the container's child nodes are always cached (until it unmounts).\n */\nfunction precacheChildNodes(inst, node) {\n  if (inst._flags & Flags.hasCachedChildNodes) {\n    return;\n  }\n  var children = inst._renderedChildren;\n  var childNode = node.firstChild;\n  outer: for (var name in children) {\n    if (!children.hasOwnProperty(name)) {\n      continue;\n    }\n    var childInst = children[name];\n    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;\n    if (childID === 0) {\n      // We're currently unmounting this child in ReactMultiChild; skip it.\n      continue;\n    }\n    // We assume the child nodes are in the same order as the child instances.\n    for (; childNode !== null; childNode = childNode.nextSibling) {\n      if (shouldPrecacheNode(childNode, childID)) {\n        precacheNode(childInst, childNode);\n        continue outer;\n      }\n    }\n    // We reached the end of the DOM children without finding an ID match.\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;\n  }\n  inst._flags |= Flags.hasCachedChildNodes;\n}\n\n/**\n * Given a DOM node, return the closest ReactDOMComponent or\n * ReactDOMTextComponent instance ancestor.\n */\nfunction getClosestInstanceFromNode(node) {\n  if (node[internalInstanceKey]) {\n    return node[internalInstanceKey];\n  }\n\n  // Walk up the tree until we find an ancestor whose instance we have cached.\n  var parents = [];\n  while (!node[internalInstanceKey]) {\n    parents.push(node);\n    if (node.parentNode) {\n      node = node.parentNode;\n    } else {\n      // Top of the tree. This node must not be part of a React tree (or is\n      // unmounted, potentially).\n      return null;\n    }\n  }\n\n  var closest;\n  var inst;\n  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {\n    closest = inst;\n    if (parents.length) {\n      precacheChildNodes(inst, node);\n    }\n  }\n\n  return closest;\n}\n\n/**\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\n * instance, or null if the node was not rendered by this React.\n */\nfunction getInstanceFromNode(node) {\n  var inst = getClosestInstanceFromNode(node);\n  if (inst != null && inst._hostNode === node) {\n    return inst;\n  } else {\n    return null;\n  }\n}\n\n/**\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\n * DOM node.\n */\nfunction getNodeFromInstance(inst) {\n  // Without this first invariant, passing a non-DOM-component triggers the next\n  // invariant for a missing parent, which is super confusing.\n  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n\n  if (inst._hostNode) {\n    return inst._hostNode;\n  }\n\n  // Walk up the tree until we find an ancestor whose DOM node we have cached.\n  var parents = [];\n  while (!inst._hostNode) {\n    parents.push(inst);\n    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;\n    inst = inst._hostParent;\n  }\n\n  // Now parents contains each ancestor that does *not* have a cached native\n  // node, and `inst` is the deepest ancestor that does.\n  for (; parents.length; inst = parents.pop()) {\n    precacheChildNodes(inst, inst._hostNode);\n  }\n\n  return inst._hostNode;\n}\n\nvar ReactDOMComponentTree = {\n  getClosestInstanceFromNode: getClosestInstanceFromNode,\n  getInstanceFromNode: getInstanceFromNode,\n  getNodeFromInstance: getNodeFromInstance,\n  precacheChildNodes: precacheChildNodes,\n  precacheNode: precacheNode,\n  uncacheNode: uncacheNode\n};\n\nmodule.exports = ReactDOMComponentTree;"]},"metadata":{},"sourceType":"script"}