{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar EventPluginRegistry = require('./EventPluginRegistry');\n\nvar EventPluginUtils = require('./EventPluginUtils');\n\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar accumulateInto = require('./accumulateInto');\n\nvar forEachAccumulated = require('./forEachAccumulated');\n\nvar invariant = require('fbjs/lib/invariant');\n/**\n * Internal store for event listeners\n */\n\n\nvar listenerBank = {};\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\n\nvar eventQueue = null;\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\n\nvar executeDispatchesAndRelease = function (event, simulated) {\n  if (event) {\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\n\nvar executeDispatchesAndReleaseSimulated = function (e) {\n  return executeDispatchesAndRelease(e, true);\n};\n\nvar executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e, false);\n};\n\nvar getDictionaryKey = function (inst) {\n  // Prevents V8 performance issue:\n  // https://github.com/facebook/react/pull/7232\n  return '.' + inst._rootNodeID;\n};\n\nfunction isInteractive(tag) {\n  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';\n}\n\nfunction shouldPreventMouseEvent(name, type, props) {\n  switch (name) {\n    case 'onClick':\n    case 'onClickCapture':\n    case 'onDoubleClick':\n    case 'onDoubleClickCapture':\n    case 'onMouseDown':\n    case 'onMouseDownCapture':\n    case 'onMouseMove':\n    case 'onMouseMoveCapture':\n    case 'onMouseUp':\n    case 'onMouseUpCapture':\n      return !!(props.disabled && isInteractive(type));\n\n    default:\n      return false;\n  }\n}\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\n\n\nvar EventPluginHub = {\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n  },\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.\n   *\n   * @param {object} inst The instance, which is the source of events.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {function} listener The callback to store.\n   */\n  putListener: function (inst, registrationName, listener) {\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;\n    var key = getDictionaryKey(inst);\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[key] = listener;\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n\n    if (PluginModule && PluginModule.didPutListener) {\n      PluginModule.didPutListener(inst, registrationName, listener);\n    }\n  },\n\n  /**\n   * @param {object} inst The instance, which is the source of events.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (inst, registrationName) {\n    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not\n    // live here; needs to be moved to a better place soon\n    var bankForRegistrationName = listenerBank[registrationName];\n\n    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {\n      return null;\n    }\n\n    var key = getDictionaryKey(inst);\n    return bankForRegistrationName && bankForRegistrationName[key];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {object} inst The instance, which is the source of events.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (inst, registrationName) {\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n\n    if (PluginModule && PluginModule.willDeleteListener) {\n      PluginModule.willDeleteListener(inst, registrationName);\n    }\n\n    var bankForRegistrationName = listenerBank[registrationName]; // TODO: This should never be null -- when is it?\n\n    if (bankForRegistrationName) {\n      var key = getDictionaryKey(inst);\n      delete bankForRegistrationName[key];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {object} inst The instance, which is the source of events.\n   */\n  deleteAllListeners: function (inst) {\n    var key = getDictionaryKey(inst);\n\n    for (var registrationName in listenerBank) {\n      if (!listenerBank.hasOwnProperty(registrationName)) {\n        continue;\n      }\n\n      if (!listenerBank[registrationName][key]) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n\n      if (PluginModule && PluginModule.willDeleteListener) {\n        PluginModule.willDeleteListener(inst, registrationName);\n      }\n\n      delete listenerBank[registrationName][key];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n\n    for (var i = 0; i < plugins.length; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function (simulated) {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n\n    if (simulated) {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);\n    } else {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n    }\n\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0; // This would be a good time to rethrow if any of the event handlers threw.\n\n    ReactErrorUtils.rethrowCaughtError();\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n};\nmodule.exports = EventPluginHub;","map":{"version":3,"sources":["/mnt/c/Users/Harry-PC/Documents/ProgrammingProjects/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/EventPluginHub.js"],"names":["_prodInvariant","require","EventPluginRegistry","EventPluginUtils","ReactErrorUtils","accumulateInto","forEachAccumulated","invariant","listenerBank","eventQueue","executeDispatchesAndRelease","event","simulated","executeDispatchesInOrder","isPersistent","constructor","release","executeDispatchesAndReleaseSimulated","e","executeDispatchesAndReleaseTopLevel","getDictionaryKey","inst","_rootNodeID","isInteractive","tag","shouldPreventMouseEvent","name","type","props","disabled","EventPluginHub","injection","injectEventPluginOrder","injectEventPluginsByName","putListener","registrationName","listener","process","env","NODE_ENV","key","bankForRegistrationName","PluginModule","registrationNameModules","didPutListener","getListener","_currentElement","deleteListener","willDeleteListener","deleteAllListeners","hasOwnProperty","extractEvents","topLevelType","targetInst","nativeEvent","nativeEventTarget","events","plugins","i","length","possiblePlugin","extractedEvents","enqueueEvents","processEventQueue","processingEventQueue","rethrowCaughtError","__purge","__getListenerBank","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar EventPluginUtils = require('./EventPluginUtils');\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\nvar executeDispatchesAndRelease = function (event, simulated) {\n  if (event) {\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nvar executeDispatchesAndReleaseSimulated = function (e) {\n  return executeDispatchesAndRelease(e, true);\n};\nvar executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e, false);\n};\n\nvar getDictionaryKey = function (inst) {\n  // Prevents V8 performance issue:\n  // https://github.com/facebook/react/pull/7232\n  return '.' + inst._rootNodeID;\n};\n\nfunction isInteractive(tag) {\n  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';\n}\n\nfunction shouldPreventMouseEvent(name, type, props) {\n  switch (name) {\n    case 'onClick':\n    case 'onClickCapture':\n    case 'onDoubleClick':\n    case 'onDoubleClickCapture':\n    case 'onMouseDown':\n    case 'onMouseDownCapture':\n    case 'onMouseMove':\n    case 'onMouseMoveCapture':\n    case 'onMouseUp':\n    case 'onMouseUpCapture':\n      return !!(props.disabled && isInteractive(type));\n    default:\n      return false;\n  }\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n  },\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.\n   *\n   * @param {object} inst The instance, which is the source of events.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {function} listener The callback to store.\n   */\n  putListener: function (inst, registrationName, listener) {\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;\n\n    var key = getDictionaryKey(inst);\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[key] = listener;\n\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.didPutListener) {\n      PluginModule.didPutListener(inst, registrationName, listener);\n    }\n  },\n\n  /**\n   * @param {object} inst The instance, which is the source of events.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (inst, registrationName) {\n    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not\n    // live here; needs to be moved to a better place soon\n    var bankForRegistrationName = listenerBank[registrationName];\n    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {\n      return null;\n    }\n    var key = getDictionaryKey(inst);\n    return bankForRegistrationName && bankForRegistrationName[key];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {object} inst The instance, which is the source of events.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (inst, registrationName) {\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.willDeleteListener) {\n      PluginModule.willDeleteListener(inst, registrationName);\n    }\n\n    var bankForRegistrationName = listenerBank[registrationName];\n    // TODO: This should never be null -- when is it?\n    if (bankForRegistrationName) {\n      var key = getDictionaryKey(inst);\n      delete bankForRegistrationName[key];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {object} inst The instance, which is the source of events.\n   */\n  deleteAllListeners: function (inst) {\n    var key = getDictionaryKey(inst);\n    for (var registrationName in listenerBank) {\n      if (!listenerBank.hasOwnProperty(registrationName)) {\n        continue;\n      }\n\n      if (!listenerBank[registrationName][key]) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n      if (PluginModule && PluginModule.willDeleteListener) {\n        PluginModule.willDeleteListener(inst, registrationName);\n      }\n\n      delete listenerBank[registrationName][key];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0; i < plugins.length; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function (simulated) {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    if (simulated) {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);\n    } else {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n    }\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;\n    // This would be a good time to rethrow if any of the event handlers threw.\n    ReactErrorUtils.rethrowCaughtError();\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n};\n\nmodule.exports = EventPluginHub;"]},"metadata":{},"sourceType":"script"}