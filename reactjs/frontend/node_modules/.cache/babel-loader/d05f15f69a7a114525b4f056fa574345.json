{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar DOMLazyTree = require('./DOMLazyTree');\n\nvar Danger = require('./Danger');\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');\n\nvar setInnerHTML = require('./setInnerHTML');\n\nvar setTextContent = require('./setTextContent');\n\nfunction getNodeAfter(parentNode, node) {\n  // Special case for text components, which return [open, close] comments\n  // from getHostNode.\n  if (Array.isArray(node)) {\n    node = node[1];\n  }\n\n  return node ? node.nextSibling : parentNode.firstChild;\n}\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\n\n\nvar insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {\n  // We rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so\n  // we are careful to use `null`.)\n  parentNode.insertBefore(childNode, referenceNode);\n});\n\nfunction insertLazyTreeChildAt(parentNode, childTree, referenceNode) {\n  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);\n}\n\nfunction moveChild(parentNode, childNode, referenceNode) {\n  if (Array.isArray(childNode)) {\n    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);\n  } else {\n    insertChildAt(parentNode, childNode, referenceNode);\n  }\n}\n\nfunction removeChild(parentNode, childNode) {\n  if (Array.isArray(childNode)) {\n    var closingComment = childNode[1];\n    childNode = childNode[0];\n    removeDelimitedText(parentNode, childNode, closingComment);\n    parentNode.removeChild(closingComment);\n  }\n\n  parentNode.removeChild(childNode);\n}\n\nfunction moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {\n  var node = openingComment;\n\n  while (true) {\n    var nextNode = node.nextSibling;\n    insertChildAt(parentNode, node, referenceNode);\n\n    if (node === closingComment) {\n      break;\n    }\n\n    node = nextNode;\n  }\n}\n\nfunction removeDelimitedText(parentNode, startNode, closingComment) {\n  while (true) {\n    var node = startNode.nextSibling;\n\n    if (node === closingComment) {\n      // The closing comment is removed by ReactMultiChild.\n      break;\n    } else {\n      parentNode.removeChild(node);\n    }\n  }\n}\n\nfunction replaceDelimitedText(openingComment, closingComment, stringText) {\n  var parentNode = openingComment.parentNode;\n  var nodeAfterComment = openingComment.nextSibling;\n\n  if (nodeAfterComment === closingComment) {\n    // There are no text nodes between the opening and closing comments; insert\n    // a new one if stringText isn't empty.\n    if (stringText) {\n      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);\n    }\n  } else {\n    if (stringText) {\n      // Set the text content of the first node after the opening comment, and\n      // remove all following nodes up until the closing comment.\n      setTextContent(nodeAfterComment, stringText);\n      removeDelimitedText(parentNode, nodeAfterComment, closingComment);\n    } else {\n      removeDelimitedText(parentNode, openingComment, closingComment);\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    ReactInstrumentation.debugTool.onHostOperation({\n      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,\n      type: 'replace text',\n      payload: stringText\n    });\n  }\n}\n\nvar dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;\n\nif (process.env.NODE_ENV !== 'production') {\n  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {\n    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);\n\n    if (prevInstance._debugID !== 0) {\n      ReactInstrumentation.debugTool.onHostOperation({\n        instanceID: prevInstance._debugID,\n        type: 'replace with',\n        payload: markup.toString()\n      });\n    } else {\n      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);\n\n      if (nextInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onHostOperation({\n          instanceID: nextInstance._debugID,\n          type: 'mount',\n          payload: markup.toString()\n        });\n      }\n    }\n  };\n}\n/**\n * Operations for updating with DOM children.\n */\n\n\nvar DOMChildrenOperations = {\n  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,\n  replaceDelimitedText: replaceDelimitedText,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @internal\n   */\n  processUpdates: function (parentNode, updates) {\n    if (process.env.NODE_ENV !== 'production') {\n      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;\n    }\n\n    for (var k = 0; k < updates.length; k++) {\n      var update = updates[k];\n\n      switch (update.type) {\n        case 'INSERT_MARKUP':\n          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));\n\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'insert child',\n              payload: {\n                toIndex: update.toIndex,\n                content: update.content.toString()\n              }\n            });\n          }\n\n          break;\n\n        case 'MOVE_EXISTING':\n          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));\n\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'move child',\n              payload: {\n                fromIndex: update.fromIndex,\n                toIndex: update.toIndex\n              }\n            });\n          }\n\n          break;\n\n        case 'SET_MARKUP':\n          setInnerHTML(parentNode, update.content);\n\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'replace children',\n              payload: update.content.toString()\n            });\n          }\n\n          break;\n\n        case 'TEXT_CONTENT':\n          setTextContent(parentNode, update.content);\n\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'replace text',\n              payload: update.content.toString()\n            });\n          }\n\n          break;\n\n        case 'REMOVE_NODE':\n          removeChild(parentNode, update.fromNode);\n\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'remove child',\n              payload: {\n                fromIndex: update.fromIndex\n              }\n            });\n          }\n\n          break;\n      }\n    }\n  }\n};\nmodule.exports = DOMChildrenOperations;","map":{"version":3,"sources":["/Users/mathew/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/DOMChildrenOperations.js"],"names":["DOMLazyTree","require","Danger","ReactDOMComponentTree","ReactInstrumentation","createMicrosoftUnsafeLocalFunction","setInnerHTML","setTextContent","getNodeAfter","parentNode","node","Array","isArray","nextSibling","firstChild","insertChildAt","childNode","referenceNode","insertBefore","insertLazyTreeChildAt","childTree","insertTreeBefore","moveChild","moveDelimitedText","removeChild","closingComment","removeDelimitedText","openingComment","nextNode","startNode","replaceDelimitedText","stringText","nodeAfterComment","document","createTextNode","process","env","NODE_ENV","debugTool","onHostOperation","instanceID","getInstanceFromNode","_debugID","type","payload","dangerouslyReplaceNodeWithMarkup","oldChild","markup","prevInstance","toString","nextInstance","DOMChildrenOperations","processUpdates","updates","parentNodeDebugID","k","length","update","content","afterNode","toIndex","fromNode","fromIndex","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar DOMLazyTree = require('./DOMLazyTree');\nvar Danger = require('./Danger');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');\nvar setInnerHTML = require('./setInnerHTML');\nvar setTextContent = require('./setTextContent');\n\nfunction getNodeAfter(parentNode, node) {\n  // Special case for text components, which return [open, close] comments\n  // from getHostNode.\n  if (Array.isArray(node)) {\n    node = node[1];\n  }\n  return node ? node.nextSibling : parentNode.firstChild;\n}\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nvar insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {\n  // We rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so\n  // we are careful to use `null`.)\n  parentNode.insertBefore(childNode, referenceNode);\n});\n\nfunction insertLazyTreeChildAt(parentNode, childTree, referenceNode) {\n  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);\n}\n\nfunction moveChild(parentNode, childNode, referenceNode) {\n  if (Array.isArray(childNode)) {\n    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);\n  } else {\n    insertChildAt(parentNode, childNode, referenceNode);\n  }\n}\n\nfunction removeChild(parentNode, childNode) {\n  if (Array.isArray(childNode)) {\n    var closingComment = childNode[1];\n    childNode = childNode[0];\n    removeDelimitedText(parentNode, childNode, closingComment);\n    parentNode.removeChild(closingComment);\n  }\n  parentNode.removeChild(childNode);\n}\n\nfunction moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {\n  var node = openingComment;\n  while (true) {\n    var nextNode = node.nextSibling;\n    insertChildAt(parentNode, node, referenceNode);\n    if (node === closingComment) {\n      break;\n    }\n    node = nextNode;\n  }\n}\n\nfunction removeDelimitedText(parentNode, startNode, closingComment) {\n  while (true) {\n    var node = startNode.nextSibling;\n    if (node === closingComment) {\n      // The closing comment is removed by ReactMultiChild.\n      break;\n    } else {\n      parentNode.removeChild(node);\n    }\n  }\n}\n\nfunction replaceDelimitedText(openingComment, closingComment, stringText) {\n  var parentNode = openingComment.parentNode;\n  var nodeAfterComment = openingComment.nextSibling;\n  if (nodeAfterComment === closingComment) {\n    // There are no text nodes between the opening and closing comments; insert\n    // a new one if stringText isn't empty.\n    if (stringText) {\n      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);\n    }\n  } else {\n    if (stringText) {\n      // Set the text content of the first node after the opening comment, and\n      // remove all following nodes up until the closing comment.\n      setTextContent(nodeAfterComment, stringText);\n      removeDelimitedText(parentNode, nodeAfterComment, closingComment);\n    } else {\n      removeDelimitedText(parentNode, openingComment, closingComment);\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    ReactInstrumentation.debugTool.onHostOperation({\n      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,\n      type: 'replace text',\n      payload: stringText\n    });\n  }\n}\n\nvar dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;\nif (process.env.NODE_ENV !== 'production') {\n  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {\n    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);\n    if (prevInstance._debugID !== 0) {\n      ReactInstrumentation.debugTool.onHostOperation({\n        instanceID: prevInstance._debugID,\n        type: 'replace with',\n        payload: markup.toString()\n      });\n    } else {\n      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);\n      if (nextInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onHostOperation({\n          instanceID: nextInstance._debugID,\n          type: 'mount',\n          payload: markup.toString()\n        });\n      }\n    }\n  };\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,\n\n  replaceDelimitedText: replaceDelimitedText,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @internal\n   */\n  processUpdates: function (parentNode, updates) {\n    if (process.env.NODE_ENV !== 'production') {\n      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;\n    }\n\n    for (var k = 0; k < updates.length; k++) {\n      var update = updates[k];\n      switch (update.type) {\n        case 'INSERT_MARKUP':\n          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'insert child',\n              payload: {\n                toIndex: update.toIndex,\n                content: update.content.toString()\n              }\n            });\n          }\n          break;\n        case 'MOVE_EXISTING':\n          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'move child',\n              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }\n            });\n          }\n          break;\n        case 'SET_MARKUP':\n          setInnerHTML(parentNode, update.content);\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'replace children',\n              payload: update.content.toString()\n            });\n          }\n          break;\n        case 'TEXT_CONTENT':\n          setTextContent(parentNode, update.content);\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'replace text',\n              payload: update.content.toString()\n            });\n          }\n          break;\n        case 'REMOVE_NODE':\n          removeChild(parentNode, update.fromNode);\n          if (process.env.NODE_ENV !== 'production') {\n            ReactInstrumentation.debugTool.onHostOperation({\n              instanceID: parentNodeDebugID,\n              type: 'remove child',\n              payload: { fromIndex: update.fromIndex }\n            });\n          }\n          break;\n      }\n    }\n  }\n};\n\nmodule.exports = DOMChildrenOperations;"]},"metadata":{},"sourceType":"script"}