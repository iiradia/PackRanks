{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMLazyTree = require('./DOMLazyTree');\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar Danger = {\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;\n    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;\n\n    if (typeof markup === 'string') {\n      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n      oldChild.parentNode.replaceChild(newChild, oldChild);\n    } else {\n      DOMLazyTree.replaceChildWithTree(oldChild, markup);\n    }\n  }\n};\nmodule.exports = Danger;","map":{"version":3,"sources":["/home/iiradia/EasyA/reactjs/node_modules/react-simplert/node_modules/react-dom/lib/Danger.js"],"names":["_prodInvariant","require","DOMLazyTree","ExecutionEnvironment","createNodesFromMarkup","emptyFunction","invariant","Danger","dangerouslyReplaceNodeWithMarkup","oldChild","markup","canUseDOM","process","env","NODE_ENV","nodeName","newChild","parentNode","replaceChild","replaceChildWithTree","module","exports"],"mappings":"AAAA;;;;;;;AAQA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,sBAAD,CAA5B;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,+BAAD,CAAlC;;AAEA,IAAIG,qBAAqB,GAAGH,OAAO,CAAC,gCAAD,CAAnC;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,wBAAD,CAA3B;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIM,MAAM,GAAG;AACX;;;;;;;;AAQAC,EAAAA,gCAAgC,EAAE,UAAUC,QAAV,EAAoBC,MAApB,EAA4B;AAC5D,KAACP,oBAAoB,CAACQ,SAAtB,GAAkCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCR,SAAS,CAAC,KAAD,EAAQ,gPAAR,CAAjD,GAA6SN,cAAc,CAAC,IAAD,CAA7V,GAAsW,KAAK,CAA3W;AACA,KAACU,MAAD,GAAUE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCR,SAAS,CAAC,KAAD,EAAQ,wDAAR,CAAjD,GAAqHN,cAAc,CAAC,IAAD,CAA7I,GAAsJ,KAAK,CAA3J;AACA,MAAES,QAAQ,CAACM,QAAT,KAAsB,MAAxB,IAAkCH,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCR,SAAS,CAAC,KAAD,EAAQ,yPAAR,CAAjD,GAAsTN,cAAc,CAAC,IAAD,CAAtW,GAA+W,KAAK,CAApX;;AAEA,QAAI,OAAOU,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAIM,QAAQ,GAAGZ,qBAAqB,CAACM,MAAD,EAASL,aAAT,CAArB,CAA6C,CAA7C,CAAf;AACAI,MAAAA,QAAQ,CAACQ,UAAT,CAAoBC,YAApB,CAAiCF,QAAjC,EAA2CP,QAA3C;AACD,KAHD,MAGO;AACLP,MAAAA,WAAW,CAACiB,oBAAZ,CAAiCV,QAAjC,EAA2CC,MAA3C;AACD;AACF;AApBU,CAAb;AAuBAU,MAAM,CAACC,OAAP,GAAiBd,MAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\n\nvar Danger = {\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;\n    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;\n\n    if (typeof markup === 'string') {\n      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n      oldChild.parentNode.replaceChild(newChild, oldChild);\n    } else {\n      DOMLazyTree.replaceChildWithTree(oldChild, markup);\n    }\n  }\n};\n\nmodule.exports = Danger;"]},"metadata":{},"sourceType":"script"}