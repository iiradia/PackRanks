{"ast":null,"code":"/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar DOMLazyTree = require('./DOMLazyTree');\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar ReactDOMEmptyComponent = function (instantiate) {\n  // ReactCompositeComponent uses this:\n  this._currentElement = null; // ReactDOMComponentTree uses these:\n\n  this._hostNode = null;\n  this._hostParent = null;\n  this._hostContainerInfo = null;\n  this._domID = 0;\n};\n\n_assign(ReactDOMEmptyComponent.prototype, {\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    var domID = hostContainerInfo._idCounter++;\n    this._domID = domID;\n    this._hostParent = hostParent;\n    this._hostContainerInfo = hostContainerInfo;\n    var nodeValue = ' react-empty: ' + this._domID + ' ';\n\n    if (transaction.useCreateElement) {\n      var ownerDocument = hostContainerInfo._ownerDocument;\n      var node = ownerDocument.createComment(nodeValue);\n      ReactDOMComponentTree.precacheNode(this, node);\n      return DOMLazyTree(node);\n    } else {\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd insert a comment node, but since this is a situation\n        // where React won't take over (static pages), we can simply return\n        // nothing.\n        return '';\n      }\n\n      return '<!--' + nodeValue + '-->';\n    }\n  },\n  receiveComponent: function () {},\n  getHostNode: function () {\n    return ReactDOMComponentTree.getNodeFromInstance(this);\n  },\n  unmountComponent: function () {\n    ReactDOMComponentTree.uncacheNode(this);\n  }\n});\n\nmodule.exports = ReactDOMEmptyComponent;","map":{"version":3,"sources":["/mnt/c/Users/Harry-PC/Documents/ProgrammingProjects/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/ReactDOMEmptyComponent.js"],"names":["_assign","require","DOMLazyTree","ReactDOMComponentTree","ReactDOMEmptyComponent","instantiate","_currentElement","_hostNode","_hostParent","_hostContainerInfo","_domID","prototype","mountComponent","transaction","hostParent","hostContainerInfo","context","domID","_idCounter","nodeValue","useCreateElement","ownerDocument","_ownerDocument","node","createComment","precacheNode","renderToStaticMarkup","receiveComponent","getHostNode","getNodeFromInstance","unmountComponent","uncacheNode","module","exports"],"mappings":"AAAA;;;;;;;AAQA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIE,qBAAqB,GAAGF,OAAO,CAAC,yBAAD,CAAnC;;AAEA,IAAIG,sBAAsB,GAAG,UAAUC,WAAV,EAAuB;AAClD;AACA,OAAKC,eAAL,GAAuB,IAAvB,CAFkD,CAGlD;;AACA,OAAKC,SAAL,GAAiB,IAAjB;AACA,OAAKC,WAAL,GAAmB,IAAnB;AACA,OAAKC,kBAAL,GAA0B,IAA1B;AACA,OAAKC,MAAL,GAAc,CAAd;AACD,CARD;;AASAV,OAAO,CAACI,sBAAsB,CAACO,SAAxB,EAAmC;AACxCC,EAAAA,cAAc,EAAE,UAAUC,WAAV,EAAuBC,UAAvB,EAAmCC,iBAAnC,EAAsDC,OAAtD,EAA+D;AAC7E,QAAIC,KAAK,GAAGF,iBAAiB,CAACG,UAAlB,EAAZ;AACA,SAAKR,MAAL,GAAcO,KAAd;AACA,SAAKT,WAAL,GAAmBM,UAAnB;AACA,SAAKL,kBAAL,GAA0BM,iBAA1B;AAEA,QAAII,SAAS,GAAG,mBAAmB,KAAKT,MAAxB,GAAiC,GAAjD;;AACA,QAAIG,WAAW,CAACO,gBAAhB,EAAkC;AAChC,UAAIC,aAAa,GAAGN,iBAAiB,CAACO,cAAtC;AACA,UAAIC,IAAI,GAAGF,aAAa,CAACG,aAAd,CAA4BL,SAA5B,CAAX;AACAhB,MAAAA,qBAAqB,CAACsB,YAAtB,CAAmC,IAAnC,EAAyCF,IAAzC;AACA,aAAOrB,WAAW,CAACqB,IAAD,CAAlB;AACD,KALD,MAKO;AACL,UAAIV,WAAW,CAACa,oBAAhB,EAAsC;AACpC;AACA;AACA;AACA,eAAO,EAAP;AACD;;AACD,aAAO,SAASP,SAAT,GAAqB,KAA5B;AACD;AACF,GAtBuC;AAuBxCQ,EAAAA,gBAAgB,EAAE,YAAY,CAAE,CAvBQ;AAwBxCC,EAAAA,WAAW,EAAE,YAAY;AACvB,WAAOzB,qBAAqB,CAAC0B,mBAAtB,CAA0C,IAA1C,CAAP;AACD,GA1BuC;AA2BxCC,EAAAA,gBAAgB,EAAE,YAAY;AAC5B3B,IAAAA,qBAAqB,CAAC4B,WAAtB,CAAkC,IAAlC;AACD;AA7BuC,CAAnC,CAAP;;AAgCAC,MAAM,CAACC,OAAP,GAAiB7B,sBAAjB","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar ReactDOMEmptyComponent = function (instantiate) {\n  // ReactCompositeComponent uses this:\n  this._currentElement = null;\n  // ReactDOMComponentTree uses these:\n  this._hostNode = null;\n  this._hostParent = null;\n  this._hostContainerInfo = null;\n  this._domID = 0;\n};\n_assign(ReactDOMEmptyComponent.prototype, {\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    var domID = hostContainerInfo._idCounter++;\n    this._domID = domID;\n    this._hostParent = hostParent;\n    this._hostContainerInfo = hostContainerInfo;\n\n    var nodeValue = ' react-empty: ' + this._domID + ' ';\n    if (transaction.useCreateElement) {\n      var ownerDocument = hostContainerInfo._ownerDocument;\n      var node = ownerDocument.createComment(nodeValue);\n      ReactDOMComponentTree.precacheNode(this, node);\n      return DOMLazyTree(node);\n    } else {\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd insert a comment node, but since this is a situation\n        // where React won't take over (static pages), we can simply return\n        // nothing.\n        return '';\n      }\n      return '<!--' + nodeValue + '-->';\n    }\n  },\n  receiveComponent: function () {},\n  getHostNode: function () {\n    return ReactDOMComponentTree.getNodeFromInstance(this);\n  },\n  unmountComponent: function () {\n    ReactDOMComponentTree.uncacheNode(this);\n  }\n});\n\nmodule.exports = ReactDOMEmptyComponent;"]},"metadata":{},"sourceType":"script"}