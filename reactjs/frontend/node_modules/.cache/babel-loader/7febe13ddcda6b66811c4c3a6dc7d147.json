{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n'use strict';\n/**\n * @param {array} arr an \"accumulation\" of items which is either an Array or\n * a single item. Useful when paired with the `accumulate` module. This is a\n * simple utility that allows us to reason about a collection of items, but\n * handling the case when there is exactly one item (and we do not need to\n * allocate an array).\n */\n\nfunction forEachAccumulated(arr, cb, scope) {\n  if (Array.isArray(arr)) {\n    arr.forEach(cb, scope);\n  } else if (arr) {\n    cb.call(scope, arr);\n  }\n}\n\nmodule.exports = forEachAccumulated;","map":{"version":3,"sources":["/mnt/c/Users/Harry-PC/Documents/ProgrammingProjects/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/forEachAccumulated.js"],"names":["forEachAccumulated","arr","cb","scope","Array","isArray","forEach","call","module","exports"],"mappings":"AAAA;;;;;;;;AASA;AAEA;;;;;;;;AAQA,SAASA,kBAAT,CAA4BC,GAA5B,EAAiCC,EAAjC,EAAqCC,KAArC,EAA4C;AAC1C,MAAIC,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAJ,EAAwB;AACtBA,IAAAA,GAAG,CAACK,OAAJ,CAAYJ,EAAZ,EAAgBC,KAAhB;AACD,GAFD,MAEO,IAAIF,GAAJ,EAAS;AACdC,IAAAA,EAAE,CAACK,IAAH,CAAQJ,KAAR,EAAeF,GAAf;AACD;AACF;;AAEDO,MAAM,CAACC,OAAP,GAAiBT,kBAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\n/**\n * @param {array} arr an \"accumulation\" of items which is either an Array or\n * a single item. Useful when paired with the `accumulate` module. This is a\n * simple utility that allows us to reason about a collection of items, but\n * handling the case when there is exactly one item (and we do not need to\n * allocate an array).\n */\n\nfunction forEachAccumulated(arr, cb, scope) {\n  if (Array.isArray(arr)) {\n    arr.forEach(cb, scope);\n  } else if (arr) {\n    cb.call(scope, arr);\n  }\n}\n\nmodule.exports = forEachAccumulated;"]},"metadata":{},"sourceType":"script"}