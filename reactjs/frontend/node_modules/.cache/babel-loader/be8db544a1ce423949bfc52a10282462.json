{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar React = require('react/lib/React');\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\n\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');\n\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar ReactInstanceMap = require('./ReactInstanceMap');\n\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar ReactNodeTypes = require('./ReactNodeTypes');\n\nvar ReactReconciler = require('./ReactReconciler');\n\nif (process.env.NODE_ENV !== 'production') {\n  var checkReactTypeSpec = require('./checkReactTypeSpec');\n}\n\nvar emptyObject = require('fbjs/lib/emptyObject');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\n\nvar warning = require('fbjs/lib/warning');\n\nvar CompositeTypes = {\n  ImpureClass: 0,\n  PureClass: 1,\n  StatelessFunctional: 2\n};\n\nfunction StatelessComponent(Component) {}\n\nStatelessComponent.prototype.render = function () {\n  var Component = ReactInstanceMap.get(this)._currentElement.type;\n\n  var element = Component(this.props, this.context, this.updater);\n  warnIfInvalidElement(Component, element);\n  return element;\n};\n\nfunction warnIfInvalidElement(Component, element) {\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;\n    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;\n  }\n}\n\nfunction shouldConstruct(Component) {\n  return !!(Component.prototype && Component.prototype.isReactComponent);\n}\n\nfunction isPureComponent(Component) {\n  return !!(Component.prototype && Component.prototype.isPureReactComponent);\n} // Separated into a function to contain deoptimizations caused by try/finally.\n\n\nfunction measureLifeCyclePerf(fn, debugID, timerType) {\n  if (debugID === 0) {\n    // Top-level wrappers (see ReactMount) and empty components (see\n    // ReactDOMEmptyComponent) are invisible to hooks and devtools.\n    // Both are implementation details that should go away in the future.\n    return fn();\n  }\n\n  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);\n\n  try {\n    return fn();\n  } finally {\n    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);\n  }\n}\n/**\n * ------------------ The Life-Cycle of a Composite Component ------------------\n *\n * - constructor: Initialization of state. The instance is now retained.\n *   - componentWillMount\n *   - render\n *   - [children's constructors]\n *     - [children's componentWillMount and render]\n *     - [children's componentDidMount]\n *     - componentDidMount\n *\n *       Update Phases:\n *       - componentWillReceiveProps (only called if parent updated)\n *       - shouldComponentUpdate\n *         - componentWillUpdate\n *           - render\n *           - [children's constructors or receive props phases]\n *         - componentDidUpdate\n *\n *     - componentWillUnmount\n *     - [children's componentWillUnmount]\n *   - [children destroyed]\n * - (destroyed): The instance is now blank, released by React and ready for GC.\n *\n * -----------------------------------------------------------------------------\n */\n\n/**\n * An incrementing ID assigned to each component when it is mounted. This is\n * used to enforce the order in which `ReactUpdates` updates dirty components.\n *\n * @private\n */\n\n\nvar nextMountID = 1;\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\n\nvar ReactCompositeComponent = {\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactElement} element\n   * @final\n   * @internal\n   */\n  construct: function (element) {\n    this._currentElement = element;\n    this._rootNodeID = 0;\n    this._compositeType = null;\n    this._instance = null;\n    this._hostParent = null;\n    this._hostContainerInfo = null; // See ReactUpdateQueue\n\n    this._updateBatchNumber = null;\n    this._pendingElement = null;\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    this._renderedNodeType = null;\n    this._renderedComponent = null;\n    this._context = null;\n    this._mountOrder = 0;\n    this._topLevelWrapper = null; // See ReactUpdates and ReactUpdateQueue.\n\n    this._pendingCallbacks = null; // ComponentWillUnmount shall only be called once\n\n    this._calledComponentWillUnmount = false;\n\n    if (process.env.NODE_ENV !== 'production') {\n      this._warnedAboutRefsInRender = false;\n    }\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {?object} hostParent\n   * @param {?object} hostContainerInfo\n   * @param {?object} context\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    var _this = this;\n\n    this._context = context;\n    this._mountOrder = nextMountID++;\n    this._hostParent = hostParent;\n    this._hostContainerInfo = hostContainerInfo;\n    var publicProps = this._currentElement.props;\n\n    var publicContext = this._processContext(context);\n\n    var Component = this._currentElement.type;\n    var updateQueue = transaction.getUpdateQueue(); // Initialize the public class\n\n    var doConstruct = shouldConstruct(Component);\n\n    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);\n\n    var renderedElement; // Support functional components\n\n    if (!doConstruct && (inst == null || inst.render == null)) {\n      renderedElement = inst;\n      warnIfInvalidElement(Component, renderedElement);\n      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;\n      inst = new StatelessComponent(Component);\n      this._compositeType = CompositeTypes.StatelessFunctional;\n    } else {\n      if (isPureComponent(Component)) {\n        this._compositeType = CompositeTypes.PureClass;\n      } else {\n        this._compositeType = CompositeTypes.ImpureClass;\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This will throw later in _renderValidatedComponent, but add an early\n      // warning now to help debugging\n      if (inst.render == null) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;\n      }\n\n      var propsMutated = inst.props !== publicProps;\n      var componentName = Component.displayName || Component.name || 'Component';\n      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", componentName, componentName) : void 0;\n    } // These should be set up in the constructor, but as a convenience for\n    // simpler class abstractions, we set them up after the fact.\n\n\n    inst.props = publicProps;\n    inst.context = publicContext;\n    inst.refs = emptyObject;\n    inst.updater = updateQueue;\n    this._instance = inst; // Store a reference from the instance back to the internal representation\n\n    ReactInstanceMap.set(inst, this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Since plain JS classes are defined without any special initialization\n      // logic, we can not catch common errors early. Therefore, we have to\n      // catch them here, at initialization time, instead.\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;\n    }\n\n    var initialState = inst.state;\n\n    if (initialState === undefined) {\n      inst.state = initialState = null;\n    }\n\n    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    var markup;\n\n    if (inst.unstable_handleError) {\n      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    } else {\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    }\n\n    if (inst.componentDidMount) {\n      if (process.env.NODE_ENV !== 'production') {\n        transaction.getReactMountReady().enqueue(function () {\n          measureLifeCyclePerf(function () {\n            return inst.componentDidMount();\n          }, _this._debugID, 'componentDidMount');\n        });\n      } else {\n        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);\n      }\n    }\n\n    return markup;\n  },\n  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {\n    if (process.env.NODE_ENV !== 'production' && !doConstruct) {\n      ReactCurrentOwner.current = this;\n\n      try {\n        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);\n      } finally {\n        ReactCurrentOwner.current = null;\n      }\n    } else {\n      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);\n    }\n  },\n  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {\n    var Component = this._currentElement.type;\n\n    if (doConstruct) {\n      if (process.env.NODE_ENV !== 'production') {\n        return measureLifeCyclePerf(function () {\n          return new Component(publicProps, publicContext, updateQueue);\n        }, this._debugID, 'ctor');\n      } else {\n        return new Component(publicProps, publicContext, updateQueue);\n      }\n    } // This can still be an instance in case of factory components\n    // but we'll count this as time spent rendering as the more common case.\n\n\n    if (process.env.NODE_ENV !== 'production') {\n      return measureLifeCyclePerf(function () {\n        return Component(publicProps, publicContext, updateQueue);\n      }, this._debugID, 'render');\n    } else {\n      return Component(publicProps, publicContext, updateQueue);\n    }\n  },\n  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {\n    var markup;\n    var checkpoint = transaction.checkpoint();\n\n    try {\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    } catch (e) {\n      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint\n      transaction.rollback(checkpoint);\n\n      this._instance.unstable_handleError(e);\n\n      if (this._pendingStateQueue) {\n        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);\n      }\n\n      checkpoint = transaction.checkpoint();\n\n      this._renderedComponent.unmountComponent(true);\n\n      transaction.rollback(checkpoint); // Try again - we've informed the component about the error, so they can render an error message this time.\n      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).\n\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    }\n\n    return markup;\n  },\n  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {\n    var inst = this._instance;\n    var debugID = 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      debugID = this._debugID;\n    }\n\n    if (inst.componentWillMount) {\n      if (process.env.NODE_ENV !== 'production') {\n        measureLifeCyclePerf(function () {\n          return inst.componentWillMount();\n        }, debugID, 'componentWillMount');\n      } else {\n        inst.componentWillMount();\n      } // When mounting, calls to `setState` by `componentWillMount` will set\n      // `this._pendingStateQueue` without triggering a re-render.\n\n\n      if (this._pendingStateQueue) {\n        inst.state = this._processPendingState(inst.props, inst.context);\n      }\n    } // If not a stateless component, we now render\n\n\n    if (renderedElement === undefined) {\n      renderedElement = this._renderValidatedComponent();\n    }\n\n    var nodeType = ReactNodeTypes.getType(renderedElement);\n    this._renderedNodeType = nodeType;\n\n    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY\n    /* shouldHaveDebugID */\n    );\n\n    this._renderedComponent = child;\n    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (debugID !== 0) {\n        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];\n        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);\n      }\n    }\n\n    return markup;\n  },\n  getHostNode: function () {\n    return ReactReconciler.getHostNode(this._renderedComponent);\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function (safely) {\n    if (!this._renderedComponent) {\n      return;\n    }\n\n    var inst = this._instance;\n\n    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {\n      inst._calledComponentWillUnmount = true;\n\n      if (safely) {\n        var name = this.getName() + '.componentWillUnmount()';\n        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          measureLifeCyclePerf(function () {\n            return inst.componentWillUnmount();\n          }, this._debugID, 'componentWillUnmount');\n        } else {\n          inst.componentWillUnmount();\n        }\n      }\n    }\n\n    if (this._renderedComponent) {\n      ReactReconciler.unmountComponent(this._renderedComponent, safely);\n      this._renderedNodeType = null;\n      this._renderedComponent = null;\n      this._instance = null;\n    } // Reset pending fields\n    // Even if this component is scheduled for another update in ReactUpdates,\n    // it would still be ignored because these fields are reset.\n\n\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    this._pendingCallbacks = null;\n    this._pendingElement = null; // These fields do not really need to be reset since this object is no\n    // longer accessible.\n\n    this._context = null;\n    this._rootNodeID = 0;\n    this._topLevelWrapper = null; // Delete the reference from the instance to this internal representation\n    // which allow the internals to be properly cleaned up even if the user\n    // leaks a reference to the public instance.\n\n    ReactInstanceMap.remove(inst); // Some existing components rely on inst.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: inst.props = null;\n    // TODO: inst.state = null;\n    // TODO: inst.context = null;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _maskContext: function (context) {\n    var Component = this._currentElement.type;\n    var contextTypes = Component.contextTypes;\n\n    if (!contextTypes) {\n      return emptyObject;\n    }\n\n    var maskedContext = {};\n\n    for (var contextName in contextTypes) {\n      maskedContext[contextName] = context[contextName];\n    }\n\n    return maskedContext;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function (context) {\n    var maskedContext = this._maskContext(context);\n\n    if (process.env.NODE_ENV !== 'production') {\n      var Component = this._currentElement.type;\n\n      if (Component.contextTypes) {\n        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');\n      }\n    }\n\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _processChildContext: function (currentContext) {\n    var Component = this._currentElement.type;\n    var inst = this._instance;\n    var childContext;\n\n    if (inst.getChildContext) {\n      if (process.env.NODE_ENV !== 'production') {\n        ReactInstrumentation.debugTool.onBeginProcessingChildContext();\n\n        try {\n          childContext = inst.getChildContext();\n        } finally {\n          ReactInstrumentation.debugTool.onEndProcessingChildContext();\n        }\n      } else {\n        childContext = inst.getChildContext();\n      }\n    }\n\n    if (childContext) {\n      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;\n\n      if (process.env.NODE_ENV !== 'production') {\n        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');\n      }\n\n      for (var name in childContext) {\n        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;\n      }\n\n      return _assign({}, currentContext, childContext);\n    }\n\n    return currentContext;\n  },\n\n  /**\n   * Assert that the context types are valid\n   *\n   * @param {object} typeSpecs Map of context field to a ReactPropType\n   * @param {object} values Runtime values that need to be type-checked\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkContextTypes: function (typeSpecs, values, location) {\n    if (process.env.NODE_ENV !== 'production') {\n      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);\n    }\n  },\n  receiveComponent: function (nextElement, transaction, nextContext) {\n    var prevElement = this._currentElement;\n    var prevContext = this._context;\n    this._pendingElement = null;\n    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);\n  },\n\n  /**\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (transaction) {\n    if (this._pendingElement != null) {\n      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);\n    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {\n      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);\n    } else {\n      this._updateBatchNumber = null;\n    }\n  },\n\n  /**\n   * Perform an update to a mounted component. The componentWillReceiveProps and\n   * shouldComponentUpdate methods are called, then (assuming the update isn't\n   * skipped) the remaining update lifecycle methods are called and the DOM\n   * representation is updated.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevParentElement\n   * @param {ReactElement} nextParentElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {\n    var inst = this._instance;\n    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;\n    var willReceive = false;\n    var nextContext; // Determine if the context has changed or not\n\n    if (this._context === nextUnmaskedContext) {\n      nextContext = inst.context;\n    } else {\n      nextContext = this._processContext(nextUnmaskedContext);\n      willReceive = true;\n    }\n\n    var prevProps = prevParentElement.props;\n    var nextProps = nextParentElement.props; // Not a simple state update but a props update\n\n    if (prevParentElement !== nextParentElement) {\n      willReceive = true;\n    } // An update here will schedule an update but immediately set\n    // _pendingStateQueue which will ensure that any state updates gets\n    // immediately reconciled instead of waiting for the next batch.\n\n\n    if (willReceive && inst.componentWillReceiveProps) {\n      if (process.env.NODE_ENV !== 'production') {\n        measureLifeCyclePerf(function () {\n          return inst.componentWillReceiveProps(nextProps, nextContext);\n        }, this._debugID, 'componentWillReceiveProps');\n      } else {\n        inst.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    var nextState = this._processPendingState(nextProps, nextContext);\n\n    var shouldUpdate = true;\n\n    if (!this._pendingForceUpdate) {\n      if (inst.shouldComponentUpdate) {\n        if (process.env.NODE_ENV !== 'production') {\n          shouldUpdate = measureLifeCyclePerf(function () {\n            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n          }, this._debugID, 'shouldComponentUpdate');\n        } else {\n          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n        }\n      } else {\n        if (this._compositeType === CompositeTypes.PureClass) {\n          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);\n        }\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;\n    }\n\n    this._updateBatchNumber = null;\n\n    if (shouldUpdate) {\n      this._pendingForceUpdate = false; // Will set `this.props`, `this.state` and `this.context`.\n\n      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state but we shortcut the rest of the update.\n      this._currentElement = nextParentElement;\n      this._context = nextUnmaskedContext;\n      inst.props = nextProps;\n      inst.state = nextState;\n      inst.context = nextContext;\n    }\n  },\n  _processPendingState: function (props, context) {\n    var inst = this._instance;\n    var queue = this._pendingStateQueue;\n    var replace = this._pendingReplaceState;\n    this._pendingReplaceState = false;\n    this._pendingStateQueue = null;\n\n    if (!queue) {\n      return inst.state;\n    }\n\n    if (replace && queue.length === 1) {\n      return queue[0];\n    }\n\n    var nextState = _assign({}, replace ? queue[0] : inst.state);\n\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {\n      var partial = queue[i];\n\n      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);\n    }\n\n    return nextState;\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactElement} nextElement Next element\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {?object} unmaskedContext\n   * @private\n   */\n  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {\n    var _this2 = this;\n\n    var inst = this._instance;\n    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);\n    var prevProps;\n    var prevState;\n    var prevContext;\n\n    if (hasComponentDidUpdate) {\n      prevProps = inst.props;\n      prevState = inst.state;\n      prevContext = inst.context;\n    }\n\n    if (inst.componentWillUpdate) {\n      if (process.env.NODE_ENV !== 'production') {\n        measureLifeCyclePerf(function () {\n          return inst.componentWillUpdate(nextProps, nextState, nextContext);\n        }, this._debugID, 'componentWillUpdate');\n      } else {\n        inst.componentWillUpdate(nextProps, nextState, nextContext);\n      }\n    }\n\n    this._currentElement = nextElement;\n    this._context = unmaskedContext;\n    inst.props = nextProps;\n    inst.state = nextState;\n    inst.context = nextContext;\n\n    this._updateRenderedComponent(transaction, unmaskedContext);\n\n    if (hasComponentDidUpdate) {\n      if (process.env.NODE_ENV !== 'production') {\n        transaction.getReactMountReady().enqueue(function () {\n          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');\n        });\n      } else {\n        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);\n      }\n    }\n  },\n\n  /**\n   * Call the component's `render` method and update the DOM accordingly.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _updateRenderedComponent: function (transaction, context) {\n    var prevComponentInstance = this._renderedComponent;\n    var prevRenderedElement = prevComponentInstance._currentElement;\n\n    var nextRenderedElement = this._renderValidatedComponent();\n\n    var debugID = 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      debugID = this._debugID;\n    }\n\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {\n      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));\n    } else {\n      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);\n      ReactReconciler.unmountComponent(prevComponentInstance, false);\n      var nodeType = ReactNodeTypes.getType(nextRenderedElement);\n      this._renderedNodeType = nodeType;\n\n      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY\n      /* shouldHaveDebugID */\n      );\n\n      this._renderedComponent = child;\n      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (debugID !== 0) {\n          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];\n          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);\n        }\n      }\n\n      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);\n    }\n  },\n\n  /**\n   * Overridden in shallow rendering.\n   *\n   * @protected\n   */\n  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {\n    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);\n  },\n\n  /**\n   * @protected\n   */\n  _renderValidatedComponentWithoutOwnerOrContext: function () {\n    var inst = this._instance;\n    var renderedElement;\n\n    if (process.env.NODE_ENV !== 'production') {\n      renderedElement = measureLifeCyclePerf(function () {\n        return inst.render();\n      }, this._debugID, 'render');\n    } else {\n      renderedElement = inst.render();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // We allow auto-mocks to proceed as if they're returning null.\n      if (renderedElement === undefined && inst.render._isMockFunction) {\n        // This is probably bad practice. Consider warning here and\n        // deprecating this convenience.\n        renderedElement = null;\n      }\n    }\n\n    return renderedElement;\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: function () {\n    var renderedElement;\n\n    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {\n      ReactCurrentOwner.current = this;\n\n      try {\n        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();\n      } finally {\n        ReactCurrentOwner.current = null;\n      }\n    } else {\n      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();\n    }\n\n    !( // TODO: An `isValidNode` function would probably be more appropriate\n    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;\n    return renderedElement;\n  },\n\n  /**\n   * Lazily allocates the refs object and stores `component` as `ref`.\n   *\n   * @param {string} ref Reference name.\n   * @param {component} component Component to store as `ref`.\n   * @final\n   * @private\n   */\n  attachRef: function (ref, component) {\n    var inst = this.getPublicInstance();\n    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;\n    var publicComponentInstance = component.getPublicInstance();\n\n    if (process.env.NODE_ENV !== 'production') {\n      var componentName = component && component.getName ? component.getName() : 'a component';\n      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref \"%s\" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;\n    }\n\n    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;\n    refs[ref] = publicComponentInstance;\n  },\n\n  /**\n   * Detaches a reference name.\n   *\n   * @param {string} ref Name to dereference.\n   * @final\n   * @private\n   */\n  detachRef: function (ref) {\n    var refs = this.getPublicInstance().refs;\n    delete refs[ref];\n  },\n\n  /**\n   * Get a text description of the component that can be used to identify it\n   * in error messages.\n   * @return {string} The name or null.\n   * @internal\n   */\n  getName: function () {\n    var type = this._currentElement.type;\n    var constructor = this._instance && this._instance.constructor;\n    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;\n  },\n\n  /**\n   * Get the publicly accessible representation of this component - i.e. what\n   * is exposed by refs and returned by render. Can be null for stateless\n   * components.\n   *\n   * @return {ReactComponent} the public component instance.\n   * @internal\n   */\n  getPublicInstance: function () {\n    var inst = this._instance;\n\n    if (this._compositeType === CompositeTypes.StatelessFunctional) {\n      return null;\n    }\n\n    return inst;\n  },\n  // Stub\n  _instantiateReactComponent: null\n};\nmodule.exports = ReactCompositeComponent;","map":{"version":3,"sources":["/mnt/c/Users/Harry-PC/Documents/ProgrammingProjects/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/ReactCompositeComponent.js"],"names":["_prodInvariant","require","_assign","React","ReactComponentEnvironment","ReactCurrentOwner","ReactErrorUtils","ReactInstanceMap","ReactInstrumentation","ReactNodeTypes","ReactReconciler","process","env","NODE_ENV","checkReactTypeSpec","emptyObject","invariant","shallowEqual","shouldUpdateReactComponent","warning","CompositeTypes","ImpureClass","PureClass","StatelessFunctional","StatelessComponent","Component","prototype","render","get","_currentElement","type","element","props","context","updater","warnIfInvalidElement","isValidElement","displayName","name","childContextTypes","shouldConstruct","isReactComponent","isPureComponent","isPureReactComponent","measureLifeCyclePerf","fn","debugID","timerType","debugTool","onBeginLifeCycleTimer","onEndLifeCycleTimer","nextMountID","ReactCompositeComponent","construct","_rootNodeID","_compositeType","_instance","_hostParent","_hostContainerInfo","_updateBatchNumber","_pendingElement","_pendingStateQueue","_pendingReplaceState","_pendingForceUpdate","_renderedNodeType","_renderedComponent","_context","_mountOrder","_topLevelWrapper","_pendingCallbacks","_calledComponentWillUnmount","_warnedAboutRefsInRender","mountComponent","transaction","hostParent","hostContainerInfo","_this","publicProps","publicContext","_processContext","updateQueue","getUpdateQueue","doConstruct","inst","_constructComponent","renderedElement","propsMutated","componentName","undefined","refs","set","getInitialState","isReactClassApproved","state","getName","getDefaultProps","propTypes","contextTypes","componentShouldUpdate","componentDidUnmount","componentWillRecieveProps","initialState","Array","isArray","markup","unstable_handleError","performInitialMountWithErrorHandling","performInitialMount","componentDidMount","getReactMountReady","enqueue","_debugID","current","_constructComponentWithoutOwner","checkpoint","e","rollback","_processPendingState","unmountComponent","componentWillMount","_renderValidatedComponent","nodeType","getType","child","_instantiateReactComponent","EMPTY","_processChildContext","childDebugIDs","onSetChildren","getHostNode","safely","componentWillUnmount","invokeGuardedCallback","bind","remove","_maskContext","maskedContext","contextName","_checkContextTypes","currentContext","childContext","getChildContext","onBeginProcessingChildContext","onEndProcessingChildContext","typeSpecs","values","location","receiveComponent","nextElement","nextContext","prevElement","prevContext","updateComponent","performUpdateIfNecessary","prevParentElement","nextParentElement","prevUnmaskedContext","nextUnmaskedContext","willReceive","prevProps","nextProps","componentWillReceiveProps","nextState","shouldUpdate","shouldComponentUpdate","_performComponentUpdate","queue","replace","length","i","partial","call","unmaskedContext","_this2","hasComponentDidUpdate","Boolean","componentDidUpdate","prevState","componentWillUpdate","_updateRenderedComponent","prevComponentInstance","prevRenderedElement","nextRenderedElement","oldHostNode","nextMarkup","_replaceNodeWithMarkup","prevInstance","replaceNodeWithMarkup","_renderValidatedComponentWithoutOwnerOrContext","_isMockFunction","attachRef","ref","component","getPublicInstance","publicComponentInstance","detachRef","constructor","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar React = require('react/lib/React');\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');\nvar ReactErrorUtils = require('./ReactErrorUtils');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactInstrumentation = require('./ReactInstrumentation');\nvar ReactNodeTypes = require('./ReactNodeTypes');\nvar ReactReconciler = require('./ReactReconciler');\n\nif (process.env.NODE_ENV !== 'production') {\n  var checkReactTypeSpec = require('./checkReactTypeSpec');\n}\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\nvar shouldUpdateReactComponent = require('./shouldUpdateReactComponent');\nvar warning = require('fbjs/lib/warning');\n\nvar CompositeTypes = {\n  ImpureClass: 0,\n  PureClass: 1,\n  StatelessFunctional: 2\n};\n\nfunction StatelessComponent(Component) {}\nStatelessComponent.prototype.render = function () {\n  var Component = ReactInstanceMap.get(this)._currentElement.type;\n  var element = Component(this.props, this.context, this.updater);\n  warnIfInvalidElement(Component, element);\n  return element;\n};\n\nfunction warnIfInvalidElement(Component, element) {\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;\n    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;\n  }\n}\n\nfunction shouldConstruct(Component) {\n  return !!(Component.prototype && Component.prototype.isReactComponent);\n}\n\nfunction isPureComponent(Component) {\n  return !!(Component.prototype && Component.prototype.isPureReactComponent);\n}\n\n// Separated into a function to contain deoptimizations caused by try/finally.\nfunction measureLifeCyclePerf(fn, debugID, timerType) {\n  if (debugID === 0) {\n    // Top-level wrappers (see ReactMount) and empty components (see\n    // ReactDOMEmptyComponent) are invisible to hooks and devtools.\n    // Both are implementation details that should go away in the future.\n    return fn();\n  }\n\n  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);\n  try {\n    return fn();\n  } finally {\n    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);\n  }\n}\n\n/**\n * ------------------ The Life-Cycle of a Composite Component ------------------\n *\n * - constructor: Initialization of state. The instance is now retained.\n *   - componentWillMount\n *   - render\n *   - [children's constructors]\n *     - [children's componentWillMount and render]\n *     - [children's componentDidMount]\n *     - componentDidMount\n *\n *       Update Phases:\n *       - componentWillReceiveProps (only called if parent updated)\n *       - shouldComponentUpdate\n *         - componentWillUpdate\n *           - render\n *           - [children's constructors or receive props phases]\n *         - componentDidUpdate\n *\n *     - componentWillUnmount\n *     - [children's componentWillUnmount]\n *   - [children destroyed]\n * - (destroyed): The instance is now blank, released by React and ready for GC.\n *\n * -----------------------------------------------------------------------------\n */\n\n/**\n * An incrementing ID assigned to each component when it is mounted. This is\n * used to enforce the order in which `ReactUpdates` updates dirty components.\n *\n * @private\n */\nvar nextMountID = 1;\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponent = {\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactElement} element\n   * @final\n   * @internal\n   */\n  construct: function (element) {\n    this._currentElement = element;\n    this._rootNodeID = 0;\n    this._compositeType = null;\n    this._instance = null;\n    this._hostParent = null;\n    this._hostContainerInfo = null;\n\n    // See ReactUpdateQueue\n    this._updateBatchNumber = null;\n    this._pendingElement = null;\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    this._renderedNodeType = null;\n    this._renderedComponent = null;\n    this._context = null;\n    this._mountOrder = 0;\n    this._topLevelWrapper = null;\n\n    // See ReactUpdates and ReactUpdateQueue.\n    this._pendingCallbacks = null;\n\n    // ComponentWillUnmount shall only be called once\n    this._calledComponentWillUnmount = false;\n\n    if (process.env.NODE_ENV !== 'production') {\n      this._warnedAboutRefsInRender = false;\n    }\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {?object} hostParent\n   * @param {?object} hostContainerInfo\n   * @param {?object} context\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    var _this = this;\n\n    this._context = context;\n    this._mountOrder = nextMountID++;\n    this._hostParent = hostParent;\n    this._hostContainerInfo = hostContainerInfo;\n\n    var publicProps = this._currentElement.props;\n    var publicContext = this._processContext(context);\n\n    var Component = this._currentElement.type;\n\n    var updateQueue = transaction.getUpdateQueue();\n\n    // Initialize the public class\n    var doConstruct = shouldConstruct(Component);\n    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);\n    var renderedElement;\n\n    // Support functional components\n    if (!doConstruct && (inst == null || inst.render == null)) {\n      renderedElement = inst;\n      warnIfInvalidElement(Component, renderedElement);\n      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;\n      inst = new StatelessComponent(Component);\n      this._compositeType = CompositeTypes.StatelessFunctional;\n    } else {\n      if (isPureComponent(Component)) {\n        this._compositeType = CompositeTypes.PureClass;\n      } else {\n        this._compositeType = CompositeTypes.ImpureClass;\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This will throw later in _renderValidatedComponent, but add an early\n      // warning now to help debugging\n      if (inst.render == null) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;\n      }\n\n      var propsMutated = inst.props !== publicProps;\n      var componentName = Component.displayName || Component.name || 'Component';\n\n      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", componentName, componentName) : void 0;\n    }\n\n    // These should be set up in the constructor, but as a convenience for\n    // simpler class abstractions, we set them up after the fact.\n    inst.props = publicProps;\n    inst.context = publicContext;\n    inst.refs = emptyObject;\n    inst.updater = updateQueue;\n\n    this._instance = inst;\n\n    // Store a reference from the instance back to the internal representation\n    ReactInstanceMap.set(inst, this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Since plain JS classes are defined without any special initialization\n      // logic, we can not catch common errors early. Therefore, we have to\n      // catch them here, at initialization time, instead.\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;\n    }\n\n    var initialState = inst.state;\n    if (initialState === undefined) {\n      inst.state = initialState = null;\n    }\n    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;\n\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    var markup;\n    if (inst.unstable_handleError) {\n      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    } else {\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    }\n\n    if (inst.componentDidMount) {\n      if (process.env.NODE_ENV !== 'production') {\n        transaction.getReactMountReady().enqueue(function () {\n          measureLifeCyclePerf(function () {\n            return inst.componentDidMount();\n          }, _this._debugID, 'componentDidMount');\n        });\n      } else {\n        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);\n      }\n    }\n\n    return markup;\n  },\n\n  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {\n    if (process.env.NODE_ENV !== 'production' && !doConstruct) {\n      ReactCurrentOwner.current = this;\n      try {\n        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);\n      } finally {\n        ReactCurrentOwner.current = null;\n      }\n    } else {\n      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);\n    }\n  },\n\n  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {\n    var Component = this._currentElement.type;\n\n    if (doConstruct) {\n      if (process.env.NODE_ENV !== 'production') {\n        return measureLifeCyclePerf(function () {\n          return new Component(publicProps, publicContext, updateQueue);\n        }, this._debugID, 'ctor');\n      } else {\n        return new Component(publicProps, publicContext, updateQueue);\n      }\n    }\n\n    // This can still be an instance in case of factory components\n    // but we'll count this as time spent rendering as the more common case.\n    if (process.env.NODE_ENV !== 'production') {\n      return measureLifeCyclePerf(function () {\n        return Component(publicProps, publicContext, updateQueue);\n      }, this._debugID, 'render');\n    } else {\n      return Component(publicProps, publicContext, updateQueue);\n    }\n  },\n\n  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {\n    var markup;\n    var checkpoint = transaction.checkpoint();\n    try {\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    } catch (e) {\n      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint\n      transaction.rollback(checkpoint);\n      this._instance.unstable_handleError(e);\n      if (this._pendingStateQueue) {\n        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);\n      }\n      checkpoint = transaction.checkpoint();\n\n      this._renderedComponent.unmountComponent(true);\n      transaction.rollback(checkpoint);\n\n      // Try again - we've informed the component about the error, so they can render an error message this time.\n      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).\n      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);\n    }\n    return markup;\n  },\n\n  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {\n    var inst = this._instance;\n\n    var debugID = 0;\n    if (process.env.NODE_ENV !== 'production') {\n      debugID = this._debugID;\n    }\n\n    if (inst.componentWillMount) {\n      if (process.env.NODE_ENV !== 'production') {\n        measureLifeCyclePerf(function () {\n          return inst.componentWillMount();\n        }, debugID, 'componentWillMount');\n      } else {\n        inst.componentWillMount();\n      }\n      // When mounting, calls to `setState` by `componentWillMount` will set\n      // `this._pendingStateQueue` without triggering a re-render.\n      if (this._pendingStateQueue) {\n        inst.state = this._processPendingState(inst.props, inst.context);\n      }\n    }\n\n    // If not a stateless component, we now render\n    if (renderedElement === undefined) {\n      renderedElement = this._renderValidatedComponent();\n    }\n\n    var nodeType = ReactNodeTypes.getType(renderedElement);\n    this._renderedNodeType = nodeType;\n    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */\n    );\n    this._renderedComponent = child;\n\n    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (debugID !== 0) {\n        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];\n        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);\n      }\n    }\n\n    return markup;\n  },\n\n  getHostNode: function () {\n    return ReactReconciler.getHostNode(this._renderedComponent);\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function (safely) {\n    if (!this._renderedComponent) {\n      return;\n    }\n\n    var inst = this._instance;\n\n    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {\n      inst._calledComponentWillUnmount = true;\n\n      if (safely) {\n        var name = this.getName() + '.componentWillUnmount()';\n        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          measureLifeCyclePerf(function () {\n            return inst.componentWillUnmount();\n          }, this._debugID, 'componentWillUnmount');\n        } else {\n          inst.componentWillUnmount();\n        }\n      }\n    }\n\n    if (this._renderedComponent) {\n      ReactReconciler.unmountComponent(this._renderedComponent, safely);\n      this._renderedNodeType = null;\n      this._renderedComponent = null;\n      this._instance = null;\n    }\n\n    // Reset pending fields\n    // Even if this component is scheduled for another update in ReactUpdates,\n    // it would still be ignored because these fields are reset.\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    this._pendingCallbacks = null;\n    this._pendingElement = null;\n\n    // These fields do not really need to be reset since this object is no\n    // longer accessible.\n    this._context = null;\n    this._rootNodeID = 0;\n    this._topLevelWrapper = null;\n\n    // Delete the reference from the instance to this internal representation\n    // which allow the internals to be properly cleaned up even if the user\n    // leaks a reference to the public instance.\n    ReactInstanceMap.remove(inst);\n\n    // Some existing components rely on inst.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: inst.props = null;\n    // TODO: inst.state = null;\n    // TODO: inst.context = null;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _maskContext: function (context) {\n    var Component = this._currentElement.type;\n    var contextTypes = Component.contextTypes;\n    if (!contextTypes) {\n      return emptyObject;\n    }\n    var maskedContext = {};\n    for (var contextName in contextTypes) {\n      maskedContext[contextName] = context[contextName];\n    }\n    return maskedContext;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function (context) {\n    var maskedContext = this._maskContext(context);\n    if (process.env.NODE_ENV !== 'production') {\n      var Component = this._currentElement.type;\n      if (Component.contextTypes) {\n        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');\n      }\n    }\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _processChildContext: function (currentContext) {\n    var Component = this._currentElement.type;\n    var inst = this._instance;\n    var childContext;\n\n    if (inst.getChildContext) {\n      if (process.env.NODE_ENV !== 'production') {\n        ReactInstrumentation.debugTool.onBeginProcessingChildContext();\n        try {\n          childContext = inst.getChildContext();\n        } finally {\n          ReactInstrumentation.debugTool.onEndProcessingChildContext();\n        }\n      } else {\n        childContext = inst.getChildContext();\n      }\n    }\n\n    if (childContext) {\n      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;\n      if (process.env.NODE_ENV !== 'production') {\n        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');\n      }\n      for (var name in childContext) {\n        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;\n      }\n      return _assign({}, currentContext, childContext);\n    }\n    return currentContext;\n  },\n\n  /**\n   * Assert that the context types are valid\n   *\n   * @param {object} typeSpecs Map of context field to a ReactPropType\n   * @param {object} values Runtime values that need to be type-checked\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkContextTypes: function (typeSpecs, values, location) {\n    if (process.env.NODE_ENV !== 'production') {\n      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);\n    }\n  },\n\n  receiveComponent: function (nextElement, transaction, nextContext) {\n    var prevElement = this._currentElement;\n    var prevContext = this._context;\n\n    this._pendingElement = null;\n\n    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);\n  },\n\n  /**\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (transaction) {\n    if (this._pendingElement != null) {\n      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);\n    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {\n      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);\n    } else {\n      this._updateBatchNumber = null;\n    }\n  },\n\n  /**\n   * Perform an update to a mounted component. The componentWillReceiveProps and\n   * shouldComponentUpdate methods are called, then (assuming the update isn't\n   * skipped) the remaining update lifecycle methods are called and the DOM\n   * representation is updated.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevParentElement\n   * @param {ReactElement} nextParentElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {\n    var inst = this._instance;\n    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;\n\n    var willReceive = false;\n    var nextContext;\n\n    // Determine if the context has changed or not\n    if (this._context === nextUnmaskedContext) {\n      nextContext = inst.context;\n    } else {\n      nextContext = this._processContext(nextUnmaskedContext);\n      willReceive = true;\n    }\n\n    var prevProps = prevParentElement.props;\n    var nextProps = nextParentElement.props;\n\n    // Not a simple state update but a props update\n    if (prevParentElement !== nextParentElement) {\n      willReceive = true;\n    }\n\n    // An update here will schedule an update but immediately set\n    // _pendingStateQueue which will ensure that any state updates gets\n    // immediately reconciled instead of waiting for the next batch.\n    if (willReceive && inst.componentWillReceiveProps) {\n      if (process.env.NODE_ENV !== 'production') {\n        measureLifeCyclePerf(function () {\n          return inst.componentWillReceiveProps(nextProps, nextContext);\n        }, this._debugID, 'componentWillReceiveProps');\n      } else {\n        inst.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    var nextState = this._processPendingState(nextProps, nextContext);\n    var shouldUpdate = true;\n\n    if (!this._pendingForceUpdate) {\n      if (inst.shouldComponentUpdate) {\n        if (process.env.NODE_ENV !== 'production') {\n          shouldUpdate = measureLifeCyclePerf(function () {\n            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n          }, this._debugID, 'shouldComponentUpdate');\n        } else {\n          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n        }\n      } else {\n        if (this._compositeType === CompositeTypes.PureClass) {\n          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);\n        }\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;\n    }\n\n    this._updateBatchNumber = null;\n    if (shouldUpdate) {\n      this._pendingForceUpdate = false;\n      // Will set `this.props`, `this.state` and `this.context`.\n      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state but we shortcut the rest of the update.\n      this._currentElement = nextParentElement;\n      this._context = nextUnmaskedContext;\n      inst.props = nextProps;\n      inst.state = nextState;\n      inst.context = nextContext;\n    }\n  },\n\n  _processPendingState: function (props, context) {\n    var inst = this._instance;\n    var queue = this._pendingStateQueue;\n    var replace = this._pendingReplaceState;\n    this._pendingReplaceState = false;\n    this._pendingStateQueue = null;\n\n    if (!queue) {\n      return inst.state;\n    }\n\n    if (replace && queue.length === 1) {\n      return queue[0];\n    }\n\n    var nextState = _assign({}, replace ? queue[0] : inst.state);\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {\n      var partial = queue[i];\n      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);\n    }\n\n    return nextState;\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactElement} nextElement Next element\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {?object} unmaskedContext\n   * @private\n   */\n  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {\n    var _this2 = this;\n\n    var inst = this._instance;\n\n    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);\n    var prevProps;\n    var prevState;\n    var prevContext;\n    if (hasComponentDidUpdate) {\n      prevProps = inst.props;\n      prevState = inst.state;\n      prevContext = inst.context;\n    }\n\n    if (inst.componentWillUpdate) {\n      if (process.env.NODE_ENV !== 'production') {\n        measureLifeCyclePerf(function () {\n          return inst.componentWillUpdate(nextProps, nextState, nextContext);\n        }, this._debugID, 'componentWillUpdate');\n      } else {\n        inst.componentWillUpdate(nextProps, nextState, nextContext);\n      }\n    }\n\n    this._currentElement = nextElement;\n    this._context = unmaskedContext;\n    inst.props = nextProps;\n    inst.state = nextState;\n    inst.context = nextContext;\n\n    this._updateRenderedComponent(transaction, unmaskedContext);\n\n    if (hasComponentDidUpdate) {\n      if (process.env.NODE_ENV !== 'production') {\n        transaction.getReactMountReady().enqueue(function () {\n          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');\n        });\n      } else {\n        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);\n      }\n    }\n  },\n\n  /**\n   * Call the component's `render` method and update the DOM accordingly.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _updateRenderedComponent: function (transaction, context) {\n    var prevComponentInstance = this._renderedComponent;\n    var prevRenderedElement = prevComponentInstance._currentElement;\n    var nextRenderedElement = this._renderValidatedComponent();\n\n    var debugID = 0;\n    if (process.env.NODE_ENV !== 'production') {\n      debugID = this._debugID;\n    }\n\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {\n      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));\n    } else {\n      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);\n      ReactReconciler.unmountComponent(prevComponentInstance, false);\n\n      var nodeType = ReactNodeTypes.getType(nextRenderedElement);\n      this._renderedNodeType = nodeType;\n      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */\n      );\n      this._renderedComponent = child;\n\n      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (debugID !== 0) {\n          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];\n          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);\n        }\n      }\n\n      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);\n    }\n  },\n\n  /**\n   * Overridden in shallow rendering.\n   *\n   * @protected\n   */\n  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {\n    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);\n  },\n\n  /**\n   * @protected\n   */\n  _renderValidatedComponentWithoutOwnerOrContext: function () {\n    var inst = this._instance;\n    var renderedElement;\n\n    if (process.env.NODE_ENV !== 'production') {\n      renderedElement = measureLifeCyclePerf(function () {\n        return inst.render();\n      }, this._debugID, 'render');\n    } else {\n      renderedElement = inst.render();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // We allow auto-mocks to proceed as if they're returning null.\n      if (renderedElement === undefined && inst.render._isMockFunction) {\n        // This is probably bad practice. Consider warning here and\n        // deprecating this convenience.\n        renderedElement = null;\n      }\n    }\n\n    return renderedElement;\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: function () {\n    var renderedElement;\n    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {\n      ReactCurrentOwner.current = this;\n      try {\n        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();\n      } finally {\n        ReactCurrentOwner.current = null;\n      }\n    } else {\n      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();\n    }\n    !(\n    // TODO: An `isValidNode` function would probably be more appropriate\n    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;\n\n    return renderedElement;\n  },\n\n  /**\n   * Lazily allocates the refs object and stores `component` as `ref`.\n   *\n   * @param {string} ref Reference name.\n   * @param {component} component Component to store as `ref`.\n   * @final\n   * @private\n   */\n  attachRef: function (ref, component) {\n    var inst = this.getPublicInstance();\n    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;\n    var publicComponentInstance = component.getPublicInstance();\n    if (process.env.NODE_ENV !== 'production') {\n      var componentName = component && component.getName ? component.getName() : 'a component';\n      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref \"%s\" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;\n    }\n    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;\n    refs[ref] = publicComponentInstance;\n  },\n\n  /**\n   * Detaches a reference name.\n   *\n   * @param {string} ref Name to dereference.\n   * @final\n   * @private\n   */\n  detachRef: function (ref) {\n    var refs = this.getPublicInstance().refs;\n    delete refs[ref];\n  },\n\n  /**\n   * Get a text description of the component that can be used to identify it\n   * in error messages.\n   * @return {string} The name or null.\n   * @internal\n   */\n  getName: function () {\n    var type = this._currentElement.type;\n    var constructor = this._instance && this._instance.constructor;\n    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;\n  },\n\n  /**\n   * Get the publicly accessible representation of this component - i.e. what\n   * is exposed by refs and returned by render. Can be null for stateless\n   * components.\n   *\n   * @return {ReactComponent} the public component instance.\n   * @internal\n   */\n  getPublicInstance: function () {\n    var inst = this._instance;\n    if (this._compositeType === CompositeTypes.StatelessFunctional) {\n      return null;\n    }\n    return inst;\n  },\n\n  // Stub\n  _instantiateReactComponent: null\n};\n\nmodule.exports = ReactCompositeComponent;"]},"metadata":{},"sourceType":"script"}