{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\n\nvar DOMLazyTree = require('./DOMLazyTree');\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar validateDOMNesting = require('./validateDOMNesting');\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings between comment nodes so that they\n * can undergo the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\n\n\nvar ReactDOMTextComponent = function (text) {\n  // TODO: This is really a ReactText (ReactNode), not a ReactElement\n  this._currentElement = text;\n  this._stringText = '' + text; // ReactDOMComponentTree uses these:\n\n  this._hostNode = null;\n  this._hostParent = null; // Properties\n\n  this._domID = 0;\n  this._mountIndex = 0;\n  this._closingComment = null;\n  this._commentNodes = null;\n};\n\n_assign(ReactDOMTextComponent.prototype, {\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    if (process.env.NODE_ENV !== 'production') {\n      var parentInfo;\n\n      if (hostParent != null) {\n        parentInfo = hostParent._ancestorInfo;\n      } else if (hostContainerInfo != null) {\n        parentInfo = hostContainerInfo._ancestorInfo;\n      }\n\n      if (parentInfo) {\n        // parentInfo should always be present except for the top-level\n        // component when server rendering\n        validateDOMNesting(null, this._stringText, this, parentInfo);\n      }\n    }\n\n    var domID = hostContainerInfo._idCounter++;\n    var openingValue = ' react-text: ' + domID + ' ';\n    var closingValue = ' /react-text ';\n    this._domID = domID;\n    this._hostParent = hostParent;\n\n    if (transaction.useCreateElement) {\n      var ownerDocument = hostContainerInfo._ownerDocument;\n      var openingComment = ownerDocument.createComment(openingValue);\n      var closingComment = ownerDocument.createComment(closingValue);\n      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));\n\n      if (this._stringText) {\n        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));\n      }\n\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));\n      ReactDOMComponentTree.precacheNode(this, openingComment);\n      this._closingComment = closingComment;\n      return lazyTree;\n    } else {\n      var escapedText = escapeTextContentForBrowser(this._stringText);\n\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd wrap this between comment nodes for the reasons stated\n        // above, but since this is a situation where React won't take over\n        // (static pages), we can simply return the text as it is.\n        return escapedText;\n      }\n\n      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';\n    }\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        var commentNodes = this.getHostNode();\n        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);\n      }\n    }\n  },\n  getHostNode: function () {\n    var hostNode = this._commentNodes;\n\n    if (hostNode) {\n      return hostNode;\n    }\n\n    if (!this._closingComment) {\n      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);\n      var node = openingComment.nextSibling;\n\n      while (true) {\n        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;\n\n        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {\n          this._closingComment = node;\n          break;\n        }\n\n        node = node.nextSibling;\n      }\n    }\n\n    hostNode = [this._hostNode, this._closingComment];\n    this._commentNodes = hostNode;\n    return hostNode;\n  },\n  unmountComponent: function () {\n    this._closingComment = null;\n    this._commentNodes = null;\n    ReactDOMComponentTree.uncacheNode(this);\n  }\n});\n\nmodule.exports = ReactDOMTextComponent;","map":{"version":3,"sources":["/mnt/c/Users/Harry-PC/Documents/ProgrammingProjects/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/ReactDOMTextComponent.js"],"names":["_prodInvariant","require","_assign","DOMChildrenOperations","DOMLazyTree","ReactDOMComponentTree","escapeTextContentForBrowser","invariant","validateDOMNesting","ReactDOMTextComponent","text","_currentElement","_stringText","_hostNode","_hostParent","_domID","_mountIndex","_closingComment","_commentNodes","prototype","mountComponent","transaction","hostParent","hostContainerInfo","context","process","env","NODE_ENV","parentInfo","_ancestorInfo","domID","_idCounter","openingValue","closingValue","useCreateElement","ownerDocument","_ownerDocument","openingComment","createComment","closingComment","lazyTree","createDocumentFragment","queueChild","createTextNode","precacheNode","escapedText","renderToStaticMarkup","receiveComponent","nextText","nextStringText","commentNodes","getHostNode","replaceDelimitedText","hostNode","getNodeFromInstance","node","nextSibling","nodeType","nodeValue","unmountComponent","uncacheNode","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar invariant = require('fbjs/lib/invariant');\nvar validateDOMNesting = require('./validateDOMNesting');\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings between comment nodes so that they\n * can undergo the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactDOMTextComponent = function (text) {\n  // TODO: This is really a ReactText (ReactNode), not a ReactElement\n  this._currentElement = text;\n  this._stringText = '' + text;\n  // ReactDOMComponentTree uses these:\n  this._hostNode = null;\n  this._hostParent = null;\n\n  // Properties\n  this._domID = 0;\n  this._mountIndex = 0;\n  this._closingComment = null;\n  this._commentNodes = null;\n};\n\n_assign(ReactDOMTextComponent.prototype, {\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    if (process.env.NODE_ENV !== 'production') {\n      var parentInfo;\n      if (hostParent != null) {\n        parentInfo = hostParent._ancestorInfo;\n      } else if (hostContainerInfo != null) {\n        parentInfo = hostContainerInfo._ancestorInfo;\n      }\n      if (parentInfo) {\n        // parentInfo should always be present except for the top-level\n        // component when server rendering\n        validateDOMNesting(null, this._stringText, this, parentInfo);\n      }\n    }\n\n    var domID = hostContainerInfo._idCounter++;\n    var openingValue = ' react-text: ' + domID + ' ';\n    var closingValue = ' /react-text ';\n    this._domID = domID;\n    this._hostParent = hostParent;\n    if (transaction.useCreateElement) {\n      var ownerDocument = hostContainerInfo._ownerDocument;\n      var openingComment = ownerDocument.createComment(openingValue);\n      var closingComment = ownerDocument.createComment(closingValue);\n      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));\n      if (this._stringText) {\n        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));\n      }\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));\n      ReactDOMComponentTree.precacheNode(this, openingComment);\n      this._closingComment = closingComment;\n      return lazyTree;\n    } else {\n      var escapedText = escapeTextContentForBrowser(this._stringText);\n\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd wrap this between comment nodes for the reasons stated\n        // above, but since this is a situation where React won't take over\n        // (static pages), we can simply return the text as it is.\n        return escapedText;\n      }\n\n      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';\n    }\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        var commentNodes = this.getHostNode();\n        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);\n      }\n    }\n  },\n\n  getHostNode: function () {\n    var hostNode = this._commentNodes;\n    if (hostNode) {\n      return hostNode;\n    }\n    if (!this._closingComment) {\n      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);\n      var node = openingComment.nextSibling;\n      while (true) {\n        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;\n        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {\n          this._closingComment = node;\n          break;\n        }\n        node = node.nextSibling;\n      }\n    }\n    hostNode = [this._hostNode, this._closingComment];\n    this._commentNodes = hostNode;\n    return hostNode;\n  },\n\n  unmountComponent: function () {\n    this._closingComment = null;\n    this._commentNodes = null;\n    ReactDOMComponentTree.uncacheNode(this);\n  }\n});\n\nmodule.exports = ReactDOMTextComponent;"]},"metadata":{},"sourceType":"script"}