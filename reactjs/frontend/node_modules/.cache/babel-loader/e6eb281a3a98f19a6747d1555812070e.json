{"ast":null,"code":"'use strict';\n\nvar base64_url_decode = require('./base64_url_decode');\n\nfunction InvalidTokenError(message) {\n  this.message = message;\n}\n\nInvalidTokenError.prototype = new Error();\nInvalidTokenError.prototype.name = 'InvalidTokenError';\n\nmodule.exports = function (token, options) {\n  if (typeof token !== 'string') {\n    throw new InvalidTokenError('Invalid token specified');\n  }\n\n  options = options || {};\n  var pos = options.header === true ? 0 : 1;\n\n  try {\n    return JSON.parse(base64_url_decode(token.split('.')[pos]));\n  } catch (e) {\n    throw new InvalidTokenError('Invalid token specified: ' + e.message);\n  }\n};\n\nmodule.exports.InvalidTokenError = InvalidTokenError;","map":{"version":3,"sources":["/home/iiradia/EasyA/reactjs/frontend/node_modules/jwt-decode/lib/index.js"],"names":["base64_url_decode","require","InvalidTokenError","message","prototype","Error","name","module","exports","token","options","pos","header","JSON","parse","split","e"],"mappings":"AAAA;;AAEA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,qBAAD,CAA/B;;AAEA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AAClC,OAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDD,iBAAiB,CAACE,SAAlB,GAA8B,IAAIC,KAAJ,EAA9B;AACAH,iBAAiB,CAACE,SAAlB,CAA4BE,IAA5B,GAAmC,mBAAnC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAgBC,OAAhB,EAAyB;AACxC,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAM,IAAIP,iBAAJ,CAAsB,yBAAtB,CAAN;AACD;;AAEDQ,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIC,GAAG,GAAGD,OAAO,CAACE,MAAR,KAAmB,IAAnB,GAA0B,CAA1B,GAA8B,CAAxC;;AACA,MAAI;AACF,WAAOC,IAAI,CAACC,KAAL,CAAWd,iBAAiB,CAACS,KAAK,CAACM,KAAN,CAAY,GAAZ,EAAiBJ,GAAjB,CAAD,CAA5B,CAAP;AACD,GAFD,CAEE,OAAOK,CAAP,EAAU;AACV,UAAM,IAAId,iBAAJ,CAAsB,8BAA8Bc,CAAC,CAACb,OAAtD,CAAN;AACD;AACF,CAZD;;AAcAI,MAAM,CAACC,OAAP,CAAeN,iBAAf,GAAmCA,iBAAnC","sourcesContent":["'use strict';\n\nvar base64_url_decode = require('./base64_url_decode');\n\nfunction InvalidTokenError(message) {\n  this.message = message;\n}\n\nInvalidTokenError.prototype = new Error();\nInvalidTokenError.prototype.name = 'InvalidTokenError';\n\nmodule.exports = function (token,options) {\n  if (typeof token !== 'string') {\n    throw new InvalidTokenError('Invalid token specified');\n  }\n\n  options = options || {};\n  var pos = options.header === true ? 0 : 1;\n  try {\n    return JSON.parse(base64_url_decode(token.split('.')[pos]));\n  } catch (e) {\n    throw new InvalidTokenError('Invalid token specified: ' + e.message);\n  }\n};\n\nmodule.exports.InvalidTokenError = InvalidTokenError;\n"]},"metadata":{},"sourceType":"script"}