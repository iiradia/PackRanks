{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar getEventCharCode = require('./getEventCharCode');\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\n\n\nvar normalizeKey = {\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Left: 'ArrowLeft',\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Del: 'Delete',\n  Win: 'OS',\n  Menu: 'ContextMenu',\n  Apps: 'ContextMenu',\n  Scroll: 'ScrollLock',\n  MozPrintableKey: 'Unidentified'\n};\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\n\nvar translateToKey = {\n  8: 'Backspace',\n  9: 'Tab',\n  12: 'Clear',\n  13: 'Enter',\n  16: 'Shift',\n  17: 'Control',\n  18: 'Alt',\n  19: 'Pause',\n  20: 'CapsLock',\n  27: 'Escape',\n  32: ' ',\n  33: 'PageUp',\n  34: 'PageDown',\n  35: 'End',\n  36: 'Home',\n  37: 'ArrowLeft',\n  38: 'ArrowUp',\n  39: 'ArrowRight',\n  40: 'ArrowDown',\n  45: 'Insert',\n  46: 'Delete',\n  112: 'F1',\n  113: 'F2',\n  114: 'F3',\n  115: 'F4',\n  116: 'F5',\n  117: 'F6',\n  118: 'F7',\n  119: 'F8',\n  120: 'F9',\n  121: 'F10',\n  122: 'F11',\n  123: 'F12',\n  144: 'NumLock',\n  145: 'ScrollLock',\n  224: 'Meta'\n};\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\n\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  } // Browser does not implement `key`, polyfill as much of it as we can.\n\n\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n\n  return '';\n}\n\nmodule.exports = getEventKey;","map":{"version":3,"sources":["/home/iiradia/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/getEventKey.js"],"names":["getEventCharCode","require","normalizeKey","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","translateToKey","getEventKey","nativeEvent","key","type","charCode","String","fromCharCode","keyCode","module","exports"],"mappings":"AAAA;;;;;;;AAQA;;AAEA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA9B;AAEA;;;;;;AAIA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,GAAG,EAAE,QADY;AAEjBC,EAAAA,QAAQ,EAAE,GAFO;AAGjBC,EAAAA,IAAI,EAAE,WAHW;AAIjBC,EAAAA,EAAE,EAAE,SAJa;AAKjBC,EAAAA,KAAK,EAAE,YALU;AAMjBC,EAAAA,IAAI,EAAE,WANW;AAOjBC,EAAAA,GAAG,EAAE,QAPY;AAQjBC,EAAAA,GAAG,EAAE,IARY;AASjBC,EAAAA,IAAI,EAAE,aATW;AAUjBC,EAAAA,IAAI,EAAE,aAVW;AAWjBC,EAAAA,MAAM,EAAE,YAXS;AAYjBC,EAAAA,eAAe,EAAE;AAZA,CAAnB;AAeA;;;;;;AAKA,IAAIC,cAAc,GAAG;AACnB,KAAG,WADgB;AAEnB,KAAG,KAFgB;AAGnB,MAAI,OAHe;AAInB,MAAI,OAJe;AAKnB,MAAI,OALe;AAMnB,MAAI,SANe;AAOnB,MAAI,KAPe;AAQnB,MAAI,OARe;AASnB,MAAI,UATe;AAUnB,MAAI,QAVe;AAWnB,MAAI,GAXe;AAYnB,MAAI,QAZe;AAanB,MAAI,UAbe;AAcnB,MAAI,KAde;AAenB,MAAI,MAfe;AAgBnB,MAAI,WAhBe;AAiBnB,MAAI,SAjBe;AAkBnB,MAAI,YAlBe;AAmBnB,MAAI,WAnBe;AAoBnB,MAAI,QApBe;AAqBnB,MAAI,QArBe;AAsBnB,OAAK,IAtBc;AAuBnB,OAAK,IAvBc;AAwBnB,OAAK,IAxBc;AAyBnB,OAAK,IAzBc;AA0BnB,OAAK,IA1Bc;AA2BnB,OAAK,IA3Bc;AA4BnB,OAAK,IA5Bc;AA6BnB,OAAK,IA7Bc;AA8BnB,OAAK,IA9Bc;AA+BnB,OAAK,KA/Bc;AAgCnB,OAAK,KAhCc;AAiCnB,OAAK,KAjCc;AAkCnB,OAAK,SAlCc;AAmCnB,OAAK,YAnCc;AAoCnB,OAAK;AApCc,CAArB;AAuCA;;;;;AAIA,SAASC,WAAT,CAAqBC,WAArB,EAAkC;AAChC,MAAIA,WAAW,CAACC,GAAhB,EAAqB;AACnB;AACA;AAEA;AACA;AACA,QAAIA,GAAG,GAAGhB,YAAY,CAACe,WAAW,CAACC,GAAb,CAAZ,IAAiCD,WAAW,CAACC,GAAvD;;AACA,QAAIA,GAAG,KAAK,cAAZ,EAA4B;AAC1B,aAAOA,GAAP;AACD;AACF,GAX+B,CAahC;;;AACA,MAAID,WAAW,CAACE,IAAZ,KAAqB,UAAzB,EAAqC;AACnC,QAAIC,QAAQ,GAAGpB,gBAAgB,CAACiB,WAAD,CAA/B,CADmC,CAGnC;AACA;;AACA,WAAOG,QAAQ,KAAK,EAAb,GAAkB,OAAlB,GAA4BC,MAAM,CAACC,YAAP,CAAoBF,QAApB,CAAnC;AACD;;AACD,MAAIH,WAAW,CAACE,IAAZ,KAAqB,SAArB,IAAkCF,WAAW,CAACE,IAAZ,KAAqB,OAA3D,EAAoE;AAClE;AACA;AACA,WAAOJ,cAAc,CAACE,WAAW,CAACM,OAAb,CAAd,IAAuC,cAA9C;AACD;;AACD,SAAO,EAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBT,WAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar getEventCharCode = require('./getEventCharCode');\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey = {\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Left: 'ArrowLeft',\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Del: 'Delete',\n  Win: 'OS',\n  Menu: 'ContextMenu',\n  Apps: 'ContextMenu',\n  Scroll: 'ScrollLock',\n  MozPrintableKey: 'Unidentified'\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar translateToKey = {\n  8: 'Backspace',\n  9: 'Tab',\n  12: 'Clear',\n  13: 'Enter',\n  16: 'Shift',\n  17: 'Control',\n  18: 'Alt',\n  19: 'Pause',\n  20: 'CapsLock',\n  27: 'Escape',\n  32: ' ',\n  33: 'PageUp',\n  34: 'PageDown',\n  35: 'End',\n  36: 'Home',\n  37: 'ArrowLeft',\n  38: 'ArrowUp',\n  39: 'ArrowRight',\n  40: 'ArrowDown',\n  45: 'Insert',\n  46: 'Delete',\n  112: 'F1',\n  113: 'F2',\n  114: 'F3',\n  115: 'F4',\n  116: 'F5',\n  117: 'F6',\n  118: 'F7',\n  119: 'F8',\n  120: 'F9',\n  121: 'F10',\n  122: 'F11',\n  123: 'F12',\n  144: 'NumLock',\n  145: 'ScrollLock',\n  224: 'Meta'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\nmodule.exports = getEventKey;"]},"metadata":{},"sourceType":"script"}