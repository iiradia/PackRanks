{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar React = require('react/lib/React');\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar ReactDOMSelect = require('./ReactDOMSelect');\n\nvar warning = require('fbjs/lib/warning');\n\nvar didWarnInvalidOptionChildren = false;\n\nfunction flattenChildren(children) {\n  var content = ''; // Flatten children and warn if they aren't strings or numbers;\n  // invalid types are ignored.\n\n  React.Children.forEach(children, function (child) {\n    if (child == null) {\n      return;\n    }\n\n    if (typeof child === 'string' || typeof child === 'number') {\n      content += child;\n    } else if (!didWarnInvalidOptionChildren) {\n      didWarnInvalidOptionChildren = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;\n    }\n  });\n  return content;\n}\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\n\n\nvar ReactDOMOption = {\n  mountWrapper: function (inst, props, hostParent) {\n    // TODO (yungsters): Remove support for `selected` in <option>.\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;\n    } // Look up whether this option is 'selected'\n\n\n    var selectValue = null;\n\n    if (hostParent != null) {\n      var selectParent = hostParent;\n\n      if (selectParent._tag === 'optgroup') {\n        selectParent = selectParent._hostParent;\n      }\n\n      if (selectParent != null && selectParent._tag === 'select') {\n        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);\n      }\n    } // If the value is null (e.g., no specified value or after initial mount)\n    // or missing (e.g., for <datalist>), we don't change props.selected\n\n\n    var selected = null;\n\n    if (selectValue != null) {\n      var value;\n\n      if (props.value != null) {\n        value = props.value + '';\n      } else {\n        value = flattenChildren(props.children);\n      }\n\n      selected = false;\n\n      if (Array.isArray(selectValue)) {\n        // multiple\n        for (var i = 0; i < selectValue.length; i++) {\n          if ('' + selectValue[i] === value) {\n            selected = true;\n            break;\n          }\n        }\n      } else {\n        selected = '' + selectValue === value;\n      }\n    }\n\n    inst._wrapperState = {\n      selected: selected\n    };\n  },\n  postMountWrapper: function (inst) {\n    // value=\"\" should make a value attribute (#6219)\n    var props = inst._currentElement.props;\n\n    if (props.value != null) {\n      var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n      node.setAttribute('value', props.value);\n    }\n  },\n  getHostProps: function (inst, props) {\n    var hostProps = _assign({\n      selected: undefined,\n      children: undefined\n    }, props); // Read state only from initial mount because <select> updates value\n    // manually; we need the initial state only for server rendering\n\n\n    if (inst._wrapperState.selected != null) {\n      hostProps.selected = inst._wrapperState.selected;\n    }\n\n    var content = flattenChildren(props.children);\n\n    if (content) {\n      hostProps.children = content;\n    }\n\n    return hostProps;\n  }\n};\nmodule.exports = ReactDOMOption;","map":{"version":3,"sources":["/home/iiradia/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/ReactDOMOption.js"],"names":["_assign","require","React","ReactDOMComponentTree","ReactDOMSelect","warning","didWarnInvalidOptionChildren","flattenChildren","children","content","Children","forEach","child","process","env","NODE_ENV","ReactDOMOption","mountWrapper","inst","props","hostParent","selected","selectValue","selectParent","_tag","_hostParent","getSelectValueContext","value","Array","isArray","i","length","_wrapperState","postMountWrapper","_currentElement","node","getNodeFromInstance","setAttribute","getHostProps","hostProps","undefined","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar React = require('react/lib/React');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactDOMSelect = require('./ReactDOMSelect');\n\nvar warning = require('fbjs/lib/warning');\nvar didWarnInvalidOptionChildren = false;\n\nfunction flattenChildren(children) {\n  var content = '';\n\n  // Flatten children and warn if they aren't strings or numbers;\n  // invalid types are ignored.\n  React.Children.forEach(children, function (child) {\n    if (child == null) {\n      return;\n    }\n    if (typeof child === 'string' || typeof child === 'number') {\n      content += child;\n    } else if (!didWarnInvalidOptionChildren) {\n      didWarnInvalidOptionChildren = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;\n    }\n  });\n\n  return content;\n}\n\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\nvar ReactDOMOption = {\n  mountWrapper: function (inst, props, hostParent) {\n    // TODO (yungsters): Remove support for `selected` in <option>.\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;\n    }\n\n    // Look up whether this option is 'selected'\n    var selectValue = null;\n    if (hostParent != null) {\n      var selectParent = hostParent;\n\n      if (selectParent._tag === 'optgroup') {\n        selectParent = selectParent._hostParent;\n      }\n\n      if (selectParent != null && selectParent._tag === 'select') {\n        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);\n      }\n    }\n\n    // If the value is null (e.g., no specified value or after initial mount)\n    // or missing (e.g., for <datalist>), we don't change props.selected\n    var selected = null;\n    if (selectValue != null) {\n      var value;\n      if (props.value != null) {\n        value = props.value + '';\n      } else {\n        value = flattenChildren(props.children);\n      }\n      selected = false;\n      if (Array.isArray(selectValue)) {\n        // multiple\n        for (var i = 0; i < selectValue.length; i++) {\n          if ('' + selectValue[i] === value) {\n            selected = true;\n            break;\n          }\n        }\n      } else {\n        selected = '' + selectValue === value;\n      }\n    }\n\n    inst._wrapperState = { selected: selected };\n  },\n\n  postMountWrapper: function (inst) {\n    // value=\"\" should make a value attribute (#6219)\n    var props = inst._currentElement.props;\n    if (props.value != null) {\n      var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n      node.setAttribute('value', props.value);\n    }\n  },\n\n  getHostProps: function (inst, props) {\n    var hostProps = _assign({ selected: undefined, children: undefined }, props);\n\n    // Read state only from initial mount because <select> updates value\n    // manually; we need the initial state only for server rendering\n    if (inst._wrapperState.selected != null) {\n      hostProps.selected = inst._wrapperState.selected;\n    }\n\n    var content = flattenChildren(props.children);\n\n    if (content) {\n      hostProps.children = content;\n    }\n\n    return hostProps;\n  }\n};\n\nmodule.exports = ReactDOMOption;"]},"metadata":{},"sourceType":"script"}