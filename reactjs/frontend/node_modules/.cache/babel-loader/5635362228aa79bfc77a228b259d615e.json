{"ast":null,"code":"var _jsxFileName = \"/home/iiradia/EasyA/reactjs/frontend/src/components/Home/Dept.jsx\";\nimport React from 'react';\nimport Select from 'react-select';\nimport ReactDOM from 'react-dom';\nimport Table from \"./Table\";\nimport './css/dept.css';\nimport CreatableSelect from 'react-select/lib/Creatable';\nimport './css/courselevel.css';\nimport { Button } from \"react-bootstrap\";\n\nclass Dept extends React.Component {\n  constructor() {\n    super();\n    this.getDepts = this.getDepts.bind(this);\n    this.DeptList = this.DeptList.bind(this);\n    this.courseTable = this.courseTable.bind(this);\n    this.parseData = this.parseData.bind(this);\n    this.state = {\n      dept_list: null,\n      courses: null,\n      select_value: null,\n      level_min: null,\n      level_max: null,\n      loading: false,\n      inputValueMin: \"\",\n      //new\n      inputValueMax: \"\",\n      //new\n      numCourses_value: null\n    };\n    /* Call depts function */\n\n    this.getDepts();\n  }\n\n  parseData(data) {\n    console.log(data);\n\n    if (data.length > 0) {\n      if (data.length === 1 && data[0] === \"Invalid\") {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 33\n          }\n        }, \"Level minimum cannot be greater than maximum.\"), document.getElementById('id_dept_table'));\n      } else {\n        this.setState({\n          courses: data\n        }, () => ReactDOM.render( /*#__PURE__*/React.createElement(Table, {\n          data: this.state.courses,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 43\n          }\n        }), document.getElementById('id_dept_table')));\n      }\n    } else {\n      let minimum = this.state.level_min;\n      let maximum = this.state.level_max;\n\n      if (minimum === \"ANY\") {\n        minimum = \"100\";\n      }\n\n      if (maximum === \"ANY\") {\n        maximum = \"899\";\n      }\n\n      ReactDOM.render( /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      }, \"There is no course in \", this.state.select_value, \" offered during \", this.props.whichterm, \" between level \", minimum, \" and \", maximum, \".\"), document.getElementById('id_dept_table'));\n    }\n  }\n\n  courseTable() {\n    const Dept = this;\n    let dept_url = \"http://localhost:5000/dept\";\n    this.setState({\n      loading: true\n    }); //new\n\n    /* Quadruple if-block to call using correct states */\n\n    if (!this.state.level_max && !this.state.level_min) {\n      //console.log(\"setting inputValueMax state\")\n      fetch(dept_url, {\n        method: \"GET\",\n        headers: {\n          \"Dept\": this.state.select_value,\n          \"term\": this.props.whichterm,\n          \"level_min\": this.state.inputValueMin,\n          \"level_max\": this.state.inputValueMax,\n          \"num_courses\": this.state.numCourses_value\n        }\n      }).then(response => response.json()).then( //Ternary operator that checks whether course is offered or not.\n      data => this.parseData(data));\n    } else if (!this.state.level_min) {\n      fetch(dept_url, {\n        method: \"GET\",\n        headers: {\n          \"Dept\": this.state.select_value,\n          \"term\": this.props.whichterm,\n          \"level_min\": this.state.inputValueMin,\n          \"level_max\": this.state.level_max,\n          \"num_courses\": this.state.numCourses_value\n        }\n      }).then(response => response.json()).then( //Ternary operator that checks whether course is offered or not.\n      data => this.parseData(data));\n    } else if (!this.state.level_max) {\n      fetch(dept_url, {\n        method: \"GET\",\n        headers: {\n          \"Dept\": this.state.select_value,\n          \"term\": this.props.whichterm,\n          \"level_min\": this.state.level_min,\n          \"level_max\": this.state.inputValueMax,\n          \"num_courses\": this.state.numCourses_value\n        }\n      }).then(response => response.json()).then( //Ternary operator that checks whether course is offered or not.\n      data => this.parseData(data));\n    } else {\n      fetch(dept_url, {\n        method: \"GET\",\n        headers: {\n          \"Dept\": this.state.select_value,\n          \"term\": this.props.whichterm,\n          \"level_min\": this.state.level_min,\n          \"level_max\": this.state.level_max\n        }\n      }).then(response => response.json()).then( //Ternary operator that checks whether course is offered or not.\n      data => this.parseData(data));\n    } //new\n\n  }\n  /* Get List of departments and render select component */\n\n\n  getDepts() {\n    const Dept = this;\n    let url = \"http://localhost:5000/getdepts\"; //ToDo: Load dynamically, only bring in 20 depts at a time in order to save time with Flask request \n\n    return fetch(url, {\n      method: \"GET\"\n    }).then(response => response.json() // keep here (maybe)\n    ).then(data => {\n      this.setState({\n        dept_list: data\n      }, () => ReactDOM.render(this.DeptList(), document.getElementById('deptlist')));\n    });\n  }\n  /* Return select component with list of departments */\n\n\n  DeptList() {\n    const departments = this.state.dept_list;\n    const deptOptions = departments.dept.map(dept => ({\n      label: dept\n    }));\n    const deptValues = departments.dept_code.map(value_i => ({\n      value: value_i\n    }));\n    const deptFinal = [];\n\n    for (var i = 0; i < deptOptions.length; i++) {\n      deptFinal[i] = {\n        label: deptOptions[i].label,\n        value: deptValues[i].value\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"400px\",\n        margin: \"0 auto\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      className: \"deptSelect\",\n      id: \"dept_list_select\",\n      options: deptFinal,\n      onChange: dept => this.setState({\n        select_value: dept.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n  //new\n  handleInputChangeMin(inputValueMin, action) {\n    if (action.action !== \"input-blur\" && action.action !== \"menu-close\") {\n      console.log({\n        inputValueMin\n      });\n      this.setState({\n        inputValueMin\n      });\n    }\n  }\n\n  handleInputChangeMax(inputValueMax, action) {\n    if (action.action !== \"input-blur\" && action.action !== \"menu-close\") {\n      console.log({\n        inputValueMax\n      });\n      this.setState({\n        inputValueMax\n      });\n    }\n  } //new\n\n\n  render() {\n    /* Save list of levels and options for dropdown */\n    const levelListMin = [\"ANY\", \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\"];\n    const levelOptionsMin = levelListMin.map(level => ({\n      label: level,\n      value: level\n    }));\n    const levelListMax = [\"ANY\", \"199\", \"299\", \"399\", \"499\", \"599\", \"699\", \"799\", \"899\"];\n    const levelOptionsMax = levelListMax.map(level => ({\n      label: level,\n      value: level\n    }));\n\n    if (this.state.loading) {\n      this.setState({\n        loading: false\n      });\n      ReactDOM.render( /*#__PURE__*/React.createElement(\"p\", {\n        id: \"loadingMsg\",\n        class: \"lead\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 17\n        }\n      }, \"Loading...\"), document.getElementById(\"id_dept_table\"));\n    } // new\n\n\n    const {\n      inputValueMin\n    } = this.state;\n    const {\n      inputValueMax\n    } = this.state; // new\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      class: \"mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }\n    }, \"Select a Department\"), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"typeofdept\",\n      class: \"lead\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }\n    }, \"Please select the department of the course/elective you are looking for.\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"deptlist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"level_min\",\n      class: \"lead\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 29\n      }\n    }, \"Minimum Course Level:\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"level_min_option\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      id: \"level_min\",\n      options: levelOptionsMin,\n      onChange: level => this.setState({\n        level_min: level.value\n      }),\n      inputValue: inputValueMin,\n      onInputChange: this.handleInputChangeMin.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 33\n      }\n    }), console.log(this.state.level_min)), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"level_max\",\n      class: \"lead\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 29\n      }\n    }, \"Maximum Course Level\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"level_max_option\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      id: \"level_max\",\n      options: levelOptionsMax,\n      onChange: level => this.setState({\n        level_max: level.value\n      }),\n      inputValue: inputValueMax,\n      onInputChange: this.handleInputChangeMax.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 33\n      }\n    }), console.log(this.state.level_max))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"whichdeptdiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-light\",\n      id: \"whichdept\",\n      name: \"whichdept\",\n      onClick: this.courseTable,\n      size: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 21\n      }\n    }, \"Select\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"id_dept_table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\n{\n  /* <DeptList selectedDept={document.getElementById('deptList')} /> */\n}\nexport default Dept;","map":{"version":3,"sources":["/home/iiradia/EasyA/reactjs/frontend/src/components/Home/Dept.jsx"],"names":["React","Select","ReactDOM","Table","CreatableSelect","Button","Dept","Component","constructor","getDepts","bind","DeptList","courseTable","parseData","state","dept_list","courses","select_value","level_min","level_max","loading","inputValueMin","inputValueMax","numCourses_value","data","console","log","length","render","document","getElementById","setState","minimum","maximum","props","whichterm","dept_url","fetch","method","headers","then","response","json","url","departments","deptOptions","dept","map","label","deptValues","dept_code","value_i","value","deptFinal","i","width","margin","handleInputChangeMin","action","handleInputChangeMax","levelListMin","levelOptionsMin","level","levelListMax","levelOptionsMax"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Select from 'react-select';\r\nimport ReactDOM from 'react-dom';\r\nimport Table from \"./Table\";\r\nimport './css/dept.css';\r\nimport CreatableSelect from 'react-select/lib/Creatable';\r\nimport './css/courselevel.css'; \r\nimport {Button} from \"react-bootstrap\";\r\n\r\nclass Dept extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.getDepts = this.getDepts.bind(this)\r\n        this.DeptList = this.DeptList.bind(this)\r\n        this.courseTable = this.courseTable.bind(this)\r\n        this.parseData = this.parseData.bind(this)\r\n\r\n        this.state = {\r\n            dept_list: null,\r\n            courses: null,\r\n            select_value: null,\r\n            level_min: null, \r\n            level_max: null,  \r\n            loading: false,\r\n            inputValueMin: \"\",  //new\r\n            inputValueMax: \"\" , //new\r\n            numCourses_value: null\r\n        }\r\n        /* Call depts function */\r\n        this.getDepts();\r\n    }\r\n    parseData(data) {\r\n        console.log(data);\r\n        if (data.length > 0) {\r\n\r\n            if (data.length === 1 && data[0] === \"Invalid\") {\r\n                ReactDOM.render(<h3>Level minimum cannot be greater than maximum.</h3>\r\n                    , document.getElementById('id_dept_table'))\r\n            }\r\n            else {\r\n                this.setState({\r\n                    courses: data\r\n                    },\r\n                    () => ReactDOM.render(<Table data={this.state.courses} />,\r\n                        document.getElementById('id_dept_table')\r\n                    )\r\n                ) \r\n            }\r\n        }\r\n        else {\r\n            let minimum = this.state.level_min;\r\n            let maximum = this.state.level_max;\r\n            if (minimum === \"ANY\") {\r\n                minimum = \"100\";\r\n            }\r\n            if (maximum === \"ANY\") {\r\n                maximum = \"899\";\r\n            }\r\n            ReactDOM.render(\r\n                <h3>There is no course in {this.state.select_value} offered during {this.props.whichterm} between level {minimum} and {maximum}.</h3>,\r\n                document.getElementById('id_dept_table')\r\n            )\r\n        }    \r\n    }\r\n    courseTable() {\r\n        const Dept = this;\r\n        let dept_url = \"http://localhost:5000/dept\";\r\n        this.setState({loading:true})\r\n\r\n        //new\r\n        /* Quadruple if-block to call using correct states */\r\n        if (!this.state.level_max && !this.state.level_min) {\r\n            //console.log(\"setting inputValueMax state\")\r\n            fetch(\r\n                dept_url, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Dept\": this.state.select_value,\r\n                        \"term\": this.props.whichterm,\r\n                        \"level_min\": this.state.inputValueMin,\r\n                        \"level_max\": this.state.inputValueMax,\r\n                        \"num_courses\": this.state.numCourses_value\r\n                    }\r\n            }\r\n            ).then(\r\n            response => response.json()\r\n            ).then(\r\n                //Ternary operator that checks whether course is offered or not.\r\n                data => this.parseData(data)\r\n            )\r\n        } else if (!this.state.level_min) {\r\n            fetch(\r\n                dept_url, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Dept\": this.state.select_value,\r\n                        \"term\": this.props.whichterm,\r\n                        \"level_min\": this.state.inputValueMin,\r\n                        \"level_max\": this.state.level_max,\r\n                        \"num_courses\": this.state.numCourses_value\r\n                    }\r\n            }\r\n            ).then(\r\n            response => response.json()\r\n            ).then(\r\n                //Ternary operator that checks whether course is offered or not.\r\n                data => this.parseData(data)\r\n            )\r\n        } else if (!this.state.level_max) {\r\n            fetch(\r\n                dept_url, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Dept\": this.state.select_value,\r\n                        \"term\": this.props.whichterm,\r\n                        \"level_min\": this.state.level_min,\r\n                        \"level_max\": this.state.inputValueMax,\r\n                        \"num_courses\": this.state.numCourses_value\r\n                    }\r\n            }\r\n            ).then(\r\n            response => response.json()\r\n            ).then(\r\n                //Ternary operator that checks whether course is offered or not.\r\n                data => this.parseData(data)\r\n            )\r\n        } else {\r\n            fetch(\r\n                dept_url, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Dept\": this.state.select_value,\r\n                        \"term\": this.props.whichterm,\r\n                        \"level_min\": this.state.level_min,\r\n                        \"level_max\": this.state.level_max\r\n                    }\r\n            }\r\n            ).then(\r\n            response => response.json()\r\n            ).then(\r\n                //Ternary operator that checks whether course is offered or not.\r\n                data => this.parseData(data)\r\n            )\r\n        }\r\n        //new\r\n    }\r\n\r\n    /* Get List of departments and render select component */\r\n    getDepts() {\r\n        const Dept = this;\r\n        let url = \"http://localhost:5000/getdepts\";\r\n\r\n        //ToDo: Load dynamically, only bring in 20 depts at a time in order to save time with Flask request \r\n        return fetch( \r\n            url, {\r\n                method: \"GET\"\r\n           }\r\n        ).then(\r\n            response => response.json() // keep here (maybe)\r\n        ).then(\r\n            (data) => {this.setState({dept_list: data},\r\n                () => ReactDOM.render(this.DeptList(), document.getElementById('deptlist'))\r\n            )}\r\n        )\r\n    }\r\n    \r\n    /* Return select component with list of departments */\r\n    DeptList(){\r\n        const departments = this.state.dept_list;\r\n\r\n        const deptOptions = departments.dept.map((dept) => (\r\n            {label: dept}\r\n        ));\r\n        const deptValues = departments.dept_code.map((value_i) => (\r\n            {value: value_i}\r\n        ));\r\n        const deptFinal = [];\r\n        for (var i = 0; i < deptOptions.length; i++) {\r\n            deptFinal[i] = {label: deptOptions[i].label,\r\n                            value: deptValues[i].value}\r\n        }\r\n\r\n        return (\r\n        <div className=\"app\">\r\n            <div className=\"container\">\r\n                <div style={{width:\"400px\", margin:\"0 auto\"}}>\r\n                    <Select className=\"deptSelect\"\r\n                            id='dept_list_select' \r\n                            options={deptFinal} \r\n                            onChange={dept => this.setState({select_value:dept.value})}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    };\r\n\r\n    //new\r\n    handleInputChangeMin(inputValueMin, action) {\r\n        if (action.action !== \"input-blur\" && action.action !== \"menu-close\") {\r\n            console.log({ inputValueMin });\r\n            this.setState({ inputValueMin });\r\n        }\r\n    }\r\n    handleInputChangeMax(inputValueMax, action) {\r\n        if (action.action !== \"input-blur\" && action.action !== \"menu-close\") {\r\n            console.log({ inputValueMax });\r\n            this.setState({ inputValueMax });\r\n        }\r\n    }\r\n    //new\r\n\r\n    render() {\r\n          /* Save list of levels and options for dropdown */\r\n          const levelListMin = [\"ANY\", \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\",\"800\"];\r\n\r\n          const levelOptionsMin = levelListMin.map((level) => (\r\n         {label: level, value: level}\r\n          )); \r\n \r\n \r\n          const levelListMax = [\"ANY\", \"199\", \"299\", \"399\", \"499\", \"599\", \"699\", \"799\",\"899\"];\r\n \r\n          const levelOptionsMax = levelListMax.map((level) => (\r\n         {label: level, value: level}\r\n          )); \r\n          \r\n        if(this.state.loading) {\r\n            this.setState({loading:false})\r\n            ReactDOM.render(\r\n                <p id=\"loadingMsg\" class=\"lead\">Loading...</p>,\r\n                document.getElementById(\"id_dept_table\")\r\n            )\r\n        }\r\n\r\n        // new\r\n        const { inputValueMin } = this.state;\r\n        const { inputValueMax } = this.state;\r\n        // new\r\n        \r\n        return(\r\n            <div class=\"text-center\">\r\n                <h2 class=\"mt-5\">Select a Department</h2>\r\n\r\n                {/* Gives options for specific department the user is looking for */}\r\n                <label for=\"typeofdept\" class=\"lead\">Please select the department of the course/elective you are looking for.</label>\r\n                    <div id=\"deptlist\">\r\n\r\n                    </div>\r\n\r\n                    <div> \r\n                        {/* prompt for levels */ }\r\n                            <label for=\"level_min\" class=\"lead\">Minimum Course Level:</label>\r\n                            { /* Select level between 100 and 800 */ }\r\n                            <div id=\"level_min_option\">\r\n                                <Select\r\n                                    id=\"level_min\"\r\n                                    options={levelOptionsMin}\r\n                                    onChange={level => this.setState({level_min: level.value})}\r\n                                    inputValue={inputValueMin}\r\n                                    onInputChange={this.handleInputChangeMin.bind(this)}\r\n                                />\r\n                                {console.log(this.state.level_min)}\r\n                            </div>\r\n\r\n                            {/* prompt for levels */ }\r\n                            <label for=\"level_max\" class=\"lead\">Maximum Course Level</label>\r\n\r\n                            { /* Select level between 100 and 800 */ }\r\n                            <div id=\"level_max_option\">\r\n                                <Select\r\n                                    id=\"level_max\" \r\n                                    options={levelOptionsMax}\r\n                                    onChange={level => this.setState({level_max: level.value})}\r\n                                    inputValue={inputValueMax}\r\n                                    onInputChange={this.handleInputChangeMax.bind(this)}\r\n                                />\r\n                                {console.log(this.state.level_max)}\r\n                            </div>\r\n                    </div>\r\n\r\n                {/* Button to generate table */}\r\n                <div id=\"whichdeptdiv\">\r\n                    <Button\r\n                            variant=\"outline-light\" \r\n                            id=\"whichdept\" \r\n                            name=\"whichdept\" \r\n                            onClick={this.courseTable}\r\n                            size=\"lg\">\r\n                        Select\r\n                    </Button>\r\n                </div>\r\n\r\n                { /* Div for course table */ }\r\n                <div id=\"id_dept_table\">\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n{/* <DeptList selectedDept={document.getElementById('deptList')} /> */}\r\nexport default Dept;"]},"metadata":{},"sourceType":"module"}