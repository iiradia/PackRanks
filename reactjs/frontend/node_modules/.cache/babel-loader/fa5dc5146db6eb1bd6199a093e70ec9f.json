{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n/**\n * Injectable ordering of event plugins.\n */\n\n\nvar eventPluginOrder = null;\n/**\n * Injectable mapping from names to event plugin modules.\n */\n\nvar namesToPlugins = {};\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\n\nfunction recomputePluginOrdering() {\n  if (!eventPluginOrder) {\n    // Wait until an `eventPluginOrder` is injected.\n    return;\n  }\n\n  for (var pluginName in namesToPlugins) {\n    var pluginModule = namesToPlugins[pluginName];\n    var pluginIndex = eventPluginOrder.indexOf(pluginName);\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;\n\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n\n    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;\n    EventPluginRegistry.plugins[pluginIndex] = pluginModule;\n    var publishedEvents = pluginModule.eventTypes;\n\n    for (var eventName in publishedEvents) {\n      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;\n    }\n  }\n}\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\n\n\nfunction publishEventForPlugin(dispatchConfig, pluginModule, eventName) {\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);\n      }\n    }\n\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\n\n\nfunction publishRegistrationName(registrationName, pluginModule, eventName) {\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;\n  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;\n\n  if (process.env.NODE_ENV !== 'production') {\n    var lowerCasedName = registrationName.toLowerCase();\n    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;\n\n    if (registrationName === 'onDoubleClick') {\n      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;\n    }\n  }\n}\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\n\n\nvar EventPluginRegistry = {\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Mapping from lowercase registration names to the properly cased version,\n   * used to warn in the case of missing event handlers. Available\n   * only in __DEV__.\n   * @type {Object}\n   */\n  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,\n  // Trust the developer to only use possibleRegistrationNames in __DEV__\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (injectedEventPluginOrder) {\n    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0; // Clone the ordering so it cannot be dynamically mutated.\n\n    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n\n      var pluginModule = injectedNamesToPlugins[pluginName];\n\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;\n        namesToPlugins[pluginName] = pluginModule;\n        isOrderingDirty = true;\n      }\n    }\n\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n\n    if (dispatchConfig.phasedRegistrationNames !== undefined) {\n      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see\n      // that it is not undefined.\n      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n\n      for (var phase in phasedRegistrationNames) {\n        if (!phasedRegistrationNames.hasOwnProperty(phase)) {\n          continue;\n        }\n\n        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];\n\n        if (pluginModule) {\n          return pluginModule;\n        }\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    eventPluginOrder = null;\n\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n\n    EventPluginRegistry.plugins.length = 0;\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;\n\n      for (var lowerCasedName in possibleRegistrationNames) {\n        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {\n          delete possibleRegistrationNames[lowerCasedName];\n        }\n      }\n    }\n  }\n};\nmodule.exports = EventPluginRegistry;","map":{"version":3,"sources":["/Users/mathew/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/EventPluginRegistry.js"],"names":["_prodInvariant","require","invariant","eventPluginOrder","namesToPlugins","recomputePluginOrdering","pluginName","pluginModule","pluginIndex","indexOf","process","env","NODE_ENV","EventPluginRegistry","plugins","extractEvents","publishedEvents","eventTypes","eventName","publishEventForPlugin","dispatchConfig","eventNameDispatchConfigs","hasOwnProperty","phasedRegistrationNames","phaseName","phasedRegistrationName","publishRegistrationName","registrationName","registrationNameModules","registrationNameDependencies","dependencies","lowerCasedName","toLowerCase","possibleRegistrationNames","ondblclick","injectEventPluginOrder","injectedEventPluginOrder","Array","prototype","slice","call","injectEventPluginsByName","injectedNamesToPlugins","isOrderingDirty","getPluginModuleForEvent","event","undefined","phase","_resetEventPlugins","length","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Injectable ordering of event plugins.\n */\nvar eventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!eventPluginOrder) {\n    // Wait until an `eventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var pluginModule = namesToPlugins[pluginName];\n    var pluginIndex = eventPluginOrder.indexOf(pluginName);\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;\n    EventPluginRegistry.plugins[pluginIndex] = pluginModule;\n    var publishedEvents = pluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, pluginModule, eventName) {\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, pluginModule, eventName) {\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;\n  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;\n\n  if (process.env.NODE_ENV !== 'production') {\n    var lowerCasedName = registrationName.toLowerCase();\n    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;\n\n    if (registrationName === 'onDoubleClick') {\n      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;\n    }\n  }\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Mapping from lowercase registration names to the properly cased version,\n   * used to warn in the case of missing event handlers. Available\n   * only in __DEV__.\n   * @type {Object}\n   */\n  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,\n  // Trust the developer to only use possibleRegistrationNames in __DEV__\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (injectedEventPluginOrder) {\n    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;\n    // Clone the ordering so it cannot be dynamically mutated.\n    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var pluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;\n        namesToPlugins[pluginName] = pluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n    if (dispatchConfig.phasedRegistrationNames !== undefined) {\n      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see\n      // that it is not undefined.\n      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n\n      for (var phase in phasedRegistrationNames) {\n        if (!phasedRegistrationNames.hasOwnProperty(phase)) {\n          continue;\n        }\n        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];\n        if (pluginModule) {\n          return pluginModule;\n        }\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    eventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;\n      for (var lowerCasedName in possibleRegistrationNames) {\n        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {\n          delete possibleRegistrationNames[lowerCasedName];\n        }\n      }\n    }\n  }\n};\n\nmodule.exports = EventPluginRegistry;"]},"metadata":{},"sourceType":"script"}