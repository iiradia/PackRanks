{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\n\nvar ReactInstanceMap = require('./ReactInstanceMap');\n\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');\n\nvar ReactReconciler = require('./ReactReconciler');\n\nvar ReactChildReconciler = require('./ReactChildReconciler');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar flattenChildren = require('./flattenChildren');\n\nvar invariant = require('fbjs/lib/invariant');\n/**\n * Make an update for markup to be rendered and inserted at a supplied index.\n *\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\n\n\nfunction makeInsertMarkup(markup, afterNode, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'INSERT_MARKUP',\n    content: markup,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: toIndex,\n    afterNode: afterNode\n  };\n}\n/**\n * Make an update for moving an existing element to another index.\n *\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\n\n\nfunction makeMove(child, afterNode, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'MOVE_EXISTING',\n    content: null,\n    fromIndex: child._mountIndex,\n    fromNode: ReactReconciler.getHostNode(child),\n    toIndex: toIndex,\n    afterNode: afterNode\n  };\n}\n/**\n * Make an update for removing an element at an index.\n *\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\n\n\nfunction makeRemove(child, node) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'REMOVE_NODE',\n    content: null,\n    fromIndex: child._mountIndex,\n    fromNode: node,\n    toIndex: null,\n    afterNode: null\n  };\n}\n/**\n * Make an update for setting the markup of a node.\n *\n * @param {string} markup Markup that renders into an element.\n * @private\n */\n\n\nfunction makeSetMarkup(markup) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'SET_MARKUP',\n    content: markup,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: null,\n    afterNode: null\n  };\n}\n/**\n * Make an update for setting the text content.\n *\n * @param {string} textContent Text content to set.\n * @private\n */\n\n\nfunction makeTextContent(textContent) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'TEXT_CONTENT',\n    content: textContent,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: null,\n    afterNode: null\n  };\n}\n/**\n * Push an update, if any, onto the queue. Creates a new queue if none is\n * passed and always returns the queue. Mutative.\n */\n\n\nfunction enqueue(queue, update) {\n  if (update) {\n    queue = queue || [];\n    queue.push(update);\n  }\n\n  return queue;\n}\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\n\n\nfunction processQueue(inst, updateQueue) {\n  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);\n}\n\nvar setChildrenForInstrumentation = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  var getDebugID = function (inst) {\n    if (!inst._debugID) {\n      // Check for ART-like instances. TODO: This is silly/gross.\n      var internal;\n\n      if (internal = ReactInstanceMap.get(inst)) {\n        inst = internal;\n      }\n    }\n\n    return inst._debugID;\n  };\n\n  setChildrenForInstrumentation = function (children) {\n    var debugID = getDebugID(this); // TODO: React Native empty components are also multichild.\n    // This means they still get into this method but don't have _debugID.\n\n    if (debugID !== 0) {\n      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {\n        return children[key]._debugID;\n      }) : []);\n    }\n  };\n}\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\n\n\nvar ReactMultiChild = {\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        var selfDebugID = getDebugID(this);\n\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {\n      var nextChildren;\n      var selfDebugID = 0;\n\n      if (process.env.NODE_ENV !== 'production') {\n        selfDebugID = getDebugID(this);\n\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n\n          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          return nextChildren;\n        }\n      }\n\n      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);\n      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n      return nextChildren;\n    },\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          var selfDebugID = 0;\n\n          if (process.env.NODE_ENV !== 'production') {\n            selfDebugID = getDebugID(this);\n          }\n\n          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        setChildrenForInstrumentation.call(this, children);\n      }\n\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      var prevChildren = this._renderedChildren; // Remove any rendered children.\n\n      ReactChildReconciler.unmountChildren(prevChildren, false);\n\n      for (var name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name)) {\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }\n      } // Set new text content.\n\n\n      var updates = [makeTextContent(nextContent)];\n      processQueue(this, updates);\n    },\n\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      var prevChildren = this._renderedChildren; // Remove any rendered children.\n\n      ReactChildReconciler.unmountChildren(prevChildren, false);\n\n      for (var name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name)) {\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }\n      }\n\n      var updates = [makeSetMarkup(nextMarkup)];\n      processQueue(this, updates);\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      // Hook used by React ART\n      this._updateChildren(nextNestedChildrenElements, transaction, context);\n    },\n\n    /**\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var removedNodes = {};\n      var mountImages = [];\n\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);\n\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n\n      var updates = null;\n      var name; // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n\n      var nextIndex = 0;\n      var lastIndex = 0; // `nextMountIndex` will increment for each newly mounted child.\n\n      var nextMountIndex = 0;\n      var lastPlacedNode = null;\n\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n\n        if (prevChild === nextChild) {\n          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex); // The `removedNodes` loop below will actually remove the child.\n          } // The child must be instantiated before it's mounted.\n\n\n          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));\n          nextMountIndex++;\n        }\n\n        nextIndex++;\n        lastPlacedNode = ReactReconciler.getHostNode(nextChild);\n      } // Remove children that are no longer present.\n\n\n      for (name in removedNodes) {\n        if (removedNodes.hasOwnProperty(name)) {\n          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));\n        }\n      }\n\n      if (updates) {\n        processQueue(this, updates);\n      }\n\n      this._renderedChildren = nextChildren;\n\n      if (process.env.NODE_ENV !== 'production') {\n        setChildrenForInstrumentation.call(this, nextChildren);\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted. It does not actually perform any\n     * backend operations.\n     *\n     * @internal\n     */\n    unmountChildren: function (safely) {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren, safely);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, afterNode, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        return makeMove(child, afterNode, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, afterNode, mountImage) {\n      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child, node) {\n      return makeRemove(child, node);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {\n      child._mountIndex = index;\n      return this.createChild(child, afterNode, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child, node) {\n      var update = this.removeChild(child, node);\n      child._mountIndex = null;\n      return update;\n    }\n  }\n};\nmodule.exports = ReactMultiChild;","map":{"version":3,"sources":["/mnt/c/Users/Harry-PC/Documents/ProgrammingProjects/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/ReactMultiChild.js"],"names":["_prodInvariant","require","ReactComponentEnvironment","ReactInstanceMap","ReactInstrumentation","ReactCurrentOwner","ReactReconciler","ReactChildReconciler","emptyFunction","flattenChildren","invariant","makeInsertMarkup","markup","afterNode","toIndex","type","content","fromIndex","fromNode","makeMove","child","_mountIndex","getHostNode","makeRemove","node","makeSetMarkup","makeTextContent","textContent","enqueue","queue","update","push","processQueue","inst","updateQueue","processChildrenUpdates","setChildrenForInstrumentation","process","env","NODE_ENV","getDebugID","_debugID","internal","get","children","debugID","debugTool","onSetChildren","Object","keys","map","key","ReactMultiChild","Mixin","_reconcilerInstantiateChildren","nestedChildren","transaction","context","selfDebugID","_currentElement","current","_owner","instantiateChildren","_reconcilerUpdateChildren","prevChildren","nextNestedChildrenElements","mountImages","removedNodes","nextChildren","updateChildren","_hostContainerInfo","mountChildren","_renderedChildren","index","name","hasOwnProperty","mountImage","mountComponent","call","updateTextContent","nextContent","unmountChildren","updates","updateMarkup","nextMarkup","_updateChildren","nextIndex","lastIndex","nextMountIndex","lastPlacedNode","prevChild","nextChild","moveChild","Math","max","_mountChildAtIndex","_unmountChild","safely","renderedChildren","createChild","removeChild","module","exports"],"mappings":"AAAA;;;;;;;AAQA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,sBAAD,CAA5B;;AAEA,IAAIC,yBAAyB,GAAGD,OAAO,CAAC,6BAAD,CAAvC;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AACA,IAAIK,eAAe,GAAGL,OAAO,CAAC,mBAAD,CAA7B;;AACA,IAAIM,oBAAoB,GAAGN,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIO,aAAa,GAAGP,OAAO,CAAC,wBAAD,CAA3B;;AACA,IAAIQ,eAAe,GAAGR,OAAO,CAAC,mBAAD,CAA7B;;AACA,IAAIS,SAAS,GAAGT,OAAO,CAAC,oBAAD,CAAvB;AAEA;;;;;;;;;AAOA,SAASU,gBAAT,CAA0BC,MAA1B,EAAkCC,SAAlC,EAA6CC,OAA7C,EAAsD;AACpD;AACA,SAAO;AACLC,IAAAA,IAAI,EAAE,eADD;AAELC,IAAAA,OAAO,EAAEJ,MAFJ;AAGLK,IAAAA,SAAS,EAAE,IAHN;AAILC,IAAAA,QAAQ,EAAE,IAJL;AAKLJ,IAAAA,OAAO,EAAEA,OALJ;AAMLD,IAAAA,SAAS,EAAEA;AANN,GAAP;AAQD;AAED;;;;;;;;;AAOA,SAASM,QAAT,CAAkBC,KAAlB,EAAyBP,SAAzB,EAAoCC,OAApC,EAA6C;AAC3C;AACA,SAAO;AACLC,IAAAA,IAAI,EAAE,eADD;AAELC,IAAAA,OAAO,EAAE,IAFJ;AAGLC,IAAAA,SAAS,EAAEG,KAAK,CAACC,WAHZ;AAILH,IAAAA,QAAQ,EAAEZ,eAAe,CAACgB,WAAhB,CAA4BF,KAA5B,CAJL;AAKLN,IAAAA,OAAO,EAAEA,OALJ;AAMLD,IAAAA,SAAS,EAAEA;AANN,GAAP;AAQD;AAED;;;;;;;;AAMA,SAASU,UAAT,CAAoBH,KAApB,EAA2BI,IAA3B,EAAiC;AAC/B;AACA,SAAO;AACLT,IAAAA,IAAI,EAAE,aADD;AAELC,IAAAA,OAAO,EAAE,IAFJ;AAGLC,IAAAA,SAAS,EAAEG,KAAK,CAACC,WAHZ;AAILH,IAAAA,QAAQ,EAAEM,IAJL;AAKLV,IAAAA,OAAO,EAAE,IALJ;AAMLD,IAAAA,SAAS,EAAE;AANN,GAAP;AAQD;AAED;;;;;;;;AAMA,SAASY,aAAT,CAAuBb,MAAvB,EAA+B;AAC7B;AACA,SAAO;AACLG,IAAAA,IAAI,EAAE,YADD;AAELC,IAAAA,OAAO,EAAEJ,MAFJ;AAGLK,IAAAA,SAAS,EAAE,IAHN;AAILC,IAAAA,QAAQ,EAAE,IAJL;AAKLJ,IAAAA,OAAO,EAAE,IALJ;AAMLD,IAAAA,SAAS,EAAE;AANN,GAAP;AAQD;AAED;;;;;;;;AAMA,SAASa,eAAT,CAAyBC,WAAzB,EAAsC;AACpC;AACA,SAAO;AACLZ,IAAAA,IAAI,EAAE,cADD;AAELC,IAAAA,OAAO,EAAEW,WAFJ;AAGLV,IAAAA,SAAS,EAAE,IAHN;AAILC,IAAAA,QAAQ,EAAE,IAJL;AAKLJ,IAAAA,OAAO,EAAE,IALJ;AAMLD,IAAAA,SAAS,EAAE;AANN,GAAP;AAQD;AAED;;;;;;AAIA,SAASe,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,MAAIA,MAAJ,EAAY;AACVD,IAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;AACAA,IAAAA,KAAK,CAACE,IAAN,CAAWD,MAAX;AACD;;AACD,SAAOD,KAAP;AACD;AAED;;;;;;;AAKA,SAASG,YAAT,CAAsBC,IAAtB,EAA4BC,WAA5B,EAAyC;AACvChC,EAAAA,yBAAyB,CAACiC,sBAA1B,CAAiDF,IAAjD,EAAuDC,WAAvD;AACD;;AAED,IAAIE,6BAA6B,GAAG5B,aAApC;;AACA,IAAI6B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAIC,UAAU,GAAG,UAAUP,IAAV,EAAgB;AAC/B,QAAI,CAACA,IAAI,CAACQ,QAAV,EAAoB;AAClB;AACA,UAAIC,QAAJ;;AACA,UAAIA,QAAQ,GAAGvC,gBAAgB,CAACwC,GAAjB,CAAqBV,IAArB,CAAf,EAA2C;AACzCA,QAAAA,IAAI,GAAGS,QAAP;AACD;AACF;;AACD,WAAOT,IAAI,CAACQ,QAAZ;AACD,GATD;;AAUAL,EAAAA,6BAA6B,GAAG,UAAUQ,QAAV,EAAoB;AAClD,QAAIC,OAAO,GAAGL,UAAU,CAAC,IAAD,CAAxB,CADkD,CAElD;AACA;;AACA,QAAIK,OAAO,KAAK,CAAhB,EAAmB;AACjBzC,MAAAA,oBAAoB,CAAC0C,SAArB,CAA+BC,aAA/B,CAA6CF,OAA7C,EAAsDD,QAAQ,GAAGI,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,GAAtB,CAA0B,UAAUC,GAAV,EAAe;AACxG,eAAOP,QAAQ,CAACO,GAAD,CAAR,CAAcV,QAArB;AACD,OAFgE,CAAH,GAEzD,EAFL;AAGD;AACF,GATD;AAUD;AAED;;;;;;;;AAMA,IAAIW,eAAe,GAAG;AACpB;;;;;;;AAOAC,EAAAA,KAAK,EAAE;AACLC,IAAAA,8BAA8B,EAAE,UAAUC,cAAV,EAA0BC,WAA1B,EAAuCC,OAAvC,EAAgD;AAC9E,UAAIpB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,YAAImB,WAAW,GAAGlB,UAAU,CAAC,IAAD,CAA5B;;AACA,YAAI,KAAKmB,eAAT,EAA0B;AACxB,cAAI;AACFtD,YAAAA,iBAAiB,CAACuD,OAAlB,GAA4B,KAAKD,eAAL,CAAqBE,MAAjD;AACA,mBAAOtD,oBAAoB,CAACuD,mBAArB,CAAyCP,cAAzC,EAAyDC,WAAzD,EAAsEC,OAAtE,EAA+EC,WAA/E,CAAP;AACD,WAHD,SAGU;AACRrD,YAAAA,iBAAiB,CAACuD,OAAlB,GAA4B,IAA5B;AACD;AACF;AACF;;AACD,aAAOrD,oBAAoB,CAACuD,mBAArB,CAAyCP,cAAzC,EAAyDC,WAAzD,EAAsEC,OAAtE,CAAP;AACD,KAdI;AAgBLM,IAAAA,yBAAyB,EAAE,UAAUC,YAAV,EAAwBC,0BAAxB,EAAoDC,WAApD,EAAiEC,YAAjE,EAA+EX,WAA/E,EAA4FC,OAA5F,EAAqG;AAC9H,UAAIW,YAAJ;AACA,UAAIV,WAAW,GAAG,CAAlB;;AACA,UAAIrB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCmB,QAAAA,WAAW,GAAGlB,UAAU,CAAC,IAAD,CAAxB;;AACA,YAAI,KAAKmB,eAAT,EAA0B;AACxB,cAAI;AACFtD,YAAAA,iBAAiB,CAACuD,OAAlB,GAA4B,KAAKD,eAAL,CAAqBE,MAAjD;AACAO,YAAAA,YAAY,GAAG3D,eAAe,CAACwD,0BAAD,EAA6BP,WAA7B,CAA9B;AACD,WAHD,SAGU;AACRrD,YAAAA,iBAAiB,CAACuD,OAAlB,GAA4B,IAA5B;AACD;;AACDrD,UAAAA,oBAAoB,CAAC8D,cAArB,CAAoCL,YAApC,EAAkDI,YAAlD,EAAgEF,WAAhE,EAA6EC,YAA7E,EAA2FX,WAA3F,EAAwG,IAAxG,EAA8G,KAAKc,kBAAnH,EAAuIb,OAAvI,EAAgJC,WAAhJ;AACA,iBAAOU,YAAP;AACD;AACF;;AACDA,MAAAA,YAAY,GAAG3D,eAAe,CAACwD,0BAAD,EAA6BP,WAA7B,CAA9B;AACAnD,MAAAA,oBAAoB,CAAC8D,cAArB,CAAoCL,YAApC,EAAkDI,YAAlD,EAAgEF,WAAhE,EAA6EC,YAA7E,EAA2FX,WAA3F,EAAwG,IAAxG,EAA8G,KAAKc,kBAAnH,EAAuIb,OAAvI,EAAgJC,WAAhJ;AACA,aAAOU,YAAP;AACD,KAnCI;;AAqCL;;;;;;;;AAQAG,IAAAA,aAAa,EAAE,UAAUhB,cAAV,EAA0BC,WAA1B,EAAuCC,OAAvC,EAAgD;AAC7D,UAAIb,QAAQ,GAAG,KAAKU,8BAAL,CAAoCC,cAApC,EAAoDC,WAApD,EAAiEC,OAAjE,CAAf;;AACA,WAAKe,iBAAL,GAAyB5B,QAAzB;AAEA,UAAIsB,WAAW,GAAG,EAAlB;AACA,UAAIO,KAAK,GAAG,CAAZ;;AACA,WAAK,IAAIC,IAAT,IAAiB9B,QAAjB,EAA2B;AACzB,YAAIA,QAAQ,CAAC+B,cAAT,CAAwBD,IAAxB,CAAJ,EAAmC;AACjC,cAAItD,KAAK,GAAGwB,QAAQ,CAAC8B,IAAD,CAApB;AACA,cAAIhB,WAAW,GAAG,CAAlB;;AACA,cAAIrB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCmB,YAAAA,WAAW,GAAGlB,UAAU,CAAC,IAAD,CAAxB;AACD;;AACD,cAAIoC,UAAU,GAAGtE,eAAe,CAACuE,cAAhB,CAA+BzD,KAA/B,EAAsCoC,WAAtC,EAAmD,IAAnD,EAAyD,KAAKc,kBAA9D,EAAkFb,OAAlF,EAA2FC,WAA3F,CAAjB;AACAtC,UAAAA,KAAK,CAACC,WAAN,GAAoBoD,KAAK,EAAzB;AACAP,UAAAA,WAAW,CAACnC,IAAZ,CAAiB6C,UAAjB;AACD;AACF;;AAED,UAAIvC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCH,QAAAA,6BAA6B,CAAC0C,IAA9B,CAAmC,IAAnC,EAAyClC,QAAzC;AACD;;AAED,aAAOsB,WAAP;AACD,KArEI;;AAuEL;;;;;;AAMAa,IAAAA,iBAAiB,EAAE,UAAUC,WAAV,EAAuB;AACxC,UAAIhB,YAAY,GAAG,KAAKQ,iBAAxB,CADwC,CAExC;;AACAjE,MAAAA,oBAAoB,CAAC0E,eAArB,CAAqCjB,YAArC,EAAmD,KAAnD;;AACA,WAAK,IAAIU,IAAT,IAAiBV,YAAjB,EAA+B;AAC7B,YAAIA,YAAY,CAACW,cAAb,CAA4BD,IAA5B,CAAJ,EAAuC;AACrC,WAAC,KAAD,GAASrC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC7B,SAAS,CAAC,KAAD,EAAQ,kDAAR,CAAjD,GAA+GV,cAAc,CAAC,KAAD,CAAtI,GAAgJ,KAAK,CAArJ;AACD;AACF,OARuC,CASxC;;;AACA,UAAIkF,OAAO,GAAG,CAACxD,eAAe,CAACsD,WAAD,CAAhB,CAAd;AACAhD,MAAAA,YAAY,CAAC,IAAD,EAAOkD,OAAP,CAAZ;AACD,KAzFI;;AA2FL;;;;;;AAMAC,IAAAA,YAAY,EAAE,UAAUC,UAAV,EAAsB;AAClC,UAAIpB,YAAY,GAAG,KAAKQ,iBAAxB,CADkC,CAElC;;AACAjE,MAAAA,oBAAoB,CAAC0E,eAArB,CAAqCjB,YAArC,EAAmD,KAAnD;;AACA,WAAK,IAAIU,IAAT,IAAiBV,YAAjB,EAA+B;AAC7B,YAAIA,YAAY,CAACW,cAAb,CAA4BD,IAA5B,CAAJ,EAAuC;AACrC,WAAC,KAAD,GAASrC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC7B,SAAS,CAAC,KAAD,EAAQ,kDAAR,CAAjD,GAA+GV,cAAc,CAAC,KAAD,CAAtI,GAAgJ,KAAK,CAArJ;AACD;AACF;;AACD,UAAIkF,OAAO,GAAG,CAACzD,aAAa,CAAC2D,UAAD,CAAd,CAAd;AACApD,MAAAA,YAAY,CAAC,IAAD,EAAOkD,OAAP,CAAZ;AACD,KA5GI;;AA8GL;;;;;;;AAOAb,IAAAA,cAAc,EAAE,UAAUJ,0BAAV,EAAsCT,WAAtC,EAAmDC,OAAnD,EAA4D;AAC1E;AACA,WAAK4B,eAAL,CAAqBpB,0BAArB,EAAiDT,WAAjD,EAA8DC,OAA9D;AACD,KAxHI;;AA0HL;;;;;;AAMA4B,IAAAA,eAAe,EAAE,UAAUpB,0BAAV,EAAsCT,WAAtC,EAAmDC,OAAnD,EAA4D;AAC3E,UAAIO,YAAY,GAAG,KAAKQ,iBAAxB;AACA,UAAIL,YAAY,GAAG,EAAnB;AACA,UAAID,WAAW,GAAG,EAAlB;;AACA,UAAIE,YAAY,GAAG,KAAKL,yBAAL,CAA+BC,YAA/B,EAA6CC,0BAA7C,EAAyEC,WAAzE,EAAsFC,YAAtF,EAAoGX,WAApG,EAAiHC,OAAjH,CAAnB;;AACA,UAAI,CAACW,YAAD,IAAiB,CAACJ,YAAtB,EAAoC;AAClC;AACD;;AACD,UAAIkB,OAAO,GAAG,IAAd;AACA,UAAIR,IAAJ,CAT2E,CAU3E;AACA;;AACA,UAAIY,SAAS,GAAG,CAAhB;AACA,UAAIC,SAAS,GAAG,CAAhB,CAb2E,CAc3E;;AACA,UAAIC,cAAc,GAAG,CAArB;AACA,UAAIC,cAAc,GAAG,IAArB;;AACA,WAAKf,IAAL,IAAaN,YAAb,EAA2B;AACzB,YAAI,CAACA,YAAY,CAACO,cAAb,CAA4BD,IAA5B,CAAL,EAAwC;AACtC;AACD;;AACD,YAAIgB,SAAS,GAAG1B,YAAY,IAAIA,YAAY,CAACU,IAAD,CAA5C;AACA,YAAIiB,SAAS,GAAGvB,YAAY,CAACM,IAAD,CAA5B;;AACA,YAAIgB,SAAS,KAAKC,SAAlB,EAA6B;AAC3BT,UAAAA,OAAO,GAAGtD,OAAO,CAACsD,OAAD,EAAU,KAAKU,SAAL,CAAeF,SAAf,EAA0BD,cAA1B,EAA0CH,SAA1C,EAAqDC,SAArD,CAAV,CAAjB;AACAA,UAAAA,SAAS,GAAGM,IAAI,CAACC,GAAL,CAASJ,SAAS,CAACrE,WAAnB,EAAgCkE,SAAhC,CAAZ;AACAG,UAAAA,SAAS,CAACrE,WAAV,GAAwBiE,SAAxB;AACD,SAJD,MAIO;AACL,cAAII,SAAJ,EAAe;AACb;AACAH,YAAAA,SAAS,GAAGM,IAAI,CAACC,GAAL,CAASJ,SAAS,CAACrE,WAAnB,EAAgCkE,SAAhC,CAAZ,CAFa,CAGb;AACD,WALI,CAML;;;AACAL,UAAAA,OAAO,GAAGtD,OAAO,CAACsD,OAAD,EAAU,KAAKa,kBAAL,CAAwBJ,SAAxB,EAAmCzB,WAAW,CAACsB,cAAD,CAA9C,EAAgEC,cAAhE,EAAgFH,SAAhF,EAA2F9B,WAA3F,EAAwGC,OAAxG,CAAV,CAAjB;AACA+B,UAAAA,cAAc;AACf;;AACDF,QAAAA,SAAS;AACTG,QAAAA,cAAc,GAAGnF,eAAe,CAACgB,WAAhB,CAA4BqE,SAA5B,CAAjB;AACD,OAvC0E,CAwC3E;;;AACA,WAAKjB,IAAL,IAAaP,YAAb,EAA2B;AACzB,YAAIA,YAAY,CAACQ,cAAb,CAA4BD,IAA5B,CAAJ,EAAuC;AACrCQ,UAAAA,OAAO,GAAGtD,OAAO,CAACsD,OAAD,EAAU,KAAKc,aAAL,CAAmBhC,YAAY,CAACU,IAAD,CAA/B,EAAuCP,YAAY,CAACO,IAAD,CAAnD,CAAV,CAAjB;AACD;AACF;;AACD,UAAIQ,OAAJ,EAAa;AACXlD,QAAAA,YAAY,CAAC,IAAD,EAAOkD,OAAP,CAAZ;AACD;;AACD,WAAKV,iBAAL,GAAyBJ,YAAzB;;AAEA,UAAI/B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCH,QAAAA,6BAA6B,CAAC0C,IAA9B,CAAmC,IAAnC,EAAyCV,YAAzC;AACD;AACF,KAtLI;;AAwLL;;;;;;;AAOAa,IAAAA,eAAe,EAAE,UAAUgB,MAAV,EAAkB;AACjC,UAAIC,gBAAgB,GAAG,KAAK1B,iBAA5B;AACAjE,MAAAA,oBAAoB,CAAC0E,eAArB,CAAqCiB,gBAArC,EAAuDD,MAAvD;AACA,WAAKzB,iBAAL,GAAyB,IAAzB;AACD,KAnMI;;AAqML;;;;;;;;AAQAoB,IAAAA,SAAS,EAAE,UAAUxE,KAAV,EAAiBP,SAAjB,EAA4BC,OAA5B,EAAqCyE,SAArC,EAAgD;AACzD;AACA;AACA;AACA,UAAInE,KAAK,CAACC,WAAN,GAAoBkE,SAAxB,EAAmC;AACjC,eAAOpE,QAAQ,CAACC,KAAD,EAAQP,SAAR,EAAmBC,OAAnB,CAAf;AACD;AACF,KApNI;;AAsNL;;;;;;;AAOAqF,IAAAA,WAAW,EAAE,UAAU/E,KAAV,EAAiBP,SAAjB,EAA4B+D,UAA5B,EAAwC;AACnD,aAAOjE,gBAAgB,CAACiE,UAAD,EAAa/D,SAAb,EAAwBO,KAAK,CAACC,WAA9B,CAAvB;AACD,KA/NI;;AAiOL;;;;;;AAMA+E,IAAAA,WAAW,EAAE,UAAUhF,KAAV,EAAiBI,IAAjB,EAAuB;AAClC,aAAOD,UAAU,CAACH,KAAD,EAAQI,IAAR,CAAjB;AACD,KAzOI;;AA2OL;;;;;;;;;;;AAWAuE,IAAAA,kBAAkB,EAAE,UAAU3E,KAAV,EAAiBwD,UAAjB,EAA6B/D,SAA7B,EAAwC4D,KAAxC,EAA+CjB,WAA/C,EAA4DC,OAA5D,EAAqE;AACvFrC,MAAAA,KAAK,CAACC,WAAN,GAAoBoD,KAApB;AACA,aAAO,KAAK0B,WAAL,CAAiB/E,KAAjB,EAAwBP,SAAxB,EAAmC+D,UAAnC,CAAP;AACD,KAzPI;;AA2PL;;;;;;;;AAQAoB,IAAAA,aAAa,EAAE,UAAU5E,KAAV,EAAiBI,IAAjB,EAAuB;AACpC,UAAIM,MAAM,GAAG,KAAKsE,WAAL,CAAiBhF,KAAjB,EAAwBI,IAAxB,CAAb;AACAJ,MAAAA,KAAK,CAACC,WAAN,GAAoB,IAApB;AACA,aAAOS,MAAP;AACD;AAvQI;AARa,CAAtB;AAmRAuE,MAAM,CAACC,OAAP,GAAiBlD,eAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactChildReconciler = require('./ReactChildReconciler');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar flattenChildren = require('./flattenChildren');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Make an update for markup to be rendered and inserted at a supplied index.\n *\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction makeInsertMarkup(markup, afterNode, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'INSERT_MARKUP',\n    content: markup,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: toIndex,\n    afterNode: afterNode\n  };\n}\n\n/**\n * Make an update for moving an existing element to another index.\n *\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction makeMove(child, afterNode, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'MOVE_EXISTING',\n    content: null,\n    fromIndex: child._mountIndex,\n    fromNode: ReactReconciler.getHostNode(child),\n    toIndex: toIndex,\n    afterNode: afterNode\n  };\n}\n\n/**\n * Make an update for removing an element at an index.\n *\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction makeRemove(child, node) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'REMOVE_NODE',\n    content: null,\n    fromIndex: child._mountIndex,\n    fromNode: node,\n    toIndex: null,\n    afterNode: null\n  };\n}\n\n/**\n * Make an update for setting the markup of a node.\n *\n * @param {string} markup Markup that renders into an element.\n * @private\n */\nfunction makeSetMarkup(markup) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'SET_MARKUP',\n    content: markup,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: null,\n    afterNode: null\n  };\n}\n\n/**\n * Make an update for setting the text content.\n *\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction makeTextContent(textContent) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'TEXT_CONTENT',\n    content: textContent,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: null,\n    afterNode: null\n  };\n}\n\n/**\n * Push an update, if any, onto the queue. Creates a new queue if none is\n * passed and always returns the queue. Mutative.\n */\nfunction enqueue(queue, update) {\n  if (update) {\n    queue = queue || [];\n    queue.push(update);\n  }\n  return queue;\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue(inst, updateQueue) {\n  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);\n}\n\nvar setChildrenForInstrumentation = emptyFunction;\nif (process.env.NODE_ENV !== 'production') {\n  var getDebugID = function (inst) {\n    if (!inst._debugID) {\n      // Check for ART-like instances. TODO: This is silly/gross.\n      var internal;\n      if (internal = ReactInstanceMap.get(inst)) {\n        inst = internal;\n      }\n    }\n    return inst._debugID;\n  };\n  setChildrenForInstrumentation = function (children) {\n    var debugID = getDebugID(this);\n    // TODO: React Native empty components are also multichild.\n    // This means they still get into this method but don't have _debugID.\n    if (debugID !== 0) {\n      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {\n        return children[key]._debugID;\n      }) : []);\n    }\n  };\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        var selfDebugID = getDebugID(this);\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {\n      var nextChildren;\n      var selfDebugID = 0;\n      if (process.env.NODE_ENV !== 'production') {\n        selfDebugID = getDebugID(this);\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          return nextChildren;\n        }\n      }\n      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);\n      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n      return nextChildren;\n    },\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          var selfDebugID = 0;\n          if (process.env.NODE_ENV !== 'production') {\n            selfDebugID = getDebugID(this);\n          }\n          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        setChildrenForInstrumentation.call(this, children);\n      }\n\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      var prevChildren = this._renderedChildren;\n      // Remove any rendered children.\n      ReactChildReconciler.unmountChildren(prevChildren, false);\n      for (var name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name)) {\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }\n      }\n      // Set new text content.\n      var updates = [makeTextContent(nextContent)];\n      processQueue(this, updates);\n    },\n\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      var prevChildren = this._renderedChildren;\n      // Remove any rendered children.\n      ReactChildReconciler.unmountChildren(prevChildren, false);\n      for (var name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name)) {\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }\n      }\n      var updates = [makeSetMarkup(nextMarkup)];\n      processQueue(this, updates);\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      // Hook used by React ART\n      this._updateChildren(nextNestedChildrenElements, transaction, context);\n    },\n\n    /**\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var removedNodes = {};\n      var mountImages = [];\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var updates = null;\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var nextIndex = 0;\n      var lastIndex = 0;\n      // `nextMountIndex` will increment for each newly mounted child.\n      var nextMountIndex = 0;\n      var lastPlacedNode = null;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            // The `removedNodes` loop below will actually remove the child.\n          }\n          // The child must be instantiated before it's mounted.\n          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));\n          nextMountIndex++;\n        }\n        nextIndex++;\n        lastPlacedNode = ReactReconciler.getHostNode(nextChild);\n      }\n      // Remove children that are no longer present.\n      for (name in removedNodes) {\n        if (removedNodes.hasOwnProperty(name)) {\n          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));\n        }\n      }\n      if (updates) {\n        processQueue(this, updates);\n      }\n      this._renderedChildren = nextChildren;\n\n      if (process.env.NODE_ENV !== 'production') {\n        setChildrenForInstrumentation.call(this, nextChildren);\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted. It does not actually perform any\n     * backend operations.\n     *\n     * @internal\n     */\n    unmountChildren: function (safely) {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren, safely);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, afterNode, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        return makeMove(child, afterNode, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, afterNode, mountImage) {\n      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child, node) {\n      return makeRemove(child, node);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {\n      child._mountIndex = index;\n      return this.createChild(child, afterNode, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child, node) {\n      var update = this.removeChild(child, node);\n      child._mountIndex = null;\n      return update;\n    }\n  }\n};\n\nmodule.exports = ReactMultiChild;"]},"metadata":{},"sourceType":"script"}