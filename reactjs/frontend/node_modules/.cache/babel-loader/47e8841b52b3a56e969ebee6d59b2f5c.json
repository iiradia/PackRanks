{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar EventPropagators = require('./EventPropagators');\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: 'onMouseEnter',\n    dependencies: ['topMouseOut', 'topMouseOver']\n  },\n  mouseLeave: {\n    registrationName: 'onMouseLeave',\n    dependencies: ['topMouseOut', 'topMouseOver']\n  }\n};\nvar EnterLeaveEventPlugin = {\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   */\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n\n    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n\n    if (nativeEventTarget.window === nativeEventTarget) {\n      // `nativeEventTarget` is probably a window object.\n      win = nativeEventTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = nativeEventTarget.ownerDocument;\n\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from;\n    var to;\n\n    if (topLevelType === 'topMouseOut') {\n      from = targetInst;\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;\n      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;\n    } else {\n      // Moving to a node from outside the window.\n      from = null;\n      to = targetInst;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);\n    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);\n    leave.type = 'mouseleave';\n    leave.target = fromNode;\n    leave.relatedTarget = toNode;\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);\n    enter.type = 'mouseenter';\n    enter.target = toNode;\n    enter.relatedTarget = fromNode;\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);\n    return [leave, enter];\n  }\n};\nmodule.exports = EnterLeaveEventPlugin;","map":{"version":3,"sources":["/home/iiradia/EasyA/reactjs/node_modules/react-simplert/node_modules/react-dom/lib/EnterLeaveEventPlugin.js"],"names":["EventPropagators","require","ReactDOMComponentTree","SyntheticMouseEvent","eventTypes","mouseEnter","registrationName","dependencies","mouseLeave","EnterLeaveEventPlugin","extractEvents","topLevelType","targetInst","nativeEvent","nativeEventTarget","relatedTarget","fromElement","win","window","doc","ownerDocument","defaultView","parentWindow","from","to","related","toElement","getClosestInstanceFromNode","fromNode","getNodeFromInstance","toNode","leave","getPooled","type","target","enter","accumulateEnterLeaveDispatches","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar EventPropagators = require('./EventPropagators');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: 'onMouseEnter',\n    dependencies: ['topMouseOut', 'topMouseOver']\n  },\n  mouseLeave: {\n    registrationName: 'onMouseLeave',\n    dependencies: ['topMouseOut', 'topMouseOver']\n  }\n};\n\nvar EnterLeaveEventPlugin = {\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   */\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (nativeEventTarget.window === nativeEventTarget) {\n      // `nativeEventTarget` is probably a window object.\n      win = nativeEventTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = nativeEventTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from;\n    var to;\n    if (topLevelType === 'topMouseOut') {\n      from = targetInst;\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;\n      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;\n    } else {\n      // Moving to a node from outside the window.\n      from = null;\n      to = targetInst;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);\n    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);\n\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);\n    leave.type = 'mouseleave';\n    leave.target = fromNode;\n    leave.relatedTarget = toNode;\n\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);\n    enter.type = 'mouseenter';\n    enter.target = toNode;\n    enter.relatedTarget = fromNode;\n\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);\n\n    return [leave, enter];\n  }\n};\n\nmodule.exports = EnterLeaveEventPlugin;"]},"metadata":{},"sourceType":"script"}