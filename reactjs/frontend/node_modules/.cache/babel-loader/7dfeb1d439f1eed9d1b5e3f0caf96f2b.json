{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\n\nvar warning = require('fbjs/lib/warning');\n\nfunction warnNoop(publicInstance, callerName) {\n  if (process.env.NODE_ENV !== 'production') {\n    var constructor = publicInstance.constructor;\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;\n  }\n}\n/**\n * This is the update queue used for server rendering.\n * It delegates to ReactUpdateQueue while server rendering is in progress and\n * switches to ReactNoopUpdateQueue after the transaction has completed.\n * @class ReactServerUpdateQueue\n * @param {Transaction} transaction\n */\n\n\nvar ReactServerUpdateQueue = function () {\n  function ReactServerUpdateQueue(transaction) {\n    _classCallCheck(this, ReactServerUpdateQueue);\n\n    this.transaction = transaction;\n  }\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n\n\n  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {\n    return false;\n  };\n  /**\n   * Enqueue a callback that will be executed after all the pending updates\n   * have processed.\n   *\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\n   * @param {?function} callback Called after state is updated.\n   * @internal\n   */\n\n\n  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {\n    if (this.transaction.isInTransaction()) {\n      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);\n    }\n  };\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @internal\n   */\n\n\n  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {\n    if (this.transaction.isInTransaction()) {\n      ReactUpdateQueue.enqueueForceUpdate(publicInstance);\n    } else {\n      warnNoop(publicInstance, 'forceUpdate');\n    }\n  };\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object|function} completeState Next state.\n   * @internal\n   */\n\n\n  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {\n    if (this.transaction.isInTransaction()) {\n      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);\n    } else {\n      warnNoop(publicInstance, 'replaceState');\n    }\n  };\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object|function} partialState Next partial state to be merged with state.\n   * @internal\n   */\n\n\n  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {\n    if (this.transaction.isInTransaction()) {\n      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);\n    } else {\n      warnNoop(publicInstance, 'setState');\n    }\n  };\n\n  return ReactServerUpdateQueue;\n}();\n\nmodule.exports = ReactServerUpdateQueue;","map":{"version":3,"sources":["/home/iiradia/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/ReactServerUpdateQueue.js"],"names":["_classCallCheck","instance","Constructor","TypeError","ReactUpdateQueue","require","warning","warnNoop","publicInstance","callerName","process","env","NODE_ENV","constructor","displayName","name","ReactServerUpdateQueue","transaction","prototype","isMounted","enqueueCallback","callback","isInTransaction","enqueueForceUpdate","enqueueReplaceState","completeState","enqueueSetState","partialState","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\n\nvar warning = require('fbjs/lib/warning');\n\nfunction warnNoop(publicInstance, callerName) {\n  if (process.env.NODE_ENV !== 'production') {\n    var constructor = publicInstance.constructor;\n    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;\n  }\n}\n\n/**\n * This is the update queue used for server rendering.\n * It delegates to ReactUpdateQueue while server rendering is in progress and\n * switches to ReactNoopUpdateQueue after the transaction has completed.\n * @class ReactServerUpdateQueue\n * @param {Transaction} transaction\n */\n\nvar ReactServerUpdateQueue = function () {\n  function ReactServerUpdateQueue(transaction) {\n    _classCallCheck(this, ReactServerUpdateQueue);\n\n    this.transaction = transaction;\n  }\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n\n\n  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {\n    return false;\n  };\n\n  /**\n   * Enqueue a callback that will be executed after all the pending updates\n   * have processed.\n   *\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\n   * @param {?function} callback Called after state is updated.\n   * @internal\n   */\n\n\n  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {\n    if (this.transaction.isInTransaction()) {\n      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);\n    }\n  };\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @internal\n   */\n\n\n  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {\n    if (this.transaction.isInTransaction()) {\n      ReactUpdateQueue.enqueueForceUpdate(publicInstance);\n    } else {\n      warnNoop(publicInstance, 'forceUpdate');\n    }\n  };\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object|function} completeState Next state.\n   * @internal\n   */\n\n\n  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {\n    if (this.transaction.isInTransaction()) {\n      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);\n    } else {\n      warnNoop(publicInstance, 'replaceState');\n    }\n  };\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object|function} partialState Next partial state to be merged with state.\n   * @internal\n   */\n\n\n  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {\n    if (this.transaction.isInTransaction()) {\n      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);\n    } else {\n      warnNoop(publicInstance, 'setState');\n    }\n  };\n\n  return ReactServerUpdateQueue;\n}();\n\nmodule.exports = ReactServerUpdateQueue;"]},"metadata":{},"sourceType":"script"}