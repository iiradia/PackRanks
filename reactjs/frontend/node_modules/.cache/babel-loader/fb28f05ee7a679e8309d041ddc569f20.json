{"ast":null,"code":"import getVariation from \"./getVariation.js\";\nimport { variationPlacements, basePlacements, placements as allPlacements } from \"../enums.js\";\nimport detectOverflow from \"./detectOverflow.js\";\nimport getBasePlacement from \"./getBasePlacement.js\";\n/*:: type OverflowsMap = { [ComputedPlacement]: number }; */\n\n/*;; type OverflowsMap = { [key in ComputedPlacement]: number }; */\n\nexport default function computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? allPlacements : _options$allowedAutoP;\n  var variation = getVariation(placement);\n  var placements = (variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n    return getVariation(placement) === variation;\n  }) : basePlacements).filter(function (placement) {\n    return allowedAutoPlacements.indexOf(placement) >= 0;\n  }); // $FlowFixMe: Flow seems to have problems with two array unions...\n\n  var overflows = placements.reduce(function (acc, placement) {\n    acc[placement] = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding\n    })[getBasePlacement(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function (a, b) {\n    return overflows[a] - overflows[b];\n  });\n}","map":{"version":3,"sources":["/Users/mathew/EasyA/reactjs/frontend/node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js"],"names":["getVariation","variationPlacements","basePlacements","placements","allPlacements","detectOverflow","getBasePlacement","computeAutoPlacement","state","options","_options","placement","boundary","rootBoundary","padding","flipVariations","_options$allowedAutoP","allowedAutoPlacements","variation","filter","indexOf","overflows","reduce","acc","Object","keys","sort","a","b"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,SAASC,mBAAT,EAA8BC,cAA9B,EAA8CC,UAAU,IAAIC,aAA5D,QAAiF,aAAjF;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AAEA;;AAEA;;AACA,eAAe,SAASC,oBAAT,CAA8BC,KAA9B,EAAqCC,OAArC,EAA8C;AAC3D,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIC,QAAQ,GAAGD,OAAf;AAAA,MACIE,SAAS,GAAGD,QAAQ,CAACC,SADzB;AAAA,MAEIC,QAAQ,GAAGF,QAAQ,CAACE,QAFxB;AAAA,MAGIC,YAAY,GAAGH,QAAQ,CAACG,YAH5B;AAAA,MAIIC,OAAO,GAAGJ,QAAQ,CAACI,OAJvB;AAAA,MAKIC,cAAc,GAAGL,QAAQ,CAACK,cAL9B;AAAA,MAMIC,qBAAqB,GAAGN,QAAQ,CAACO,qBANrC;AAAA,MAOIA,qBAAqB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmCZ,aAAnC,GAAmDY,qBAP/E;AAQA,MAAIE,SAAS,GAAGlB,YAAY,CAACW,SAAD,CAA5B;AACA,MAAIR,UAAU,GAAG,CAACe,SAAS,GAAGH,cAAc,GAAGd,mBAAH,GAAyBA,mBAAmB,CAACkB,MAApB,CAA2B,UAAUR,SAAV,EAAqB;AACnH,WAAOX,YAAY,CAACW,SAAD,CAAZ,KAA4BO,SAAnC;AACD,GAFoE,CAA1C,GAEtBhB,cAFY,EAEIiB,MAFJ,CAEW,UAAUR,SAAV,EAAqB;AAC/C,WAAOM,qBAAqB,CAACG,OAAtB,CAA8BT,SAA9B,KAA4C,CAAnD;AACD,GAJgB,CAAjB,CAd2D,CAkBvD;;AAEJ,MAAIU,SAAS,GAAGlB,UAAU,CAACmB,MAAX,CAAkB,UAAUC,GAAV,EAAeZ,SAAf,EAA0B;AAC1DY,IAAAA,GAAG,CAACZ,SAAD,CAAH,GAAiBN,cAAc,CAACG,KAAD,EAAQ;AACrCG,MAAAA,SAAS,EAAEA,SAD0B;AAErCC,MAAAA,QAAQ,EAAEA,QAF2B;AAGrCC,MAAAA,YAAY,EAAEA,YAHuB;AAIrCC,MAAAA,OAAO,EAAEA;AAJ4B,KAAR,CAAd,CAKdR,gBAAgB,CAACK,SAAD,CALF,CAAjB;AAMA,WAAOY,GAAP;AACD,GARe,EAQb,EARa,CAAhB;AASA,SAAOC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,EAAuBK,IAAvB,CAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACjD,WAAOP,SAAS,CAACM,CAAD,CAAT,GAAeN,SAAS,CAACO,CAAD,CAA/B;AACD,GAFM,CAAP;AAGD","sourcesContent":["import getVariation from \"./getVariation.js\";\nimport { variationPlacements, basePlacements, placements as allPlacements } from \"../enums.js\";\nimport detectOverflow from \"./detectOverflow.js\";\nimport getBasePlacement from \"./getBasePlacement.js\";\n\n/*:: type OverflowsMap = { [ComputedPlacement]: number }; */\n\n/*;; type OverflowsMap = { [key in ComputedPlacement]: number }; */\nexport default function computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? allPlacements : _options$allowedAutoP;\n  var variation = getVariation(placement);\n  var placements = (variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n    return getVariation(placement) === variation;\n  }) : basePlacements).filter(function (placement) {\n    return allowedAutoPlacements.indexOf(placement) >= 0;\n  }); // $FlowFixMe: Flow seems to have problems with two array unions...\n\n  var overflows = placements.reduce(function (acc, placement) {\n    acc[placement] = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding\n    })[getBasePlacement(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function (a, b) {\n    return overflows[a] - overflows[b];\n  });\n}"]},"metadata":{},"sourceType":"module"}