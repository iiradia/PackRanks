{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n/**\n * Given any node return the first leaf node without children.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {DOMElement|DOMTextNode}\n */\n\nfunction getLeafNode(node) {\n  while (node && node.firstChild) {\n    node = node.firstChild;\n  }\n\n  return node;\n}\n/**\n * Get the next sibling within a container. This will walk up the\n * DOM if a node's siblings have been exhausted.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {?DOMElement|DOMTextNode}\n */\n\n\nfunction getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n\n    node = node.parentNode;\n  }\n}\n/**\n * Get object describing the nodes which contain characters at offset.\n *\n * @param {DOMElement|DOMTextNode} root\n * @param {number} offset\n * @return {?object}\n */\n\n\nfunction getNodeForCharacterOffset(root, offset) {\n  var node = getLeafNode(root);\n  var nodeStart = 0;\n  var nodeEnd = 0;\n\n  while (node) {\n    if (node.nodeType === 3) {\n      nodeEnd = nodeStart + node.textContent.length;\n\n      if (nodeStart <= offset && nodeEnd >= offset) {\n        return {\n          node: node,\n          offset: offset - nodeStart\n        };\n      }\n\n      nodeStart = nodeEnd;\n    }\n\n    node = getLeafNode(getSiblingNode(node));\n  }\n}\n\nmodule.exports = getNodeForCharacterOffset;","map":{"version":3,"sources":["/home/iiradia/EasyA/reactjs/node_modules/react-simplert/node_modules/react-dom/lib/getNodeForCharacterOffset.js"],"names":["getLeafNode","node","firstChild","getSiblingNode","nextSibling","parentNode","getNodeForCharacterOffset","root","offset","nodeStart","nodeEnd","nodeType","textContent","length","module","exports"],"mappings":"AAAA;;;;;;;AAQA;AAEA;;;;;;;AAOA,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AACzB,SAAOA,IAAI,IAAIA,IAAI,CAACC,UAApB,EAAgC;AAC9BD,IAAAA,IAAI,GAAGA,IAAI,CAACC,UAAZ;AACD;;AACD,SAAOD,IAAP;AACD;AAED;;;;;;;;;AAOA,SAASE,cAAT,CAAwBF,IAAxB,EAA8B;AAC5B,SAAOA,IAAP,EAAa;AACX,QAAIA,IAAI,CAACG,WAAT,EAAsB;AACpB,aAAOH,IAAI,CAACG,WAAZ;AACD;;AACDH,IAAAA,IAAI,GAAGA,IAAI,CAACI,UAAZ;AACD;AACF;AAED;;;;;;;;;AAOA,SAASC,yBAAT,CAAmCC,IAAnC,EAAyCC,MAAzC,EAAiD;AAC/C,MAAIP,IAAI,GAAGD,WAAW,CAACO,IAAD,CAAtB;AACA,MAAIE,SAAS,GAAG,CAAhB;AACA,MAAIC,OAAO,GAAG,CAAd;;AAEA,SAAOT,IAAP,EAAa;AACX,QAAIA,IAAI,CAACU,QAAL,KAAkB,CAAtB,EAAyB;AACvBD,MAAAA,OAAO,GAAGD,SAAS,GAAGR,IAAI,CAACW,WAAL,CAAiBC,MAAvC;;AAEA,UAAIJ,SAAS,IAAID,MAAb,IAAuBE,OAAO,IAAIF,MAAtC,EAA8C;AAC5C,eAAO;AACLP,UAAAA,IAAI,EAAEA,IADD;AAELO,UAAAA,MAAM,EAAEA,MAAM,GAAGC;AAFZ,SAAP;AAID;;AAEDA,MAAAA,SAAS,GAAGC,OAAZ;AACD;;AAEDT,IAAAA,IAAI,GAAGD,WAAW,CAACG,cAAc,CAACF,IAAD,CAAf,CAAlB;AACD;AACF;;AAEDa,MAAM,CAACC,OAAP,GAAiBT,yBAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Given any node return the first leaf node without children.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {DOMElement|DOMTextNode}\n */\n\nfunction getLeafNode(node) {\n  while (node && node.firstChild) {\n    node = node.firstChild;\n  }\n  return node;\n}\n\n/**\n * Get the next sibling within a container. This will walk up the\n * DOM if a node's siblings have been exhausted.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {?DOMElement|DOMTextNode}\n */\nfunction getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    node = node.parentNode;\n  }\n}\n\n/**\n * Get object describing the nodes which contain characters at offset.\n *\n * @param {DOMElement|DOMTextNode} root\n * @param {number} offset\n * @return {?object}\n */\nfunction getNodeForCharacterOffset(root, offset) {\n  var node = getLeafNode(root);\n  var nodeStart = 0;\n  var nodeEnd = 0;\n\n  while (node) {\n    if (node.nodeType === 3) {\n      nodeEnd = nodeStart + node.textContent.length;\n\n      if (nodeStart <= offset && nodeEnd >= offset) {\n        return {\n          node: node,\n          offset: offset - nodeStart\n        };\n      }\n\n      nodeStart = nodeEnd;\n    }\n\n    node = getLeafNode(getSiblingNode(node));\n  }\n}\n\nmodule.exports = getNodeForCharacterOffset;"]},"metadata":{},"sourceType":"script"}