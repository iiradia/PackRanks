{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nfunction isCheckable(elem) {\n  var type = elem.type;\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');\n}\n\nfunction getTracker(inst) {\n  return inst._wrapperState.valueTracker;\n}\n\nfunction attachTracker(inst, tracker) {\n  inst._wrapperState.valueTracker = tracker;\n}\n\nfunction detachTracker(inst) {\n  inst._wrapperState.valueTracker = null;\n}\n\nfunction getValueFromNode(node) {\n  var value;\n\n  if (node) {\n    value = isCheckable(node) ? '' + node.checked : node.value;\n  }\n\n  return value;\n}\n\nvar inputValueTracking = {\n  // exposed for testing\n  _getTrackerFromNode: function (node) {\n    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));\n  },\n  track: function (inst) {\n    if (getTracker(inst)) {\n      return;\n    }\n\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var valueField = isCheckable(node) ? 'checked' : 'value';\n    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);\n    var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail\n    // and don't track value will cause over reporting of changes,\n    // but it's better then a hard failure\n    // (needed for certain tests that spyOn input values and Safari)\n\n    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\n      return;\n    }\n\n    Object.defineProperty(node, valueField, {\n      enumerable: descriptor.enumerable,\n      configurable: true,\n      get: function () {\n        return descriptor.get.call(this);\n      },\n      set: function (value) {\n        currentValue = '' + value;\n        descriptor.set.call(this, value);\n      }\n    });\n    attachTracker(inst, {\n      getValue: function () {\n        return currentValue;\n      },\n      setValue: function (value) {\n        currentValue = '' + value;\n      },\n      stopTracking: function () {\n        detachTracker(inst);\n        delete node[valueField];\n      }\n    });\n  },\n  updateValueIfChanged: function (inst) {\n    if (!inst) {\n      return false;\n    }\n\n    var tracker = getTracker(inst);\n\n    if (!tracker) {\n      inputValueTracking.track(inst);\n      return true;\n    }\n\n    var lastValue = tracker.getValue();\n    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));\n\n    if (nextValue !== lastValue) {\n      tracker.setValue(nextValue);\n      return true;\n    }\n\n    return false;\n  },\n  stopTracking: function (inst) {\n    var tracker = getTracker(inst);\n\n    if (tracker) {\n      tracker.stopTracking();\n    }\n  }\n};\nmodule.exports = inputValueTracking;","map":{"version":3,"sources":["/mnt/c/Users/Harry-PC/Documents/ProgrammingProjects/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/inputValueTracking.js"],"names":["ReactDOMComponentTree","require","isCheckable","elem","type","nodeName","toLowerCase","getTracker","inst","_wrapperState","valueTracker","attachTracker","tracker","detachTracker","getValueFromNode","node","value","checked","inputValueTracking","_getTrackerFromNode","getInstanceFromNode","track","getNodeFromInstance","valueField","descriptor","Object","getOwnPropertyDescriptor","constructor","prototype","currentValue","hasOwnProperty","get","set","defineProperty","enumerable","configurable","call","getValue","setValue","stopTracking","updateValueIfChanged","lastValue","nextValue","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nfunction isCheckable(elem) {\n  var type = elem.type;\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');\n}\n\nfunction getTracker(inst) {\n  return inst._wrapperState.valueTracker;\n}\n\nfunction attachTracker(inst, tracker) {\n  inst._wrapperState.valueTracker = tracker;\n}\n\nfunction detachTracker(inst) {\n  inst._wrapperState.valueTracker = null;\n}\n\nfunction getValueFromNode(node) {\n  var value;\n  if (node) {\n    value = isCheckable(node) ? '' + node.checked : node.value;\n  }\n  return value;\n}\n\nvar inputValueTracking = {\n  // exposed for testing\n  _getTrackerFromNode: function (node) {\n    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));\n  },\n\n\n  track: function (inst) {\n    if (getTracker(inst)) {\n      return;\n    }\n\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var valueField = isCheckable(node) ? 'checked' : 'value';\n    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);\n\n    var currentValue = '' + node[valueField];\n\n    // if someone has already defined a value or Safari, then bail\n    // and don't track value will cause over reporting of changes,\n    // but it's better then a hard failure\n    // (needed for certain tests that spyOn input values and Safari)\n    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\n      return;\n    }\n\n    Object.defineProperty(node, valueField, {\n      enumerable: descriptor.enumerable,\n      configurable: true,\n      get: function () {\n        return descriptor.get.call(this);\n      },\n      set: function (value) {\n        currentValue = '' + value;\n        descriptor.set.call(this, value);\n      }\n    });\n\n    attachTracker(inst, {\n      getValue: function () {\n        return currentValue;\n      },\n      setValue: function (value) {\n        currentValue = '' + value;\n      },\n      stopTracking: function () {\n        detachTracker(inst);\n        delete node[valueField];\n      }\n    });\n  },\n\n  updateValueIfChanged: function (inst) {\n    if (!inst) {\n      return false;\n    }\n    var tracker = getTracker(inst);\n\n    if (!tracker) {\n      inputValueTracking.track(inst);\n      return true;\n    }\n\n    var lastValue = tracker.getValue();\n    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));\n\n    if (nextValue !== lastValue) {\n      tracker.setValue(nextValue);\n      return true;\n    }\n\n    return false;\n  },\n  stopTracking: function (inst) {\n    var tracker = getTracker(inst);\n    if (tracker) {\n      tracker.stopTracking();\n    }\n  }\n};\n\nmodule.exports = inputValueTracking;"]},"metadata":{},"sourceType":"script"}