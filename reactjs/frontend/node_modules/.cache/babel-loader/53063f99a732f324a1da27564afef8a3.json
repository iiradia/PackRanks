{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar ReactRef = require('./ReactRef');\n\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar warning = require('fbjs/lib/warning');\n/**\n * Helper to call ReactRef.attachRefs with this composite component, split out\n * to avoid allocations in the transaction mount-ready queue.\n */\n\n\nfunction attachRefs() {\n  ReactRef.attachRefs(this, this._currentElement);\n}\n\nvar ReactReconciler = {\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {?object} the containing host component instance\n   * @param {?object} info about the host container\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots\n  {\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);\n      }\n    }\n\n    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);\n\n    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);\n      }\n    }\n\n    return markup;\n  },\n\n  /**\n   * Returns a value that can be passed to\n   * ReactComponentEnvironment.replaceNodeWithMarkup.\n   */\n  getHostNode: function (internalInstance) {\n    return internalInstance.getHostNode();\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function (internalInstance, safely) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);\n      }\n    }\n\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);\n    internalInstance.unmountComponent(safely);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);\n      }\n    }\n  },\n\n  /**\n   * Update a component using a new element.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @internal\n   */\n  receiveComponent: function (internalInstance, nextElement, transaction, context) {\n    var prevElement = internalInstance._currentElement;\n\n    if (nextElement === prevElement && context === internalInstance._context) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for an element created outside a composite to be\n      // deeply mutated and reused.\n      // TODO: Bailing out early is just a perf optimization right?\n      // TODO: Removing the return statement should affect correctness?\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);\n      }\n    }\n\n    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);\n\n    if (refsChanged) {\n      ReactRef.detachRefs(internalInstance, prevElement);\n    }\n\n    internalInstance.receiveComponent(nextElement, transaction, context);\n\n    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);\n      }\n    }\n  },\n\n  /**\n   * Flush any dirty changes in a component.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {\n    if (internalInstance._updateBatchNumber !== updateBatchNumber) {\n      // The component's enqueued batch number should always be the current\n      // batch or the following one.\n      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);\n      }\n    }\n\n    internalInstance.performUpdateIfNecessary(transaction);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);\n      }\n    }\n  }\n};\nmodule.exports = ReactReconciler;","map":{"version":3,"sources":["/Users/mathew/EasyA/reactjs/frontend/node_modules/react-simplert/node_modules/react-dom/lib/ReactReconciler.js"],"names":["ReactRef","require","ReactInstrumentation","warning","attachRefs","_currentElement","ReactReconciler","mountComponent","internalInstance","transaction","hostParent","hostContainerInfo","context","parentDebugID","process","env","NODE_ENV","_debugID","debugTool","onBeforeMountComponent","markup","ref","getReactMountReady","enqueue","onMountComponent","getHostNode","unmountComponent","safely","onBeforeUnmountComponent","detachRefs","onUnmountComponent","receiveComponent","nextElement","prevElement","_context","onBeforeUpdateComponent","refsChanged","shouldUpdateRefs","onUpdateComponent","performUpdateIfNecessary","updateBatchNumber","_updateBatchNumber","module","exports"],"mappings":"AAAA;;;;;;;AAQA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIE,OAAO,GAAGF,OAAO,CAAC,kBAAD,CAArB;AAEA;;;;;;AAIA,SAASG,UAAT,GAAsB;AACpBJ,EAAAA,QAAQ,CAACI,UAAT,CAAoB,IAApB,EAA0B,KAAKC,eAA/B;AACD;;AAED,IAAIC,eAAe,GAAG;AACpB;;;;;;;;;;;AAWAC,EAAAA,cAAc,EAAE,UAAUC,gBAAV,EAA4BC,WAA5B,EAAyCC,UAAzC,EAAqDC,iBAArD,EAAwEC,OAAxE,EAAiFC,aAAjF,EAAgG;AAChH;AACE,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIR,gBAAgB,CAACS,QAAjB,KAA8B,CAAlC,EAAqC;AACnCf,QAAAA,oBAAoB,CAACgB,SAArB,CAA+BC,sBAA/B,CAAsDX,gBAAgB,CAACS,QAAvE,EAAiFT,gBAAgB,CAACH,eAAlG,EAAmHQ,aAAnH;AACD;AACF;;AACD,QAAIO,MAAM,GAAGZ,gBAAgB,CAACD,cAAjB,CAAgCE,WAAhC,EAA6CC,UAA7C,EAAyDC,iBAAzD,EAA4EC,OAA5E,EAAqFC,aAArF,CAAb;;AACA,QAAIL,gBAAgB,CAACH,eAAjB,IAAoCG,gBAAgB,CAACH,eAAjB,CAAiCgB,GAAjC,IAAwC,IAAhF,EAAsF;AACpFZ,MAAAA,WAAW,CAACa,kBAAZ,GAAiCC,OAAjC,CAAyCnB,UAAzC,EAAqDI,gBAArD;AACD;;AACD,QAAIM,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIR,gBAAgB,CAACS,QAAjB,KAA8B,CAAlC,EAAqC;AACnCf,QAAAA,oBAAoB,CAACgB,SAArB,CAA+BM,gBAA/B,CAAgDhB,gBAAgB,CAACS,QAAjE;AACD;AACF;;AACD,WAAOG,MAAP;AACD,GA7BmB;;AA+BpB;;;;AAIAK,EAAAA,WAAW,EAAE,UAAUjB,gBAAV,EAA4B;AACvC,WAAOA,gBAAgB,CAACiB,WAAjB,EAAP;AACD,GArCmB;;AAuCpB;;;;;;AAMAC,EAAAA,gBAAgB,EAAE,UAAUlB,gBAAV,EAA4BmB,MAA5B,EAAoC;AACpD,QAAIb,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIR,gBAAgB,CAACS,QAAjB,KAA8B,CAAlC,EAAqC;AACnCf,QAAAA,oBAAoB,CAACgB,SAArB,CAA+BU,wBAA/B,CAAwDpB,gBAAgB,CAACS,QAAzE;AACD;AACF;;AACDjB,IAAAA,QAAQ,CAAC6B,UAAT,CAAoBrB,gBAApB,EAAsCA,gBAAgB,CAACH,eAAvD;AACAG,IAAAA,gBAAgB,CAACkB,gBAAjB,CAAkCC,MAAlC;;AACA,QAAIb,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIR,gBAAgB,CAACS,QAAjB,KAA8B,CAAlC,EAAqC;AACnCf,QAAAA,oBAAoB,CAACgB,SAArB,CAA+BY,kBAA/B,CAAkDtB,gBAAgB,CAACS,QAAnE;AACD;AACF;AACF,GA1DmB;;AA4DpB;;;;;;;;;AASAc,EAAAA,gBAAgB,EAAE,UAAUvB,gBAAV,EAA4BwB,WAA5B,EAAyCvB,WAAzC,EAAsDG,OAAtD,EAA+D;AAC/E,QAAIqB,WAAW,GAAGzB,gBAAgB,CAACH,eAAnC;;AAEA,QAAI2B,WAAW,KAAKC,WAAhB,IAA+BrB,OAAO,KAAKJ,gBAAgB,CAAC0B,QAAhE,EAA0E;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACD;;AAED,QAAIpB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIR,gBAAgB,CAACS,QAAjB,KAA8B,CAAlC,EAAqC;AACnCf,QAAAA,oBAAoB,CAACgB,SAArB,CAA+BiB,uBAA/B,CAAuD3B,gBAAgB,CAACS,QAAxE,EAAkFe,WAAlF;AACD;AACF;;AAED,QAAII,WAAW,GAAGpC,QAAQ,CAACqC,gBAAT,CAA0BJ,WAA1B,EAAuCD,WAAvC,CAAlB;;AAEA,QAAII,WAAJ,EAAiB;AACfpC,MAAAA,QAAQ,CAAC6B,UAAT,CAAoBrB,gBAApB,EAAsCyB,WAAtC;AACD;;AAEDzB,IAAAA,gBAAgB,CAACuB,gBAAjB,CAAkCC,WAAlC,EAA+CvB,WAA/C,EAA4DG,OAA5D;;AAEA,QAAIwB,WAAW,IAAI5B,gBAAgB,CAACH,eAAhC,IAAmDG,gBAAgB,CAACH,eAAjB,CAAiCgB,GAAjC,IAAwC,IAA/F,EAAqG;AACnGZ,MAAAA,WAAW,CAACa,kBAAZ,GAAiCC,OAAjC,CAAyCnB,UAAzC,EAAqDI,gBAArD;AACD;;AAED,QAAIM,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIR,gBAAgB,CAACS,QAAjB,KAA8B,CAAlC,EAAqC;AACnCf,QAAAA,oBAAoB,CAACgB,SAArB,CAA+BoB,iBAA/B,CAAiD9B,gBAAgB,CAACS,QAAlE;AACD;AACF;AACF,GA7GmB;;AA+GpB;;;;;;;AAOAsB,EAAAA,wBAAwB,EAAE,UAAU/B,gBAAV,EAA4BC,WAA5B,EAAyC+B,iBAAzC,EAA4D;AACpF,QAAIhC,gBAAgB,CAACiC,kBAAjB,KAAwCD,iBAA5C,EAA+D;AAC7D;AACA;AACA1B,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCb,OAAO,CAACK,gBAAgB,CAACiC,kBAAjB,IAAuC,IAAvC,IAA+CjC,gBAAgB,CAACiC,kBAAjB,KAAwCD,iBAAiB,GAAG,CAA5G,EAA+G,oEAAoE,aAAnL,EAAkMA,iBAAlM,EAAqNhC,gBAAgB,CAACiC,kBAAtO,CAA/C,GAA2S,KAAK,CAAhT;AACA;AACD;;AACD,QAAI3B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIR,gBAAgB,CAACS,QAAjB,KAA8B,CAAlC,EAAqC;AACnCf,QAAAA,oBAAoB,CAACgB,SAArB,CAA+BiB,uBAA/B,CAAuD3B,gBAAgB,CAACS,QAAxE,EAAkFT,gBAAgB,CAACH,eAAnG;AACD;AACF;;AACDG,IAAAA,gBAAgB,CAAC+B,wBAAjB,CAA0C9B,WAA1C;;AACA,QAAIK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIR,gBAAgB,CAACS,QAAjB,KAA8B,CAAlC,EAAqC;AACnCf,QAAAA,oBAAoB,CAACgB,SAArB,CAA+BoB,iBAA/B,CAAiD9B,gBAAgB,CAACS,QAAlE;AACD;AACF;AACF;AAxImB,CAAtB;AA2IAyB,MAAM,CAACC,OAAP,GAAiBrC,eAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar ReactRef = require('./ReactRef');\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Helper to call ReactRef.attachRefs with this composite component, split out\n * to avoid allocations in the transaction mount-ready queue.\n */\nfunction attachRefs() {\n  ReactRef.attachRefs(this, this._currentElement);\n}\n\nvar ReactReconciler = {\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {?object} the containing host component instance\n   * @param {?object} info about the host container\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots\n  {\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);\n      }\n    }\n    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);\n    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);\n      }\n    }\n    return markup;\n  },\n\n  /**\n   * Returns a value that can be passed to\n   * ReactComponentEnvironment.replaceNodeWithMarkup.\n   */\n  getHostNode: function (internalInstance) {\n    return internalInstance.getHostNode();\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function (internalInstance, safely) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);\n      }\n    }\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);\n    internalInstance.unmountComponent(safely);\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);\n      }\n    }\n  },\n\n  /**\n   * Update a component using a new element.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @internal\n   */\n  receiveComponent: function (internalInstance, nextElement, transaction, context) {\n    var prevElement = internalInstance._currentElement;\n\n    if (nextElement === prevElement && context === internalInstance._context) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for an element created outside a composite to be\n      // deeply mutated and reused.\n\n      // TODO: Bailing out early is just a perf optimization right?\n      // TODO: Removing the return statement should affect correctness?\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);\n      }\n    }\n\n    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);\n\n    if (refsChanged) {\n      ReactRef.detachRefs(internalInstance, prevElement);\n    }\n\n    internalInstance.receiveComponent(nextElement, transaction, context);\n\n    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);\n      }\n    }\n  },\n\n  /**\n   * Flush any dirty changes in a component.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {\n    if (internalInstance._updateBatchNumber !== updateBatchNumber) {\n      // The component's enqueued batch number should always be the current\n      // batch or the following one.\n      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);\n      }\n    }\n    internalInstance.performUpdateIfNecessary(transaction);\n    if (process.env.NODE_ENV !== 'production') {\n      if (internalInstance._debugID !== 0) {\n        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);\n      }\n    }\n  }\n};\n\nmodule.exports = ReactReconciler;"]},"metadata":{},"sourceType":"script"}