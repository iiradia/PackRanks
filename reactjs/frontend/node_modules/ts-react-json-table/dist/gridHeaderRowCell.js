"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var GridHeaderRowCell = /** @class */ (function (_super) {
    __extends(GridHeaderRowCell, _super);
    function GridHeaderRowCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GridHeaderRowCell.prototype.render = function () {
        var headerClass = this.props.settings.headerClass;
        //let label: string;
        var rowSpan = null;
        var colSpan = 1;
        var skip = false;
        if (this.props.groupCell) {
            if (this.props.column.group) {
                if (this.props.column.groupIndex === 0) {
                    this.header = this.props.column.group;
                    colSpan = this.props.column.colSpan;
                }
                else {
                    skip = true;
                }
            }
            else {
                this.header = this.props.column.label;
                rowSpan = 2;
            }
        }
        else {
            if (this.props.grouping) {
                if (this.props.column.group) {
                    this.header = this.props.column.label;
                }
                else {
                    skip = true;
                }
            }
            else {
                this.header = this.props.column.label;
            }
        }
        //this.key = (this.props.column.group && this.header === this.props.column.group) ? this.header.replace(/\W+/g, '') : this.props.column.key;
        this.key = (this.props.column.group && this.header === this.props.column.group) ? this.header : this.props.column.key;
        var className = this.props.settings.classPrefix + "Column " + this.props.settings.classPrefix + "Column_" + this.key.replace(/\W+/g, '');
        if (headerClass) {
            className = headerClass(className, this.key);
        }
        var content = this.props.settings.freezeHeader ? React.createElement("div", null,
            React.createElement("div", null, this.header),
            React.createElement("div", null, this.header)) : this.header;
        return skip ? null : this.createTh(className, rowSpan, colSpan, content);
    };
    GridHeaderRowCell.prototype.createTh = function (className, rowSpan, colSpan, content) {
        return React.createElement("th", { className: className, onClick: this.onClick.bind(this, this.key), "data-key": this.key, rowSpan: rowSpan, colSpan: colSpan }, content);
    };
    GridHeaderRowCell.prototype.onClick = function (key, e) {
        if (this.props.onClickHeader) {
            this.props.onClickHeader(e, key);
        }
    };
    return GridHeaderRowCell;
}(React.Component));
exports.GridHeaderRowCell = GridHeaderRowCell;
//# sourceMappingURL=gridHeaderRowCell.js.map